{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/rebots.txt","path":"rebots.txt","modified":0,"renderable":0},{"_id":"themes/hexo-theme-material-x/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/js/volantis.js","path":"js/volantis.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"dcbc8d9b4d3a785b39ab3a2f1303e138e5755d38","modified":1566645459100},{"_id":"source/CNAME","hash":"b7409cca19cec923c22ffda64e9f04784ba9d420","modified":1601703652660},{"_id":"source/rebots.txt","hash":"996f9babc2d7da4cacd8b8479207d7ad151432c0","modified":1602071928469},{"_id":"themes/hexo-theme-material-x/LICENSE","hash":"e0cbf6906cab5926a34f17852db6c05187ee1f68","modified":1566701192003},{"_id":"themes/hexo-theme-material-x/README.md","hash":"584012c2491d545e1b9428cce3bf5074b1259f52","modified":1566701192004},{"_id":"themes/hexo-theme-material-x/_config.yml","hash":"e6f77aab4c4fa851cdb14289d8a144c84e486886","modified":1602119103419},{"_id":"source/_posts/4-tips-of-hexo.md","hash":"832d62345de8c42078735edc83167e9d2cc2f646","modified":1602145144091},{"_id":"source/_posts/create-ebook-with-github-and-gitbook.md","hash":"ecc280e55297f298023eb76d2cea4bc8abdbbbe4","modified":1602144711099},{"_id":"source/_posts/deploy-harbor-repository-in-centos.md","hash":"14e7eacdd4b8965170213c996ed034223d4fbd42","modified":1602144922675},{"_id":"source/_posts/how-to-modify-mysql-password-in-windows.md","hash":"8b78caafe3d59da9b8fcba17fb53b4b353429775","modified":1602145156897},{"_id":"source/_posts/create-github-pages-with-hexo.md","hash":"5e457f270da6b56f21a0ff2d07dfa98f6fa0e23d","modified":1602144821935},{"_id":"source/_posts/how-to-set-sub-domain-and-naked-domain-to-Github-Pages-simultaneously.md","hash":"644d6edfd2e68b976472ca730104d6f967427f2b","modified":1602144943772},{"_id":"source/_posts/parse-the-kindle-markup-files-by-using-python.md","hash":"f386e6c982224477a3f7161361259d09b82dd003","modified":1602145037973},{"_id":"source/docker/index.md","hash":"3426597ebfc21a887e2951c9be742a77bb0f1f3d","modified":1566644269509},{"_id":"source/categories/index.md","hash":"669a5cf1e286bc78d243a738d098ac9ffd67c4ab","modified":1566644269509},{"_id":"source/tags/index.md","hash":"682cad7cd079024e5b457a9ff3d6dc0758727e51","modified":1566644269510},{"_id":"themes/hexo-theme-material-x/languages/en.yml","hash":"4a12c7609d40e9569c89401a4c69870e9cff00eb","modified":1601461096204},{"_id":"themes/hexo-theme-material-x/languages/zh-CN.yml","hash":"bcce4759ea042093de7ac798a600ab39a19860ff","modified":1601461101957},{"_id":"themes/hexo-theme-material-x/languages/zh-HK.yml","hash":"df71b90625893b49aa833107653f4240ca87a0f0","modified":1601461107924},{"_id":"themes/hexo-theme-material-x/languages/zh-TW.yml","hash":"bfcd8a8ec23ad3cda61d36f04f82a88598438b4a","modified":1601461113340},{"_id":"themes/hexo-theme-material-x/layout/archive.ejs","hash":"36325688339c59d3c615e7f76558518a854b6448","modified":1566701192032},{"_id":"themes/hexo-theme-material-x/layout/category.ejs","hash":"ef7b8f73351625877312305e0bc09b52d6dcbb53","modified":1566701192033},{"_id":"themes/hexo-theme-material-x/layout/index.ejs","hash":"004a2d7e0fff53cb7907e4acd76d1d8a88385fbd","modified":1566701192033},{"_id":"themes/hexo-theme-material-x/layout/layout.ejs","hash":"50cc4da4228f1538c4483670c281005c21030ddd","modified":1566701192034},{"_id":"themes/hexo-theme-material-x/layout/links.ejs","hash":"f2e13b3571d30647deca7fe760de670f65f48e9d","modified":1566701192034},{"_id":"themes/hexo-theme-material-x/layout/page.ejs","hash":"460679d01c1ede4a8cb951150bc15cb69a285638","modified":1566701192035},{"_id":"themes/hexo-theme-material-x/layout/tag.ejs","hash":"3a39810164a52646e8b7dfde5d1e2218d108d641","modified":1566701192036},{"_id":"themes/hexo-theme-material-x/layout/post.ejs","hash":"460679d01c1ede4a8cb951150bc15cb69a285638","modified":1566701192036},{"_id":"themes/hexo-theme-material-x/layout/list.ejs","hash":"b1cdf7bf3328c6864730b7f96745485d0c53c73f","modified":1566701192035},{"_id":"themes/hexo-theme-material-x/source/style.less","hash":"ad83c432a6093d8c66998fa211192076943372be","modified":1566701192064},{"_id":"themes/hexo-theme-material-x/layout/_cover/search.ejs","hash":"465d3f0583a74d58b3f6bca3abcc641795f511f4","modified":1601779044985},{"_id":"themes/hexo-theme-material-x/layout/_meta/author.ejs","hash":"91065b00d1750c4bf8c2a3d7088dc6e4ae552ad5","modified":1566701192009},{"_id":"themes/hexo-theme-material-x/layout/_meta/categories.ejs","hash":"f2ad0cda938967adc5b1e39df3a4aec957d2eb04","modified":1566701192010},{"_id":"themes/hexo-theme-material-x/layout/_meta/date.ejs","hash":"d6d4f289112635ea09666194346ef490996f3649","modified":1566701192011},{"_id":"themes/hexo-theme-material-x/layout/_meta/counter.ejs","hash":"ea502a888621527bc29f354309045d6c1dacdccb","modified":1566701192010},{"_id":"themes/hexo-theme-material-x/layout/_meta/music.ejs","hash":"a7e2b092a0f393642eb5c5802f24ec77ea205e74","modified":1566701192011},{"_id":"themes/hexo-theme-material-x/layout/_meta/share.ejs","hash":"aab1d38c29a430aaaa65646b4d675759cf38c411","modified":1566701192012},{"_id":"themes/hexo-theme-material-x/layout/_meta/thumbnail.ejs","hash":"8b64ad50296ba8cbf629fed9c2943ea32439114f","modified":1566701192013},{"_id":"themes/hexo-theme-material-x/layout/_meta/title.ejs","hash":"ac91fc41d59a7e93ab6f30a13ea5dd05c33e6131","modified":1566701192013},{"_id":"themes/hexo-theme-material-x/layout/_meta/tags.ejs","hash":"dbf843e6ccdfcd97bf574b7f551a163296b732ed","modified":1566701192012},{"_id":"themes/hexo-theme-material-x/layout/_meta/updated.ejs","hash":"ba49cba21102dd77b0e6dd68787dc153163fe8cf","modified":1566701192014},{"_id":"themes/hexo-theme-material-x/layout/_meta/top.ejs","hash":"2f323ca76d6bacd14e4799bcf3b6e0c2ffe2f8c5","modified":1566701192014},{"_id":"themes/hexo-theme-material-x/layout/_partial/archive.ejs","hash":"2ce63582ac3b9730aa7f62acee992df04c080d44","modified":1566701192015},{"_id":"themes/hexo-theme-material-x/layout/_partial/article.ejs","hash":"97b6abd08ca0754dce4ec140c64ecf45fb6dc065","modified":1566701192016},{"_id":"themes/hexo-theme-material-x/layout/_partial/categories.ejs","hash":"7c7b6cc39e1aa8d01cc2e94d1195bb7620bb68ea","modified":1566701192017},{"_id":"themes/hexo-theme-material-x/layout/_partial/footer.ejs","hash":"072eb0cb6504f167d5e88821d86713559361298f","modified":1602064574027},{"_id":"themes/hexo-theme-material-x/layout/_partial/cover.ejs","hash":"324bcfe643a8aceaf8044c3295643a0bbee4671b","modified":1566701192017},{"_id":"themes/hexo-theme-material-x/layout/_partial/head.ejs","hash":"0f0200815e4893620c92008fe2a1d8f87f7dbcb0","modified":1566701192018},{"_id":"themes/hexo-theme-material-x/layout/_partial/header.ejs","hash":"6b3c544d208803fe6f0b1f8ebda08fed7eba44d7","modified":1566701192019},{"_id":"themes/hexo-theme-material-x/layout/_partial/mathjax.ejs","hash":"25f3253d4bcfe32bc0d291901f00213b199dd635","modified":1566701192020},{"_id":"themes/hexo-theme-material-x/layout/_partial/meta.ejs","hash":"9779bd64cd6237e98c5de28fd6ca4d95d1caf239","modified":1566701192020},{"_id":"themes/hexo-theme-material-x/layout/_widget/author.ejs","hash":"25d814d6f689319fd54c8b4cb64acc80782e7320","modified":1566701192026},{"_id":"themes/hexo-theme-material-x/layout/_widget/category.ejs","hash":"7a6b395793ec15199b439ee64284d34e9305389c","modified":1566701192027},{"_id":"themes/hexo-theme-material-x/layout/_partial/post.ejs","hash":"95c718b34d13a0117ae005ea500e86d8a505376a","modified":1566701192021},{"_id":"themes/hexo-theme-material-x/layout/_partial/scripts.ejs","hash":"022b03bd9d71dbe7aef649d5ccc6b624b4de01dc","modified":1566701192022},{"_id":"themes/hexo-theme-material-x/layout/_partial/side.ejs","hash":"a7cdcb1f67cda9983f6ab6f8d39e407228b1620d","modified":1566701192022},{"_id":"themes/hexo-theme-material-x/layout/_widget/grid.ejs","hash":"a025672a7095c758f546d336c8d62f7c3e6e92a0","modified":1566701192027},{"_id":"themes/hexo-theme-material-x/layout/_widget/header.ejs","hash":"5f900f079934857adc6b4fece5603bd8c3dc9369","modified":1566701192028},{"_id":"themes/hexo-theme-material-x/layout/_widget/list.ejs","hash":"c137ee3ef1c5233d724dc84ab7543e88391656f5","modified":1566701192028},{"_id":"themes/hexo-theme-material-x/layout/_widget/music.ejs","hash":"1e252f962126d233adff8645d47f372bda7f8439","modified":1566701192029},{"_id":"themes/hexo-theme-material-x/layout/_widget/plain.ejs","hash":"1c42b04269ef76956ddd954ed50151062485fca4","modified":1601308897742},{"_id":"themes/hexo-theme-material-x/layout/_third-party/aplayer.ejs","hash":"5f555babdf7ea58e536c203f1351536598e68e7f","modified":1566701192023},{"_id":"themes/hexo-theme-material-x/layout/_widget/related_posts.ejs","hash":"ba7a6c17ed2518fda0af30ae7f5c32836909505a","modified":1566701192030},{"_id":"themes/hexo-theme-material-x/layout/_widget/tagcloud.ejs","hash":"71c35757c14e384b32561e0f81d212ad374f2a06","modified":1566701192031},{"_id":"themes/hexo-theme-material-x/layout/_widget/toc.ejs","hash":"79c7329cc161b9409d5cac6ccd1158827db7ca68","modified":1566701192031},{"_id":"themes/hexo-theme-material-x/layout/_third-party/clipboard.ejs","hash":"b160a4f594421409ad2fcd81b79746664e85cfe9","modified":1566701192024},{"_id":"themes/hexo-theme-material-x/layout/_third-party/comments.ejs","hash":"1c6afb5fb685066301c2be1d27b1b32a805efb37","modified":1566701192024},{"_id":"themes/hexo-theme-material-x/layout/_third-party/share.ejs","hash":"b553039a4fb38c9dfbe87fe61034a81f685bd590","modified":1566701192025},{"_id":"themes/hexo-theme-material-x/layout/_third-party/fancybox.ejs","hash":"b60b8006bbcf31223c6cc28d9794f101c492a1c0","modified":1566701192025},{"_id":"themes/hexo-theme-material-x/source/js/app.js","hash":"9effa2ff626244de1418c6ecbe3fdf39cde5f3f8","modified":1566701192047},{"_id":"themes/hexo-theme-material-x/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1566701192038},{"_id":"themes/hexo-theme-material-x/source/js/search.js","hash":"8ed18241a931a2e9903105383fcb2c281c3a7640","modified":1566701192048},{"_id":"themes/hexo-theme-material-x/source/less/_base.less","hash":"49e0e524ad192f8c40e8b99bf16fbb487d925954","modified":1566701192053},{"_id":"themes/hexo-theme-material-x/source/less/_archive.less","hash":"d46a24a227c7506e848a0637de34a0ad45af4493","modified":1566701192051},{"_id":"themes/hexo-theme-material-x/source/less/_article.less","hash":"e934577e73da0ab228e049408a9908ea347c1a1f","modified":1566701192052},{"_id":"themes/hexo-theme-material-x/source/less/_color.less","hash":"c799d70aeb10e759e918377bcce856d1d5929b71","modified":1566701192054},{"_id":"themes/hexo-theme-material-x/source/less/_defines.less","hash":"0233cb515429823a4d8fad339d44d71b14295550","modified":1566701192054},{"_id":"themes/hexo-theme-material-x/source/less/_fonts.less","hash":"cd172af2904b6e2d0d8a92a92811d060d7e292d2","modified":1566701192055},{"_id":"themes/hexo-theme-material-x/source/less/_header.less","hash":"da6a5ba4ed9dc53fa971ff118db962e1fe0b004b","modified":1566701192056},{"_id":"themes/hexo-theme-material-x/source/less/_footer.less","hash":"cab4b448dd6e03979a40205b0f99ff6656c2b32d","modified":1566701192056},{"_id":"themes/hexo-theme-material-x/source/less/_layout.less","hash":"081ef4c14d7069ea8bb2fb9f939176c21781ac54","modified":1566701192057},{"_id":"themes/hexo-theme-material-x/source/less/_main.less","hash":"9f2b99d48eadefb45af0746619758eedcddbf19f","modified":1566701192058},{"_id":"themes/hexo-theme-material-x/source/less/_links.less","hash":"006a47bf55b0db09fff1b71effe719ec394eec51","modified":1566701192058},{"_id":"themes/hexo-theme-material-x/source/less/_normalize.less","hash":"9c4040f1c8668fdcf2c7798c1f51b3f658ddbadf","modified":1566701192059},{"_id":"themes/hexo-theme-material-x/source/less/_pagination.less","hash":"616db8447e79e902bf7b207d1fe3c2fd6a4785b9","modified":1566701192060},{"_id":"themes/hexo-theme-material-x/source/less/_search.less","hash":"8abe118f822150ff5ebc1a905621c95f11598530","modified":1566701192061},{"_id":"themes/hexo-theme-material-x/source/less/_toc.less","hash":"74270e16434e66105cd7ac2b2822d83bd19930ec","modified":1566701192062},{"_id":"themes/hexo-theme-material-x/source/less/_tog.less","hash":"142a6697abe2f423aae365e7c799a4a78b519a28","modified":1566701192063},{"_id":"themes/hexo-theme-material-x/source/less/_side.less","hash":"5a23fa0d9d939dd1a20ce982a4d28e495fb8168c","modified":1566701192061},{"_id":"themes/hexo-theme-material-x/source/less/_typo.less","hash":"f597c0213ff6d10d86f1bd8d71018a2a604dde71","modified":1566701192064},{"_id":"themes/hexo-theme-material-x/source/js/volantis.js","hash":"c44af8d9c08476f22762875ccc8cfdc51655ba1e","modified":1566701192050},{"_id":"themes/hexo-theme-material-x/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1566701192041},{"_id":"themes/hexo-theme-material-x/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1566701192046},{"_id":"public/baidusitemap.xml","hash":"99fc5feb70d1571b0367e0735a974d149842038e","modified":1602322651394},{"_id":"public/atom.xml","hash":"6a467e89a58bb478b7353c029a62e5865bbb54d2","modified":1602322651394},{"_id":"public/search.xml","hash":"8d4adf8aec8c01d0153198a0a01de605de036b49","modified":1602322651640},{"_id":"public/sitemap.xml","hash":"68398ab99a4aac79d8c59b8be926a15eff0dcf59","modified":1602322651640},{"_id":"public/content.json","hash":"0ba5f55258287ad21b4c19b7df544b6bbc32a0fa","modified":1602322651645},{"_id":"public/categories/index.html","hash":"30b419896d7815b1c7ec4eed76c748bf969420b2","modified":1602322651854},{"_id":"public/docker/index.html","hash":"09162bf47cd12c3e7ad1f8d60e7f0abd5a8c6704","modified":1602322651854},{"_id":"public/tags/index.html","hash":"8076a13ed884b2e9777a35250fb2cd563fc6791c","modified":1602322651949},{"_id":"public/how-to-set-sub-domain-and-naked-domain-to-Github-Pages-simultaneously.html","hash":"6d4b49d3724ec2e64051bb2c1259fa2a55a02649","modified":1602322651949},{"_id":"public/deploy-harbor-repository-in-centos.html","hash":"eadd1e2fe6de121741fa9998ecc7ee3b36a7648f","modified":1602322651951},{"_id":"public/how-to-modify-mysql-password-in-windows.html","hash":"9b30dc08f43a65b6b63f6627f7f2f41ac7c52207","modified":1602322651952},{"_id":"public/create-ebook-with-github-and-gitbook.html","hash":"05e547db4c9724f48bb15e46477951c6a455fa1d","modified":1602322651952},{"_id":"public/parse-the-kindle-markup-files-by-using-python.html","hash":"20154a32ef57d56fb5bbbdb53f773e1068d7410e","modified":1602322651952},{"_id":"public/4-tips-of-hexo.html","hash":"55ac537b383a9b30f7fbe4e64b50677b816f0865","modified":1602322651952},{"_id":"public/archives/index.html","hash":"738f90ad92a209f26ec66e2b4a0b7b2acd3faae8","modified":1602322651952},{"_id":"public/archives/2016/index.html","hash":"9bfcc35fd4fbc6314f96a3d390626465bdf697f8","modified":1602322651952},{"_id":"public/create-github-pages-with-hexo.html","hash":"f53165189cf05d6f82595c4ac327efe83350fc45","modified":1602322651952},{"_id":"public/archives/2016/07/index.html","hash":"ff9ce04cc9a09c6c12780473f5c678afb21c3b49","modified":1602322651953},{"_id":"public/archives/2017/index.html","hash":"3e9d364267401d49d1a6fe9d116f5de10e401d07","modified":1602322651953},{"_id":"public/archives/2017/03/index.html","hash":"de2bbb005d8f83bc70e43fc316aa84e8deb95111","modified":1602322651953},{"_id":"public/archives/2018/index.html","hash":"26325f06df06e21beb6a03949b31d873521d8a04","modified":1602322651953},{"_id":"public/archives/2018/07/index.html","hash":"61b5b2670943bf2aebfb984980c7e5413ad3adf0","modified":1602322651953},{"_id":"public/archives/2018/08/index.html","hash":"80fa7ed640f94e5fdf8006cf49237b452af2b446","modified":1602322651953},{"_id":"public/archives/2019/index.html","hash":"6ff1256c40cfbddea312549c9dd6daa7364bfcb2","modified":1602322651953},{"_id":"public/archives/2019/08/index.html","hash":"e2c3ca1eb7d46619cb0bc8a06b9fbfbbd23a9c44","modified":1602322651953},{"_id":"public/archives/2020/10/index.html","hash":"bb2b13498c8f40dbfe43a4cfe22fcc829371799f","modified":1602322651953},{"_id":"public/archives/2020/index.html","hash":"207c5bdf529ba12d54c8ee90ed7cdd988b1bd326","modified":1602322651954},{"_id":"public/categories/hexo/index.html","hash":"1049c3fa5d6da9021f102d3a5bd06bfbfc6f0a4f","modified":1602322651954},{"_id":"public/categories/docker/index.html","hash":"c1f2ea1ef6e7fb20949920db8bd23764f4b24677","modified":1602322651954},{"_id":"public/categories/sql/index.html","hash":"1d7ee6af4a77203ba23d500d930c8570e20be385","modified":1602322651954},{"_id":"public/categories/python/index.html","hash":"c21d5f98c0479de2e3d966e3114d2e68dfc6a727","modified":1602322651954},{"_id":"public/categories/sql/mysql/index.html","hash":"2eafc4a60ede4183c17c977c4f3daa3fbbae3f30","modified":1602322651954},{"_id":"public/page/2/index.html","hash":"f1a1e98e42a2f29228a8c611b4dd1842f946bbb1","modified":1602322651954},{"_id":"public/tags/Hexo/index.html","hash":"245f9308c6ef3f03449cbea1056767b666be45b6","modified":1602322651959},{"_id":"public/index.html","hash":"e67e7796e0e86bfbebd8faf5a9a239e500e6ab55","modified":1602322651959},{"_id":"public/tags/折腾/index.html","hash":"03b7391d1a2e0eafe4bda66cc36c99a2932bd8a4","modified":1602322651959},{"_id":"public/tags/Gitbook/index.html","hash":"914e515df8b75c863c5285f3a0ef5877634cef8a","modified":1602322651959},{"_id":"public/tags/Github/index.html","hash":"36bf6730c0e76fb0a48c58f3027a3c3cd7d81d92","modified":1602322651960},{"_id":"public/tags/Git/index.html","hash":"c9d5834eaae0b07f85db4385e5073bddf24daf49","modified":1602322651960},{"_id":"public/tags/Docker/index.html","hash":"580bddd18a50cbad6c0e52b168cd9a9d4be01c71","modified":1602322651960},{"_id":"public/tags/Harbor/index.html","hash":"096171c5a9b370836a0c1ae41ebdae3ef1a1d821","modified":1602322651960},{"_id":"public/tags/Mysql/index.html","hash":"ad1b0c71aa3ecea4b8229b8e5416dd21e9fbda95","modified":1602322651960},{"_id":"public/tags/Python/index.html","hash":"18b8c3048073ae268c9dfbf34c3d2bec3dc00e34","modified":1602322651960},{"_id":"public/tags/Kindle/index.html","hash":"15b35a1538d79f8b00248002f367bb3fd871b7a9","modified":1602322651960},{"_id":"public/tags/DNS/index.html","hash":"c959079609c13520e62ddc039cc81dd9706f7f61","modified":1602322651960},{"_id":"public/CNAME","hash":"b7409cca19cec923c22ffda64e9f04784ba9d420","modified":1602322651960},{"_id":"public/rebots.txt","hash":"996f9babc2d7da4cacd8b8479207d7ad151432c0","modified":1602322651961},{"_id":"public/README.md","hash":"dcbc8d9b4d3a785b39ab3a2f1303e138e5755d38","modified":1602322651961},{"_id":"public/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1602322651961},{"_id":"public/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1602322651988},{"_id":"public/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1602322651988},{"_id":"public/js/volantis.js","hash":"0180239de7f23c786725ccdc0d107c81b6da1055","modified":1602322651988},{"_id":"public/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1602322651998},{"_id":"public/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1602322652323},{"_id":"public/style.css","hash":"0c18ee03fdd12436af539266a6d5aa134ec46ed1","modified":1602322652331}],"Category":[{"name":"hexo","_id":"ckg3hj9if0004zcibbho00tm8"},{"name":"docker","_id":"ckg3hj9iu000ezcibt5k9giwk"},{"name":"sql","_id":"ckg3hj9ix000kzcib765g714b"},{"name":"python","_id":"ckg3hj9iy000ozcibymaubgd1"},{"name":"mysql","parent":"ckg3hj9ix000kzcib765g714b","_id":"ckg3hj9iz000rzcibav30tu9p"}],"Data":[],"Page":[{"title":"categories","layout":"categories","date":"2019-04-07T03:25:40.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\nlayout: categories\ndate: 2019-04-07 11:25:40\n---\n","updated":"2019-08-24T10:57:49.509Z","path":"categories/index.html","comments":1,"_id":"ckg3hj9i50001zciblnkhs2ts","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"docker","layout":"page","date":"2019-04-07T03:29:34.000Z","_content":"","source":"docker/index.md","raw":"---\ntitle: docker\nlayout: page\ndate: 2019-04-07 11:29:34\n---\n","updated":"2019-08-24T10:57:49.509Z","path":"docker/index.html","comments":1,"_id":"ckg3hj9ic0003zcibemql2mz5","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","layout":"tags","date":"2019-04-07T03:13:57.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\nlayout: tags\ndate: 2019-04-07 11:13:57\n---\n","updated":"2019-08-24T10:57:49.510Z","path":"tags/index.html","comments":1,"_id":"ckg3hj9ij0007zcib1kyogvq0","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Hexo的一些小技巧","date":"2016-07-18T23:24:36.000Z","description":"在不断折腾自己开发Django、Flask、部署wordpress后，最终还是回到了Hexo，因为Hexo配合Github可以无需购买任何云服务器就可以方便部署个人静态站点，且可以通过git版本分布式管理的方式同步管理，使得成本与便携性兼具。","_content":"\n在不断折腾自己开发Django、Flask、部署wordpress后，最终还是回到了Hexo，因为Hexo配合Github可以无需购买任何云服务器就可以方便部署个人静态站点，且可以通过git版本分布式管理的方式同步管理，使得成本与便携性兼具。\n\n本文记录Hexo使用过程中的一些小技巧，包括自定义html文件，为文章添加微信公众号，创建页面/菜单，编辑主题，修改字体等，后续不定期更新。\n\n# 1. Hexo自定义html文件\n\n> 注： Hexo生成的md文件最终都会转换为html文件，不过已经由Hexo渲染过。\n\n有时候我们想自定义html页面，不经过Hexo渲染。可以先使用新建页面命令`hexo new page \"about\"`，这时会在source目录下生成about/about.md文件。可以将其修改为html文件，同时在文件头加上`layout: false`即可。\n\n```bash\n$ mv source/about/index.md source/about/index.html\n```\n\n编辑index.html文件时在头部加上`layout: false`后使用，编辑自己的html代码即可，eg:\n\n\n```html\n---\n\ntitle: about\n\ndate: 2016-08-07 06:35:00\n\nlayout: false\n\n---\n\n<html lang=\"en\">\n\n<head>\n\n  <title>Marco FreeCodeCamp_Ex1</title>\n\n  <meta charset=\"utf-8\">\n\n  <link rel=\"stylesheet\" href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n\n<head>\n\n\n<body>\n\n</body>\n\n</html>\n```\n\n# 2. 为每篇文章添加微信或者公众号\n\n修改next主题下的config.yml文件，将注释部分去掉\n\n```yaml\n# Wechat Subscriber\n\nwechat_subscriber:\n\n  enabled: true\n\n  qcode: /images/wechat.jpg\n\n  description: welcome to scan my public wechat account\n\n```\n\n> 其中，需要将你微信或者公众号二维码加上传到source/images下。\n\n# 3. 创建新的菜单\n\n## 3.1  创建新页面\n\n输入命令：\n\n```bash\nhexo new page \"project\"\n```\n\n\n此时会自动在source/about目录下生成新的目录project，且此目录下会生成index.md文件\n\n添加type类型为project如：\n\n```yaml\n---\n\ntitle: project\n\ndate: 2016-08-07 10:11:05\n\ntype: \"project\"\n\n---\n\n```\n\n## 3.2 编辑主题Menu\n\n> 编辑主题目录下的_config.yml文件的menu选项，添加project并设置其icon\n\n```yaml\nmenu:\n\n  home: /\n\n  categories: /categories\n\n  about: /about\n\n  archives: /archives\n\n  project: /project\n\n\nmenu_icons:\n\n  enable: true\n\n  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome\n\n  home: home\n\n  about: user\n\n  categories: th\n\n  tags: tags\n\n  archives: archive\n\n  project: heartbeat\n\n```\n\n## 3.3 修改字体\n> 修改themes/next/language/zh-Hans.yml 中的menu选项，添加project\n\n```yaml\nmenu:\n\n  home: 首页\n\n  archives: 归档\n\n  categories: 分类\n\n  tags: 标签\n\n  about: 关于\n\n  search: 搜索\n\n  commonweal: 公益404\n\n  project:  项目\n\n```\n\n## 3.4 编辑页面\n\n> 新建一篇文章,编辑项目文档\n\n```bash\n$ hexo new \"project1\"\n```\n\n这时会生成source/project/index.md文件，将其修改为source/project/index.html文件，后编写html文件即可\n\n# 4. SEO Hexo站点\n\n## 4.1 优化url\n\nhexo默认url是年/月/日，这样其实不利于SEO。hexo生成新文章命令，hexo new [layout] <title>，这个title最好是英文的，因为我们要把这个title放在url里，如何修改这个title呢？那就是去source文件夹里直接修改.md文件名即可。但我们想让我们文章的标题显示中文的，这样如何修改呢？那就是在每篇文章的.md上方直接修改title为中文即可。\n\n  - 创建文章时使用命令指定文章名\n    `hexo new \"How to make a beautiful URL in Hexo site\"`  \n\n  - 修改文件的title\n\n   打开在source目录下的\"How-to-make-a-beautiful-URL-in-Hexo-site.md\"文件，修改title为自己想要取的中文名。\n\n  - 修改hexo的配置文件`_config.yml`\n\n   在根目录的配置文件中指定url的格式：\n\n   ```bash\n   # URL\n   ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n   url: http://meixuhong.cn\n   root: /\n   permalink: :year/:title/\n   permalink_defaults:\n   ```\n\n   其中`root`指定了网站的根目录为`/`，`permalink`指定了文章的url为`:year/:title/`，此处之所以加了`year`是因为想在网站代码中格式更统一，后续有更好的选择的时候可以删除`year`关键字。\n\n","source":"_posts/4-tips-of-hexo.md","raw":"---\ntitle: Hexo的一些小技巧\ndate: 2016-07-19 07:24:36\ncategories: \n  - hexo\ntags: \n    - Hexo\n    - 折腾  \ndescription: 在不断折腾自己开发Django、Flask、部署wordpress后，最终还是回到了Hexo，因为Hexo配合Github可以无需购买任何云服务器就可以方便部署个人静态站点，且可以通过git版本分布式管理的方式同步管理，使得成本与便携性兼具。\n\n---\n\n在不断折腾自己开发Django、Flask、部署wordpress后，最终还是回到了Hexo，因为Hexo配合Github可以无需购买任何云服务器就可以方便部署个人静态站点，且可以通过git版本分布式管理的方式同步管理，使得成本与便携性兼具。\n\n本文记录Hexo使用过程中的一些小技巧，包括自定义html文件，为文章添加微信公众号，创建页面/菜单，编辑主题，修改字体等，后续不定期更新。\n\n# 1. Hexo自定义html文件\n\n> 注： Hexo生成的md文件最终都会转换为html文件，不过已经由Hexo渲染过。\n\n有时候我们想自定义html页面，不经过Hexo渲染。可以先使用新建页面命令`hexo new page \"about\"`，这时会在source目录下生成about/about.md文件。可以将其修改为html文件，同时在文件头加上`layout: false`即可。\n\n```bash\n$ mv source/about/index.md source/about/index.html\n```\n\n编辑index.html文件时在头部加上`layout: false`后使用，编辑自己的html代码即可，eg:\n\n\n```html\n---\n\ntitle: about\n\ndate: 2016-08-07 06:35:00\n\nlayout: false\n\n---\n\n<html lang=\"en\">\n\n<head>\n\n  <title>Marco FreeCodeCamp_Ex1</title>\n\n  <meta charset=\"utf-8\">\n\n  <link rel=\"stylesheet\" href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n\n<head>\n\n\n<body>\n\n</body>\n\n</html>\n```\n\n# 2. 为每篇文章添加微信或者公众号\n\n修改next主题下的config.yml文件，将注释部分去掉\n\n```yaml\n# Wechat Subscriber\n\nwechat_subscriber:\n\n  enabled: true\n\n  qcode: /images/wechat.jpg\n\n  description: welcome to scan my public wechat account\n\n```\n\n> 其中，需要将你微信或者公众号二维码加上传到source/images下。\n\n# 3. 创建新的菜单\n\n## 3.1  创建新页面\n\n输入命令：\n\n```bash\nhexo new page \"project\"\n```\n\n\n此时会自动在source/about目录下生成新的目录project，且此目录下会生成index.md文件\n\n添加type类型为project如：\n\n```yaml\n---\n\ntitle: project\n\ndate: 2016-08-07 10:11:05\n\ntype: \"project\"\n\n---\n\n```\n\n## 3.2 编辑主题Menu\n\n> 编辑主题目录下的_config.yml文件的menu选项，添加project并设置其icon\n\n```yaml\nmenu:\n\n  home: /\n\n  categories: /categories\n\n  about: /about\n\n  archives: /archives\n\n  project: /project\n\n\nmenu_icons:\n\n  enable: true\n\n  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome\n\n  home: home\n\n  about: user\n\n  categories: th\n\n  tags: tags\n\n  archives: archive\n\n  project: heartbeat\n\n```\n\n## 3.3 修改字体\n> 修改themes/next/language/zh-Hans.yml 中的menu选项，添加project\n\n```yaml\nmenu:\n\n  home: 首页\n\n  archives: 归档\n\n  categories: 分类\n\n  tags: 标签\n\n  about: 关于\n\n  search: 搜索\n\n  commonweal: 公益404\n\n  project:  项目\n\n```\n\n## 3.4 编辑页面\n\n> 新建一篇文章,编辑项目文档\n\n```bash\n$ hexo new \"project1\"\n```\n\n这时会生成source/project/index.md文件，将其修改为source/project/index.html文件，后编写html文件即可\n\n# 4. SEO Hexo站点\n\n## 4.1 优化url\n\nhexo默认url是年/月/日，这样其实不利于SEO。hexo生成新文章命令，hexo new [layout] <title>，这个title最好是英文的，因为我们要把这个title放在url里，如何修改这个title呢？那就是去source文件夹里直接修改.md文件名即可。但我们想让我们文章的标题显示中文的，这样如何修改呢？那就是在每篇文章的.md上方直接修改title为中文即可。\n\n  - 创建文章时使用命令指定文章名\n    `hexo new \"How to make a beautiful URL in Hexo site\"`  \n\n  - 修改文件的title\n\n   打开在source目录下的\"How-to-make-a-beautiful-URL-in-Hexo-site.md\"文件，修改title为自己想要取的中文名。\n\n  - 修改hexo的配置文件`_config.yml`\n\n   在根目录的配置文件中指定url的格式：\n\n   ```bash\n   # URL\n   ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n   url: http://meixuhong.cn\n   root: /\n   permalink: :year/:title/\n   permalink_defaults:\n   ```\n\n   其中`root`指定了网站的根目录为`/`，`permalink`指定了文章的url为`:year/:title/`，此处之所以加了`year`是因为想在网站代码中格式更统一，后续有更好的选择的时候可以删除`year`关键字。\n\n","slug":"4-tips-of-hexo","published":1,"updated":"2020-10-08T08:19:04.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg3hj9i00000zcibox3v8y90","content":"<p>在不断折腾自己开发Django、Flask、部署wordpress后，最终还是回到了Hexo，因为Hexo配合Github可以无需购买任何云服务器就可以方便部署个人静态站点，且可以通过git版本分布式管理的方式同步管理，使得成本与便携性兼具。</p>\n<p>本文记录Hexo使用过程中的一些小技巧，包括自定义html文件，为文章添加微信公众号，创建页面/菜单，编辑主题，修改字体等，后续不定期更新。</p>\n<h1>1. Hexo自定义html文件</h1>\n<blockquote>\n<p>注： Hexo生成的md文件最终都会转换为html文件，不过已经由Hexo渲染过。</p>\n</blockquote>\n<p>有时候我们想自定义html页面，不经过Hexo渲染。可以先使用新建页面命令<code>hexo new page &quot;about&quot;</code>，这时会在source目录下生成about/about.md文件。可以将其修改为html文件，同时在文件头加上<code>layout: false</code>即可。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv <span class=\"built_in\">source</span>/about/index.md <span class=\"built_in\">source</span>/about/index.html</span><br></pre></td></tr></table></figure></p>\n<p>编辑index.html文件时在头部加上<code>layout: false</code>后使用，编辑自己的html代码即可，eg:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">title: about</span><br><span class=\"line\"></span><br><span class=\"line\">date: 2016-08-07 06:35:00</span><br><span class=\"line\"></span><br><span class=\"line\">layout: false</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Marco FreeCodeCamp_Ex1<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1>2. 为每篇文章添加微信或者公众号</h1>\n<p>修改next主题下的config.yml文件，将注释部分去掉</p>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wechat Subscriber</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">wechat_subscriber:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">qcode:</span> <span class=\"string\">/images/wechat.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">description:</span> <span class=\"string\">welcome</span> <span class=\"string\">to</span> <span class=\"string\">scan</span> <span class=\"string\">my</span> <span class=\"string\">public</span> <span class=\"string\">wechat</span> <span class=\"string\">account</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>其中，需要将你微信或者公众号二维码加上传到source/images下。</p>\n</blockquote>\n<h1>3. 创建新的菜单</h1>\n<h2>3.1  创建新页面</h2>\n<p>输入命令：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">\"project\"</span></span><br></pre></td></tr></table></figure></p>\n<p>此时会自动在source/about目录下生成新的目录project，且此目录下会生成index.md文件</p>\n<p>添加type类型为project如：</p>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">project</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-07</span> <span class=\"number\">10</span><span class=\"string\">:11:05</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">\"project\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure></p>\n<h2>3.2 编辑主题Menu</h2>\n<blockquote>\n<p>编辑主题目录下的_config.yml文件的menu选项，添加project并设置其icon</p>\n</blockquote>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">project:</span> <span class=\"string\">/project</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">menu_icons:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">home</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">user</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">th</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">archive</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">project:</span> <span class=\"string\">heartbeat</span></span><br></pre></td></tr></table></figure></p>\n<h2>3.3 修改字体</h2>\n<blockquote>\n<p>修改themes/next/language/zh-Hans.yml 中的menu选项，添加project</p>\n</blockquote>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">首页</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">归档</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">分类</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">标签</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">关于</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">search:</span> <span class=\"string\">搜索</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">commonweal:</span> <span class=\"string\">公益404</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">project:</span>  <span class=\"string\">项目</span></span><br></pre></td></tr></table></figure></p>\n<h2>3.4 编辑页面</h2>\n<blockquote>\n<p>新建一篇文章,编辑项目文档</p>\n</blockquote>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"project1\"</span></span><br></pre></td></tr></table></figure></p>\n<p>这时会生成source/project/index.md文件，将其修改为source/project/index.html文件，后编写html文件即可</p>\n<h1>4. SEO Hexo站点</h1>\n<h2>4.1 优化url</h2>\n<p>hexo默认url是年/月/日，这样其实不利于SEO。hexo生成新文章命令，hexo new [layout] &lt;title&gt;，这个title最好是英文的，因为我们要把这个title放在url里，如何修改这个title呢？那就是去source文件夹里直接修改.md文件名即可。但我们想让我们文章的标题显示中文的，这样如何修改呢？那就是在每篇文章的.md上方直接修改title为中文即可。</p>\n<ul>\n<li>\n<p>创建文章时使用命令指定文章名\n<code>hexo new &quot;How to make a beautiful URL in Hexo site&quot;</code></p>\n</li>\n<li>\n<p>修改文件的title</p>\n</li>\n</ul>\n<p>打开在source目录下的&quot;How-to-make-a-beautiful-URL-in-Hexo-site.md&quot;文件，修改title为自己想要取的中文名。</p>\n<ul>\n<li>修改hexo的配置文件<code>_config.yml</code></li>\n</ul>\n<p>在根目录的配置文件中指定url的格式：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\">url: http://meixuhong.cn</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>root</code>指定了网站的根目录为<code>/</code>，<code>permalink</code>指定了文章的url为<code>:year/:title/</code>，此处之所以加了<code>year</code>是因为想在网站代码中格式更统一，后续有更好的选择的时候可以删除<code>year</code>关键字。</p>\n","site":{"data":{}},"length":2534,"excerpt":"","more":"<p>在不断折腾自己开发Django、Flask、部署wordpress后，最终还是回到了Hexo，因为Hexo配合Github可以无需购买任何云服务器就可以方便部署个人静态站点，且可以通过git版本分布式管理的方式同步管理，使得成本与便携性兼具。</p>\n<p>本文记录Hexo使用过程中的一些小技巧，包括自定义html文件，为文章添加微信公众号，创建页面/菜单，编辑主题，修改字体等，后续不定期更新。</p>\n<h1>1. Hexo自定义html文件</h1>\n<blockquote>\n<p>注： Hexo生成的md文件最终都会转换为html文件，不过已经由Hexo渲染过。</p>\n</blockquote>\n<p>有时候我们想自定义html页面，不经过Hexo渲染。可以先使用新建页面命令<code>hexo new page &quot;about&quot;</code>，这时会在source目录下生成about/about.md文件。可以将其修改为html文件，同时在文件头加上<code>layout: false</code>即可。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv <span class=\"built_in\">source</span>/about/index.md <span class=\"built_in\">source</span>/about/index.html</span><br></pre></td></tr></table></figure></p>\n<p>编辑index.html文件时在头部加上<code>layout: false</code>后使用，编辑自己的html代码即可，eg:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">title: about</span><br><span class=\"line\"></span><br><span class=\"line\">date: 2016-08-07 06:35:00</span><br><span class=\"line\"></span><br><span class=\"line\">layout: false</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Marco FreeCodeCamp_Ex1<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1>2. 为每篇文章添加微信或者公众号</h1>\n<p>修改next主题下的config.yml文件，将注释部分去掉</p>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wechat Subscriber</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">wechat_subscriber:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">qcode:</span> <span class=\"string\">/images/wechat.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">description:</span> <span class=\"string\">welcome</span> <span class=\"string\">to</span> <span class=\"string\">scan</span> <span class=\"string\">my</span> <span class=\"string\">public</span> <span class=\"string\">wechat</span> <span class=\"string\">account</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>其中，需要将你微信或者公众号二维码加上传到source/images下。</p>\n</blockquote>\n<h1>3. 创建新的菜单</h1>\n<h2>3.1  创建新页面</h2>\n<p>输入命令：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">\"project\"</span></span><br></pre></td></tr></table></figure></p>\n<p>此时会自动在source/about目录下生成新的目录project，且此目录下会生成index.md文件</p>\n<p>添加type类型为project如：</p>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">project</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2016</span><span class=\"number\">-08</span><span class=\"number\">-07</span> <span class=\"number\">10</span><span class=\"string\">:11:05</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">\"project\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure></p>\n<h2>3.2 编辑主题Menu</h2>\n<blockquote>\n<p>编辑主题目录下的_config.yml文件的menu选项，添加project并设置其icon</p>\n</blockquote>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">project:</span> <span class=\"string\">/project</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">menu_icons:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">home</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">user</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">th</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">archive</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">project:</span> <span class=\"string\">heartbeat</span></span><br></pre></td></tr></table></figure></p>\n<h2>3.3 修改字体</h2>\n<blockquote>\n<p>修改themes/next/language/zh-Hans.yml 中的menu选项，添加project</p>\n</blockquote>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">首页</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">归档</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">分类</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">标签</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">关于</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">search:</span> <span class=\"string\">搜索</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">commonweal:</span> <span class=\"string\">公益404</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">project:</span>  <span class=\"string\">项目</span></span><br></pre></td></tr></table></figure></p>\n<h2>3.4 编辑页面</h2>\n<blockquote>\n<p>新建一篇文章,编辑项目文档</p>\n</blockquote>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"project1\"</span></span><br></pre></td></tr></table></figure></p>\n<p>这时会生成source/project/index.md文件，将其修改为source/project/index.html文件，后编写html文件即可</p>\n<h1>4. SEO Hexo站点</h1>\n<h2>4.1 优化url</h2>\n<p>hexo默认url是年/月/日，这样其实不利于SEO。hexo生成新文章命令，hexo new [layout] &lt;title&gt;，这个title最好是英文的，因为我们要把这个title放在url里，如何修改这个title呢？那就是去source文件夹里直接修改.md文件名即可。但我们想让我们文章的标题显示中文的，这样如何修改呢？那就是在每篇文章的.md上方直接修改title为中文即可。</p>\n<ul>\n<li>\n<p>创建文章时使用命令指定文章名\n<code>hexo new &quot;How to make a beautiful URL in Hexo site&quot;</code></p>\n</li>\n<li>\n<p>修改文件的title</p>\n</li>\n</ul>\n<p>打开在source目录下的&quot;How-to-make-a-beautiful-URL-in-Hexo-site.md&quot;文件，修改title为自己想要取的中文名。</p>\n<ul>\n<li>修改hexo的配置文件<code>_config.yml</code></li>\n</ul>\n<p>在根目录的配置文件中指定url的格式：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\">url: http://meixuhong.cn</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>root</code>指定了网站的根目录为<code>/</code>，<code>permalink</code>指定了文章的url为<code>:year/:title/</code>，此处之所以加了<code>year</code>是因为想在网站代码中格式更统一，后续有更好的选择的时候可以删除<code>year</code>关键字。</p>\n"},{"title":"使用GitHub与Gitbook制作自己的书籍","date":"2018-08-13T03:05:44.000Z","description":"最近在学习网络爬虫知识，经常需要做笔记，有几个选择。Hexo博客记录：还是不太喜欢这种定制化过高的博客，等有时间了再来自己折腾一个出来，Pass。 有道笔记：还算是好用，但是每次记录或者查询的时候都要登录显得不是那么方便，Pass。 GitHub：可以在任意地方查阅与修改，是很方便，但是网页形势浏览不是很方便，Pass。 Gitbook：可以在任意地方查阅与修改，web界面式浏览，很方便，就是它了。","cover":true,"_content":"\n最近在学习网络爬虫知识，经常需要做笔记，有几个选择。\n\n- Hexo博客记录：还是不太喜欢这种定制化过高的博客，等有时间了再来自己折腾一个出来，Pass。\n- 有道笔记：还算是好用，但是每次记录或者查询的时候都要登录显得不是那么方便，Pass。\n- GitHub：可以在任意地方查阅与修改，是很方便，但是网页形势浏览不是很方便，Pass。\n- Gitbook：可以在任意地方查阅与修改，web界面式浏览，很方便，就是它了。\n\n如果将Gitbook与GitHub结合起来，即是将`Book(笔记)`与GitHub中的`Repository`绑定起来，这样便可以在任意地方通过`Git`拉取仓库，修改内容，提交内容，GitBook会自动从GitHub中同步`Book(笔记)`。\n\n# 1.gitbook生成本地书籍\n\n## 1.1 安装gitbook\n\ngitbook依赖`nodejs`，安装完成之后安装`gitbook`.\n\n```shell\n$ node --version\n$ npm -v\n$ npm install gitbook-cli -g\n```\n\n## 1.2 初始化book\n\n```shell\n$ gitbook init #会在当前目录生成两个文件， README.md和SUMMARY.md\n$ gitbook serve #编译和预览书籍，实际上会首先调用 gitbook build 编译书籍,然后打开web服务器\n```\n\n`gitbook init`会在当前目录生成两个文件。\n\n- README.md: 简介文档。\n- SUMMARY.md: 定义了book的**目录结构，非常重要**。\n\n`gitbook serve`命令会调用`gitbook build`在本地生成一个`_book`目录，这个目录就是一个静态站点，打开里面的**index.html**就可以访问本地book了。\n\n## 1.3 在个人站点调用Book \n\n如果有个人站点，需要连接一个gitbook书籍，非常简单，只需要把上面通过`gitbook build`生成的`_book`目录放入相应位置即可，以Hexo为例。\n\n我们知道发布Hexo博客有如下几个步骤。\n\n- hexo clean: 清除cache文件。\n- hexo g: 生成public文件，即Hexo站点静态文件。\n- hexo d: 发布public站点到github或者其他托管站点。\n\n我们只需要在`hexo g`命令执行完之后拷贝Gitbook的`_book`内容到Hexo的`public`目录，然后再执行`Hexo d`发布站点即可，访问Hexo站点的时候访问书籍的话通过网址：`xxx.github.io/_book`,浏览器就会自动调用该目录下的`index.html`文件。也可以尝试将下述命令做成可执行脚本直接运行。\n\n```bash\n$ hexo clean && hexo g && cp -fr ../[path]/_book/ public/ && hexo d\n```\n\n# 2. 发布Book到GitBook.com\n\n## 2.1. 在Github中创建一个新的仓库\n\n如果没有Github账号则新创建一个，然后创建一个新的仓库如，`ebook`\n\n## 2.2. 在GitBook中注册一个新的账号\n\n新版本[Gitbook](https://gitbook.com)注册后需要创建一个`organization`，为便于记忆，填写为个人名字即可。依照提示继续填入`project`,在`project`里面可以创建多个`space`，每个`space`便是一本书。\n\n## 2.3. 绑定Gitbook与GitHub仓库\n\n- 首先需要将Gitbook账号与GitHub账号进行绑定\n\n![gitbook](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Github.jpg)\n\n- 关联账号后可以将书籍与仓库进行绑定关联\n\n  进入`Space`后点击**设置**按钮进行关联前面创建的仓库`ebook`\n\n![gitbook](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_integration.jpg)\n\n## 2.4. 通过Git更新书籍\n\n### 2.4.1 获取到`git`地址拷贝到本地\n\n```shell\ngit clone git@github.com:wowmarcomei/ebook.git\n```\n\n### 2.4.2 添加`readme.md`与`summary.md`内容\n\n```shell\ngitbook init #生成README.md与SUMMARY.md\nvi README.md #编辑README.md\nvi SUAMMRY.md #这一步尤其重要，因为需要通过这个文件指定书籍的文档结构\ngit add *\ngit commit -m \"Initial Commit\"\ngit push origin master\n```\n\n即可将写好的`readme`内容推送到Github，Gitbook也会同步从Github中获取到数据。\n\n### 2.4.3 编辑内容并推送到托管仓库\n\n- 创建新章节：创建一个目录。\n- 章节中的小章节：对应一个Markdown文件。\n- 如果需要对章节进行多层嵌套，则嵌套创建目录即可。\n- 编辑`SUMMARY.md`文件指定结构。\n\n示例，新增一个章节，在里面指定对应小节：\n\n```shell\nmkdir 1.爬虫准备\nvi 1.常见的三种数据库的安装配置.md\nvi 2.Python常用库的安装.md\nvi 3.使用Python的正则表达式过滤字符串.md\nvi 4.理解Python中使用yield进行迭代.md\n###编辑完内容后编辑SUMMARY.md文件指定目录结构\n```\n\n上述是使用vi命令编辑Markdown文件，实际上更推荐使用一些可视化的工作编辑，比如`typora`等等。\n\n`SUMMARY.md`格式如下：\n\n```shell\n# Summary\n\n* [Introduction](README.md)\n* [1.准备工作](1.准备工作/README.md)\n\t* [1.常见的三种数据库的安装配置](1.准备工作/1.常见的三种数据库的安装配置.md)\n\t* [2.Python常用库的安装](1.准备工作/2.Python常用库的安装.md)\n\t* [3.使用Python的正则表达式过滤字符串](1.准备工作/3.使用Python的正则表达式过滤字符串.md)\n\t* [4.理解Python中使用yield进行迭代](1.准备工作/4.理解Python中使用yield进行迭代.md)\n\t\t* [1.爬虫基本流程](2.理解爬虫/1.爬虫基本流程.md)\n\t\t* [2.Python使用Urllib库爬取数据](2.理解爬虫/2.Python使用Urllib库爬取数据.md)\n```\n\n即为`[]()`构成的列表，如果需要嵌套层级，相比上一个层级多缩进一下即可，上面的例子中就有三个层级。\n\n![gitbook](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Structure.jpg)\n\n完成后通过`git`推送到`github`,`gitbook.com`就会从仓库里自动同步，此时访问gitbook.com即可访问发布的数据。\n\n```shell\n$ git add *\n$ git commit -m \"update...\"\n$ git push origin master #推送到master分支，gitbook应该也是绑定到仓库的该分支，否则不能同github同步\n```\n\n![gitbook](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_overview.jpg)\n\n> **瑕疵**: 新版本的Gitbook中对`Markdown`的有序列表支持不是很好，原本的列表项`1, 2, 3, 4, ... `在gitbook中会变成`1, 1, 1, 1, ...`，目前没看到有解决，所以我们在记录笔记的时候换成无序列表吧，或者换成小标题也行。","source":"_posts/create-ebook-with-github-and-gitbook.md","raw":"---\ntitle: 使用GitHub与Gitbook制作自己的书籍\ndate: 2018-08-13 11:05:44\ndescription: 最近在学习网络爬虫知识，经常需要做笔记，有几个选择。Hexo博客记录：还是不太喜欢这种定制化过高的博客，等有时间了再来自己折腾一个出来，Pass。 有道笔记：还算是好用，但是每次记录或者查询的时候都要登录显得不是那么方便，Pass。 GitHub：可以在任意地方查阅与修改，是很方便，但是网页形势浏览不是很方便，Pass。 Gitbook：可以在任意地方查阅与修改，web界面式浏览，很方便，就是它了。\ncategories: \n\t- hexo\ntags:\n\t- Gitbook\n\t- Github\n\t- Git\ncover: true\n---\n\n最近在学习网络爬虫知识，经常需要做笔记，有几个选择。\n\n- Hexo博客记录：还是不太喜欢这种定制化过高的博客，等有时间了再来自己折腾一个出来，Pass。\n- 有道笔记：还算是好用，但是每次记录或者查询的时候都要登录显得不是那么方便，Pass。\n- GitHub：可以在任意地方查阅与修改，是很方便，但是网页形势浏览不是很方便，Pass。\n- Gitbook：可以在任意地方查阅与修改，web界面式浏览，很方便，就是它了。\n\n如果将Gitbook与GitHub结合起来，即是将`Book(笔记)`与GitHub中的`Repository`绑定起来，这样便可以在任意地方通过`Git`拉取仓库，修改内容，提交内容，GitBook会自动从GitHub中同步`Book(笔记)`。\n\n# 1.gitbook生成本地书籍\n\n## 1.1 安装gitbook\n\ngitbook依赖`nodejs`，安装完成之后安装`gitbook`.\n\n```shell\n$ node --version\n$ npm -v\n$ npm install gitbook-cli -g\n```\n\n## 1.2 初始化book\n\n```shell\n$ gitbook init #会在当前目录生成两个文件， README.md和SUMMARY.md\n$ gitbook serve #编译和预览书籍，实际上会首先调用 gitbook build 编译书籍,然后打开web服务器\n```\n\n`gitbook init`会在当前目录生成两个文件。\n\n- README.md: 简介文档。\n- SUMMARY.md: 定义了book的**目录结构，非常重要**。\n\n`gitbook serve`命令会调用`gitbook build`在本地生成一个`_book`目录，这个目录就是一个静态站点，打开里面的**index.html**就可以访问本地book了。\n\n## 1.3 在个人站点调用Book \n\n如果有个人站点，需要连接一个gitbook书籍，非常简单，只需要把上面通过`gitbook build`生成的`_book`目录放入相应位置即可，以Hexo为例。\n\n我们知道发布Hexo博客有如下几个步骤。\n\n- hexo clean: 清除cache文件。\n- hexo g: 生成public文件，即Hexo站点静态文件。\n- hexo d: 发布public站点到github或者其他托管站点。\n\n我们只需要在`hexo g`命令执行完之后拷贝Gitbook的`_book`内容到Hexo的`public`目录，然后再执行`Hexo d`发布站点即可，访问Hexo站点的时候访问书籍的话通过网址：`xxx.github.io/_book`,浏览器就会自动调用该目录下的`index.html`文件。也可以尝试将下述命令做成可执行脚本直接运行。\n\n```bash\n$ hexo clean && hexo g && cp -fr ../[path]/_book/ public/ && hexo d\n```\n\n# 2. 发布Book到GitBook.com\n\n## 2.1. 在Github中创建一个新的仓库\n\n如果没有Github账号则新创建一个，然后创建一个新的仓库如，`ebook`\n\n## 2.2. 在GitBook中注册一个新的账号\n\n新版本[Gitbook](https://gitbook.com)注册后需要创建一个`organization`，为便于记忆，填写为个人名字即可。依照提示继续填入`project`,在`project`里面可以创建多个`space`，每个`space`便是一本书。\n\n## 2.3. 绑定Gitbook与GitHub仓库\n\n- 首先需要将Gitbook账号与GitHub账号进行绑定\n\n![gitbook](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Github.jpg)\n\n- 关联账号后可以将书籍与仓库进行绑定关联\n\n  进入`Space`后点击**设置**按钮进行关联前面创建的仓库`ebook`\n\n![gitbook](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_integration.jpg)\n\n## 2.4. 通过Git更新书籍\n\n### 2.4.1 获取到`git`地址拷贝到本地\n\n```shell\ngit clone git@github.com:wowmarcomei/ebook.git\n```\n\n### 2.4.2 添加`readme.md`与`summary.md`内容\n\n```shell\ngitbook init #生成README.md与SUMMARY.md\nvi README.md #编辑README.md\nvi SUAMMRY.md #这一步尤其重要，因为需要通过这个文件指定书籍的文档结构\ngit add *\ngit commit -m \"Initial Commit\"\ngit push origin master\n```\n\n即可将写好的`readme`内容推送到Github，Gitbook也会同步从Github中获取到数据。\n\n### 2.4.3 编辑内容并推送到托管仓库\n\n- 创建新章节：创建一个目录。\n- 章节中的小章节：对应一个Markdown文件。\n- 如果需要对章节进行多层嵌套，则嵌套创建目录即可。\n- 编辑`SUMMARY.md`文件指定结构。\n\n示例，新增一个章节，在里面指定对应小节：\n\n```shell\nmkdir 1.爬虫准备\nvi 1.常见的三种数据库的安装配置.md\nvi 2.Python常用库的安装.md\nvi 3.使用Python的正则表达式过滤字符串.md\nvi 4.理解Python中使用yield进行迭代.md\n###编辑完内容后编辑SUMMARY.md文件指定目录结构\n```\n\n上述是使用vi命令编辑Markdown文件，实际上更推荐使用一些可视化的工作编辑，比如`typora`等等。\n\n`SUMMARY.md`格式如下：\n\n```shell\n# Summary\n\n* [Introduction](README.md)\n* [1.准备工作](1.准备工作/README.md)\n\t* [1.常见的三种数据库的安装配置](1.准备工作/1.常见的三种数据库的安装配置.md)\n\t* [2.Python常用库的安装](1.准备工作/2.Python常用库的安装.md)\n\t* [3.使用Python的正则表达式过滤字符串](1.准备工作/3.使用Python的正则表达式过滤字符串.md)\n\t* [4.理解Python中使用yield进行迭代](1.准备工作/4.理解Python中使用yield进行迭代.md)\n\t\t* [1.爬虫基本流程](2.理解爬虫/1.爬虫基本流程.md)\n\t\t* [2.Python使用Urllib库爬取数据](2.理解爬虫/2.Python使用Urllib库爬取数据.md)\n```\n\n即为`[]()`构成的列表，如果需要嵌套层级，相比上一个层级多缩进一下即可，上面的例子中就有三个层级。\n\n![gitbook](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Structure.jpg)\n\n完成后通过`git`推送到`github`,`gitbook.com`就会从仓库里自动同步，此时访问gitbook.com即可访问发布的数据。\n\n```shell\n$ git add *\n$ git commit -m \"update...\"\n$ git push origin master #推送到master分支，gitbook应该也是绑定到仓库的该分支，否则不能同github同步\n```\n\n![gitbook](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_overview.jpg)\n\n> **瑕疵**: 新版本的Gitbook中对`Markdown`的有序列表支持不是很好，原本的列表项`1, 2, 3, 4, ... `在gitbook中会变成`1, 1, 1, 1, ...`，目前没看到有解决，所以我们在记录笔记的时候换成无序列表吧，或者换成小标题也行。","slug":"create-ebook-with-github-and-gitbook","published":1,"updated":"2020-10-08T08:11:51.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg3hj9i60002zcibm1u9ecap","content":"<p>最近在学习网络爬虫知识，经常需要做笔记，有几个选择。</p>\n<ul>\n<li>Hexo博客记录：还是不太喜欢这种定制化过高的博客，等有时间了再来自己折腾一个出来，Pass。</li>\n<li>有道笔记：还算是好用，但是每次记录或者查询的时候都要登录显得不是那么方便，Pass。</li>\n<li>GitHub：可以在任意地方查阅与修改，是很方便，但是网页形势浏览不是很方便，Pass。</li>\n<li>Gitbook：可以在任意地方查阅与修改，web界面式浏览，很方便，就是它了。</li>\n</ul>\n<p>如果将Gitbook与GitHub结合起来，即是将<code>Book(笔记)</code>与GitHub中的<code>Repository</code>绑定起来，这样便可以在任意地方通过<code>Git</code>拉取仓库，修改内容，提交内容，GitBook会自动从GitHub中同步<code>Book(笔记)</code>。</p>\n<h1>1.gitbook生成本地书籍</h1>\n<h2>1.1 安装gitbook</h2>\n<p>gitbook依赖<code>nodejs</code>，安装完成之后安装<code>gitbook</code>.</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node --version</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm -v</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install gitbook-cli -g</span></span><br></pre></td></tr></table></figure></p>\n<h2>1.2 初始化book</h2>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitbook init <span class=\"comment\">#会在当前目录生成两个文件， README.md和SUMMARY.md</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitbook serve <span class=\"comment\">#编译和预览书籍，实际上会首先调用 gitbook build 编译书籍,然后打开web服务器</span></span></span><br></pre></td></tr></table></figure></p>\n<p><code>gitbook init</code>会在当前目录生成两个文件。</p>\n<ul>\n<li>README.md: 简介文档。</li>\n<li>SUMMARY.md: 定义了book的<strong>目录结构，非常重要</strong>。</li>\n</ul>\n<p><code>gitbook serve</code>命令会调用<code>gitbook build</code>在本地生成一个<code>_book</code>目录，这个目录就是一个静态站点，打开里面的<strong>index.html</strong>就可以访问本地book了。</p>\n<h2>1.3 在个人站点调用Book</h2>\n<p>如果有个人站点，需要连接一个gitbook书籍，非常简单，只需要把上面通过<code>gitbook build</code>生成的<code>_book</code>目录放入相应位置即可，以Hexo为例。</p>\n<p>我们知道发布Hexo博客有如下几个步骤。</p>\n<ul>\n<li>hexo clean: 清除cache文件。</li>\n<li>hexo g: 生成public文件，即Hexo站点静态文件。</li>\n<li>hexo d: 发布public站点到github或者其他托管站点。</li>\n</ul>\n<p>我们只需要在<code>hexo g</code>命令执行完之后拷贝Gitbook的<code>_book</code>内容到Hexo的<code>public</code>目录，然后再执行<code>Hexo d</code>发布站点即可，访问Hexo站点的时候访问书籍的话通过网址：<code>xxx.github.io/_book</code>,浏览器就会自动调用该目录下的<code>index.html</code>文件。也可以尝试将下述命令做成可执行脚本直接运行。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean &amp;&amp; hexo g &amp;&amp; cp -fr ../[path]/_book/ public/ &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>\n<h1>2. 发布Book到GitBook.com</h1>\n<h2>2.1. 在Github中创建一个新的仓库</h2>\n<p>如果没有Github账号则新创建一个，然后创建一个新的仓库如，<code>ebook</code></p>\n<h2>2.2. 在GitBook中注册一个新的账号</h2>\n<p>新版本<a href=\"https://gitbook.com\" target=\"_blank\" rel=\"noopener\">Gitbook</a>注册后需要创建一个<code>organization</code>，为便于记忆，填写为个人名字即可。依照提示继续填入<code>project</code>,在<code>project</code>里面可以创建多个<code>space</code>，每个<code>space</code>便是一本书。</p>\n<h2>2.3. 绑定Gitbook与GitHub仓库</h2>\n<ul>\n<li>首先需要将Gitbook账号与GitHub账号进行绑定</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Github.jpg\" alt=\"gitbook\"></p>\n<ul>\n<li>\n<p>关联账号后可以将书籍与仓库进行绑定关联</p>\n<p>进入<code>Space</code>后点击<strong>设置</strong>按钮进行关联前面创建的仓库<code>ebook</code></p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_integration.jpg\" alt=\"gitbook\"></p>\n<h2>2.4. 通过Git更新书籍</h2>\n<h3>2.4.1 获取到<code>git</code>地址拷贝到本地</h3>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:wowmarcomei/ebook.git</span><br></pre></td></tr></table></figure></p>\n<h3>2.4.2 添加<code>readme.md</code>与<code>summary.md</code>内容</h3>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitbook init #生成README.md与SUMMARY.md</span><br><span class=\"line\">vi README.md #编辑README.md</span><br><span class=\"line\">vi SUAMMRY.md #这一步尤其重要，因为需要通过这个文件指定书籍的文档结构</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m \"Initial Commit\"</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<p>即可将写好的<code>readme</code>内容推送到Github，Gitbook也会同步从Github中获取到数据。</p>\n<h3>2.4.3 编辑内容并推送到托管仓库</h3>\n<ul>\n<li>创建新章节：创建一个目录。</li>\n<li>章节中的小章节：对应一个Markdown文件。</li>\n<li>如果需要对章节进行多层嵌套，则嵌套创建目录即可。</li>\n<li>编辑<code>SUMMARY.md</code>文件指定结构。</li>\n</ul>\n<p>示例，新增一个章节，在里面指定对应小节：</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir 1.爬虫准备</span><br><span class=\"line\">vi 1.常见的三种数据库的安装配置.md</span><br><span class=\"line\">vi 2.Python常用库的安装.md</span><br><span class=\"line\">vi 3.使用Python的正则表达式过滤字符串.md</span><br><span class=\"line\">vi 4.理解Python中使用yield进行迭代.md</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##编辑完内容后编辑SUMMARY.md文件指定目录结构</span></span></span><br></pre></td></tr></table></figure></p>\n<p>上述是使用vi命令编辑Markdown文件，实际上更推荐使用一些可视化的工作编辑，比如<code>typora</code>等等。</p>\n<p><code>SUMMARY.md</code>格式如下：</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Summary</span></span><br><span class=\"line\"></span><br><span class=\"line\">* [Introduction](README.md)</span><br><span class=\"line\">* [1.准备工作](1.准备工作/README.md)</span><br><span class=\"line\">\t* [1.常见的三种数据库的安装配置](1.准备工作/1.常见的三种数据库的安装配置.md)</span><br><span class=\"line\">\t* [2.Python常用库的安装](1.准备工作/2.Python常用库的安装.md)</span><br><span class=\"line\">\t* [3.使用Python的正则表达式过滤字符串](1.准备工作/3.使用Python的正则表达式过滤字符串.md)</span><br><span class=\"line\">\t* [4.理解Python中使用yield进行迭代](1.准备工作/4.理解Python中使用yield进行迭代.md)</span><br><span class=\"line\">\t\t* [1.爬虫基本流程](2.理解爬虫/1.爬虫基本流程.md)</span><br><span class=\"line\">\t\t* [2.Python使用Urllib库爬取数据](2.理解爬虫/2.Python使用Urllib库爬取数据.md)</span><br></pre></td></tr></table></figure></p>\n<p>即为<code>[]()</code>构成的列表，如果需要嵌套层级，相比上一个层级多缩进一下即可，上面的例子中就有三个层级。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Structure.jpg\" alt=\"gitbook\"></p>\n<p>完成后通过<code>git</code>推送到<code>github</code>,<code>gitbook.com</code>就会从仓库里自动同步，此时访问gitbook.com即可访问发布的数据。</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add *</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"update...\"</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master <span class=\"comment\">#推送到master分支，gitbook应该也是绑定到仓库的该分支，否则不能同github同步</span></span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_overview.jpg\" alt=\"gitbook\"></p>\n<blockquote>\n<p><strong>瑕疵</strong>: 新版本的Gitbook中对<code>Markdown</code>的有序列表支持不是很好，原本的列表项<code>1, 2, 3, 4, ...</code>在gitbook中会变成<code>1, 1, 1, 1, ...</code>，目前没看到有解决，所以我们在记录笔记的时候换成无序列表吧，或者换成小标题也行。</p>\n</blockquote>\n","site":{"data":{}},"length":2735,"excerpt":"","more":"<p>最近在学习网络爬虫知识，经常需要做笔记，有几个选择。</p>\n<ul>\n<li>Hexo博客记录：还是不太喜欢这种定制化过高的博客，等有时间了再来自己折腾一个出来，Pass。</li>\n<li>有道笔记：还算是好用，但是每次记录或者查询的时候都要登录显得不是那么方便，Pass。</li>\n<li>GitHub：可以在任意地方查阅与修改，是很方便，但是网页形势浏览不是很方便，Pass。</li>\n<li>Gitbook：可以在任意地方查阅与修改，web界面式浏览，很方便，就是它了。</li>\n</ul>\n<p>如果将Gitbook与GitHub结合起来，即是将<code>Book(笔记)</code>与GitHub中的<code>Repository</code>绑定起来，这样便可以在任意地方通过<code>Git</code>拉取仓库，修改内容，提交内容，GitBook会自动从GitHub中同步<code>Book(笔记)</code>。</p>\n<h1>1.gitbook生成本地书籍</h1>\n<h2>1.1 安装gitbook</h2>\n<p>gitbook依赖<code>nodejs</code>，安装完成之后安装<code>gitbook</code>.</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node --version</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm -v</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install gitbook-cli -g</span></span><br></pre></td></tr></table></figure></p>\n<h2>1.2 初始化book</h2>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitbook init <span class=\"comment\">#会在当前目录生成两个文件， README.md和SUMMARY.md</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitbook serve <span class=\"comment\">#编译和预览书籍，实际上会首先调用 gitbook build 编译书籍,然后打开web服务器</span></span></span><br></pre></td></tr></table></figure></p>\n<p><code>gitbook init</code>会在当前目录生成两个文件。</p>\n<ul>\n<li>README.md: 简介文档。</li>\n<li>SUMMARY.md: 定义了book的<strong>目录结构，非常重要</strong>。</li>\n</ul>\n<p><code>gitbook serve</code>命令会调用<code>gitbook build</code>在本地生成一个<code>_book</code>目录，这个目录就是一个静态站点，打开里面的<strong>index.html</strong>就可以访问本地book了。</p>\n<h2>1.3 在个人站点调用Book</h2>\n<p>如果有个人站点，需要连接一个gitbook书籍，非常简单，只需要把上面通过<code>gitbook build</code>生成的<code>_book</code>目录放入相应位置即可，以Hexo为例。</p>\n<p>我们知道发布Hexo博客有如下几个步骤。</p>\n<ul>\n<li>hexo clean: 清除cache文件。</li>\n<li>hexo g: 生成public文件，即Hexo站点静态文件。</li>\n<li>hexo d: 发布public站点到github或者其他托管站点。</li>\n</ul>\n<p>我们只需要在<code>hexo g</code>命令执行完之后拷贝Gitbook的<code>_book</code>内容到Hexo的<code>public</code>目录，然后再执行<code>Hexo d</code>发布站点即可，访问Hexo站点的时候访问书籍的话通过网址：<code>xxx.github.io/_book</code>,浏览器就会自动调用该目录下的<code>index.html</code>文件。也可以尝试将下述命令做成可执行脚本直接运行。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean &amp;&amp; hexo g &amp;&amp; cp -fr ../[path]/_book/ public/ &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>\n<h1>2. 发布Book到GitBook.com</h1>\n<h2>2.1. 在Github中创建一个新的仓库</h2>\n<p>如果没有Github账号则新创建一个，然后创建一个新的仓库如，<code>ebook</code></p>\n<h2>2.2. 在GitBook中注册一个新的账号</h2>\n<p>新版本<a href=\"https://gitbook.com\" target=\"_blank\" rel=\"noopener\">Gitbook</a>注册后需要创建一个<code>organization</code>，为便于记忆，填写为个人名字即可。依照提示继续填入<code>project</code>,在<code>project</code>里面可以创建多个<code>space</code>，每个<code>space</code>便是一本书。</p>\n<h2>2.3. 绑定Gitbook与GitHub仓库</h2>\n<ul>\n<li>首先需要将Gitbook账号与GitHub账号进行绑定</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Github.jpg\" alt=\"gitbook\"></p>\n<ul>\n<li>\n<p>关联账号后可以将书籍与仓库进行绑定关联</p>\n<p>进入<code>Space</code>后点击<strong>设置</strong>按钮进行关联前面创建的仓库<code>ebook</code></p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_integration.jpg\" alt=\"gitbook\"></p>\n<h2>2.4. 通过Git更新书籍</h2>\n<h3>2.4.1 获取到<code>git</code>地址拷贝到本地</h3>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:wowmarcomei/ebook.git</span><br></pre></td></tr></table></figure></p>\n<h3>2.4.2 添加<code>readme.md</code>与<code>summary.md</code>内容</h3>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitbook init #生成README.md与SUMMARY.md</span><br><span class=\"line\">vi README.md #编辑README.md</span><br><span class=\"line\">vi SUAMMRY.md #这一步尤其重要，因为需要通过这个文件指定书籍的文档结构</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m \"Initial Commit\"</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<p>即可将写好的<code>readme</code>内容推送到Github，Gitbook也会同步从Github中获取到数据。</p>\n<h3>2.4.3 编辑内容并推送到托管仓库</h3>\n<ul>\n<li>创建新章节：创建一个目录。</li>\n<li>章节中的小章节：对应一个Markdown文件。</li>\n<li>如果需要对章节进行多层嵌套，则嵌套创建目录即可。</li>\n<li>编辑<code>SUMMARY.md</code>文件指定结构。</li>\n</ul>\n<p>示例，新增一个章节，在里面指定对应小节：</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir 1.爬虫准备</span><br><span class=\"line\">vi 1.常见的三种数据库的安装配置.md</span><br><span class=\"line\">vi 2.Python常用库的安装.md</span><br><span class=\"line\">vi 3.使用Python的正则表达式过滤字符串.md</span><br><span class=\"line\">vi 4.理解Python中使用yield进行迭代.md</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##编辑完内容后编辑SUMMARY.md文件指定目录结构</span></span></span><br></pre></td></tr></table></figure></p>\n<p>上述是使用vi命令编辑Markdown文件，实际上更推荐使用一些可视化的工作编辑，比如<code>typora</code>等等。</p>\n<p><code>SUMMARY.md</code>格式如下：</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Summary</span></span><br><span class=\"line\"></span><br><span class=\"line\">* [Introduction](README.md)</span><br><span class=\"line\">* [1.准备工作](1.准备工作/README.md)</span><br><span class=\"line\">\t* [1.常见的三种数据库的安装配置](1.准备工作/1.常见的三种数据库的安装配置.md)</span><br><span class=\"line\">\t* [2.Python常用库的安装](1.准备工作/2.Python常用库的安装.md)</span><br><span class=\"line\">\t* [3.使用Python的正则表达式过滤字符串](1.准备工作/3.使用Python的正则表达式过滤字符串.md)</span><br><span class=\"line\">\t* [4.理解Python中使用yield进行迭代](1.准备工作/4.理解Python中使用yield进行迭代.md)</span><br><span class=\"line\">\t\t* [1.爬虫基本流程](2.理解爬虫/1.爬虫基本流程.md)</span><br><span class=\"line\">\t\t* [2.Python使用Urllib库爬取数据](2.理解爬虫/2.Python使用Urllib库爬取数据.md)</span><br></pre></td></tr></table></figure></p>\n<p>即为<code>[]()</code>构成的列表，如果需要嵌套层级，相比上一个层级多缩进一下即可，上面的例子中就有三个层级。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Structure.jpg\" alt=\"gitbook\"></p>\n<p>完成后通过<code>git</code>推送到<code>github</code>,<code>gitbook.com</code>就会从仓库里自动同步，此时访问gitbook.com即可访问发布的数据。</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add *</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"update...\"</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master <span class=\"comment\">#推送到master分支，gitbook应该也是绑定到仓库的该分支，否则不能同github同步</span></span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_overview.jpg\" alt=\"gitbook\"></p>\n<blockquote>\n<p><strong>瑕疵</strong>: 新版本的Gitbook中对<code>Markdown</code>的有序列表支持不是很好，原本的列表项<code>1, 2, 3, 4, ...</code>在gitbook中会变成<code>1, 1, 1, 1, ...</code>，目前没看到有解决，所以我们在记录笔记的时候换成无序列表吧，或者换成小标题也行。</p>\n</blockquote>\n"},{"title":"Centos上部署Harbor私有仓库","date":"2019-08-25T10:42:18.000Z","description":"Harbor是VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。使用Harbor可以部署企业自己的私有仓库，将一些核心镜像与软件与外部网络进行隔离与防护。","_content":"\nHarbor是VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。使用Harbor可以部署企业自己的私有仓库，将一些核心镜像与软件与外部网络进行隔离与防护。\n\n## 1. 环境准备\n\n本次在腾讯云ECS服务器上部署Harbor私有仓库，系统与相关信息如下。\n\n硬件信息：\n\n| 资源 | 容量   | 描述               |\n| ---- | ------ | ------------------ |\n| CPU  | 2 核   | 4 CPU is preferred |\n| 内存 | 2 GB   | 8GB is preferred   |\n| 磁盘 | 50 GB  | 160GB is preferred |\n| 网络 | 2 Mbps | 4Mbps is preferred |\n\n软件信息：\n\n| 软件           | 版本                | 描述                                                         |\n| -------------- | ------------------- | ------------------------------------------------------------ |\n| Centos         | CentOS 7.6 64位     | \\                                                            |\n| Docker         | 19.03.1             | 官方安装指南 [docker engine doc](https://docs.docker.com/engine/installation/) |\n| Docker Compose | 1.22.0              | 官方安装指南 [docker compose doc](https://docs.docker.com/compose/install/) |\n| Openssl        | OpenSSL 1.0.2k-fips | 为Harbor生成证书与密钥                                       |\n\n> 注意：Harbor的所有服务组件都是在Docker中部署的，所以官方安装使用Docker-compose快速部署，因此需要安装Docker、Docker-compose。由于Harbor是基于Docker Registry V2版本，所以就要求Docker版本不小于1.10.0，Docker-compose版本不小于1.6.0。\n\n## 2. 安装Docker与Docker-Compose\n\n### 2.1 安装Docker\n\n```bash\n# yum install -y yum-utils device-mapper-persistent-data lvm2 epel-release\n# yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo\n# yum install docker-ce\n```\n\n### 2.2 启动Docker\n\n```bash\n# systemctl enable docker\n# systemctl start docker\n# docker --version\n```\n\n### 2.3 安装Docker-Compose\n\n```bash\n# curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n# chmod +x /usr/local/bin/docker-compose\n# docker-compose --version\n```\n\n### 2.4 配置证书与密钥\n\n通过OpenSSL工具生成自签名的证书，后面将用于对请求进行校验。官方指南参考：[**Configuring Harbor with HTTPS Access**](https://github.com/goharbor/harbor/blob/master/docs/configure_https.md)\n\n- 首先找到OpenSSL工具配置文件openssl.cnf，对于Centos,目录在/etc/pki/tls/中，编辑openssl.cnf,在[v3_ca]下面添加：subjectAltName = IP:域名|IP地址。如果没有域名填写IP即可。\n\n  ```shell\n  [ v3_ca ]\n  subjectAltName = IP:193.112.221.230\n  ```\n\n- 通过OpenSSL生成证书与密钥\n\n  ```bash\n  [root@VM_95_141_centos data]# cd /data/ssl\n  [root@VM_95_141_centos ssl]# openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt\n  [root@VM_95_141_centos ssl]# ls\n  ca.crt  ca.key\n  [root@VM_95_141_centos ssl]# cp ca.crt /etc/pki/ca-trust/source/anchors/\n  [root@VM_95_141_centos ssl]# update-ca-trust enable\n  [root@VM_95_141_centos ssl]# update-ca-trust extract\n  ```\n\n- 将生成的私有证书追加到系统的证书管理文件中。\n\n  ```bash\n  [root@VM_95_141_centos harbor]# cat ssl/ca.crt >> /etc/pki/tls/certs/ca-bundle.crt\n  ```\n\n- 重启docker, 该步骤一定不要省略，否则有可能加载私钥失败 \n\n  ```bash\n  [root@VM_95_141_centos harbor]#systemctl restart docker\n  ```\n\n## 3. 安装Harbor\n\n```bash\n# wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.2.tgz\n# tar xzvf harbor-offline-installer-v1.8.2.tgz\n# cd harbor/\n# ls \n```\n\n下载离线安装包，解压后可以看到里面包含了如下文件：\n\n```shell\n[root@VM_95_141_centos harbor]# ls\nharbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare\n```\n\n其中`harbor.v1.8.2.tar.gz`是软件包，`harbor.yml`是配置文件，`install.sh`是安装脚本，`prepare`是准备配置Harbor环境脚本。需要修改`harbor.yml`如下字段进行配置。\n\n```yaml\nhostname: 193.112.221.230\n\n# http related config\nhttp:\n  # port for http, default is 80. If https enabled, this port will redirect to https port\n  port: 80\n\n# https related config\nhttps:\n  # https port for harbor, default is 443\n  port: 443\n  # The path of cert and key files for nginx\n  certificate: /data/ssl/ca.crt\n  private_key: /data/ssl/ca.key\n```\n\n然后先后执行`prepare`与`install.sh`进行配置与安装。\n\n```bash\n[root@VM_95_141_centos harbor]# ./prepare\nprepare base dir is set to /root/harbor\nGenerated configuration file: /config/log/logrotate.conf\nGenerated configuration file: /config/nginx/nginx.conf\nGenerated configuration file: /config/core/env\nGenerated configuration file: /config/core/app.conf\nGenerated configuration file: /config/registry/config.yml\nGenerated configuration file: /config/registryctl/env\nGenerated configuration file: /config/db/env\nGenerated configuration file: /config/jobservice/env\nGenerated configuration file: /config/jobservice/config.yml\nloaded secret from file: /secret/keys/secretkey\nGenerated configuration file: /compose_location/docker-compose.yml\nClean up the input dir\n[root@VM_95_141_centos harbor]# ls -l\ntotal 564668\ndrwxr-xr-x 3 root root      4096 Aug 24 23:09 common\n-rw-r--r-- 1 root root      5377 Aug 24 23:09 docker-compose.yml\n-rw-r--r-- 1 root root 578167000 Aug  8 15:51 harbor.v1.8.2.tar.gz\n-rw-r--r-- 1 root root      4494 Aug 24 23:08 harbor.yml\n-rwxr-xr-x 1 root root      5088 Aug  8 15:51 install.sh\n-rw-r--r-- 1 root root     11347 Aug  8 15:51 LICENSE\n-rwxr-xr-x 1 root root      1654 Aug  8 15:51 prepare\n[root@VM_95_141_centos harbor]# vi docker-compose.yml\n[root@VM_95_141_centos harbor]# ./install.sh\n```\n\n一般都会安装成功。\n\n## 4. 操作Harbor\n\nHarbor安装成功后，如下图示。我们可以对齐进行启动、停止、修改、上传镜像、下载镜像等操作。\n![Harbor](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/harbor.jpg)\n\n### 4.1 查看Harbor\n\n可以通过`docker ps`命令查询当前有哪些docker实例在运行。查询Harbor是否正常运行还可以查询docker-compose运行状态。需要进入Harbor所在目录，执行`docker-compose ps`。\n\n```bash\n[root@VM_95_141_centos harbor]# docker-compose ps\nName                 Command                  State                        Ports\n-----------------------------------------------------------------------------------------\nharbor-core         /harbor/start.sh                 Up (healthy)\nharbor-db           /entrypoint.sh postgres          Up (healthy)   5432/tcp\nharbor-jobservice   /harbor/start.sh                 Up\nharbor-log          /bin/sh -c /usr/local/bin/ ...   Up (healthy)   127.0.0.1:1514->10514/tcp\nharbor-portal       nginx -g daemon off;             Up (healthy)   80/tcp\nnginx               nginx -g daemon off;             Up (healthy)   0.0.0.0:443->443/tcp, 0.0.0.0:80->80/tcp\nredis               docker-entrypoint.sh redis ...   Up             6379/tcp\nregistry            /entrypoint.sh /etc/regist ...   Up (healthy)   5000/tcp\nregistryctl         /harbor/start.sh                 Up (healthy)\n[root@VM_95_141_centos harbor]#\n```\n\n### 4.2 停止与重启Harbor\n\n```bash\n[root@VM_95_141_centos ~]# cd harbor\n[root@VM_95_141_centos harbor]# ls\ncommon  docker-compose.yml  harbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare\n[root@VM_95_141_centos harbor]# docker-compose stop\nStopping nginx             ... done\nStopping harbor-portal     ... done\nStopping harbor-jobservice ... done\nStopping harbor-core       ... done\nStopping registryctl       ... done\nStopping redis             ... done\nStopping registry          ... done\nStopping harbor-db         ... done\nStopping harbor-log        ... done\n[root@VM_95_141_centos harbor]# docker-compose start\nStarting log         ... done\nStarting registry    ... done\nStarting registryctl ... done\nStarting postgresql  ... done\nStarting core        ... done\nStarting portal      ... done\nStarting redis       ... done\nStarting jobservice  ... done\nStarting proxy       ... done\n[root@VM_95_141_centos harbor]#\n```\n\n如果需要修改Harbor的配置，可以先停止Harbor实例，更新 `harbor.yml`文件，再执行 `prepare` 脚本重新构建配置，最终启动Harbor实例:\n\n```bash\n[root@VM_95_141_centos ~]# docker-compose down -v\n[root@VM_95_141_centos ~]# vim harbor.yml\n[root@VM_95_141_centos ~]# prepare\n[root@VM_95_141_centos ~]# docker-compose up -d\n```\n\n清除Harbor实例的时候会保持镜像数据与数据库在系统中：\n\n```bash\n[root@VM_95_141_centos ~]# docker-compose down -v\n```\n\n删除Harbor数据库与镜像数据 (如果需要重新安装):\n\n```bash\n[root@VM_95_141_centos ~]# rm -r /data/database\n[root@VM_95_141_centos ~]# rm -r /data/registry\n```\n\n### 4.3 上传镜像到Harbor\n\n查看当前镜像:`docker images`\n\n```bash\n[root@VM_95_141_centos harbor]# docker images\nREPOSITORY                      TAG                       IMAGE ID      C   REATED      SIZE\ngoharbor/chartmuseum-photon     v0.9.0-v1.8.2             e72f3e685a37  2   weeks ago  130MB\ngoharbor/harbor-migrator        v1.8.2                    c11a64ae3a1e  2   weeks ago  361MB\ngoharbor/redis-photon           v1.8.2                    18036ee471bc  2   weeks ago  107MB\ngoharbor/clair-photon           v2.0.8-v1.8.2             68de68a40e66  2   weeks ago  164MB\ngoharbor/notary-server-photon   v0.6.1-v1.8.2             90cf28ef3a84  2   weeks ago  135MB\ngoharbor/notary-signer-photon   v0.6.1-v1.8.2             e9b49ea8ed32  2   weeks ago  132MB\ngoharbor/harbor-registryctl     v1.8.2                    ad798fd6e618  2   weeks ago  96.5MB\ngoharbor/registry-photon        v2.7.1-patch-2819-v1.8.2  081bfb3dc181  2   weeks ago  81.6MB\ngoharbor/nginx-photon           v1.8.2                    1592a48daeac  2   weeks ago  36.2MB\ngoharbor/harbor-log             v1.8.2                    42ad5ef672dd  2   weeks ago  81.8MB\ngoharbor/harbor-jobservice      v1.8.2                    623ed0095966  2   weeks ago  119MB\ngoharbor/harbor-core            v1.8.2                    03d6daab10c7  2   weeks ago  135MB\ngoharbor/harbor-portal          v1.8.2                    41e264a7980b  2   weeks ago  43.2MB\ngoharbor/harbor-db              v1.8.2                    927ecd68ee1f  2   weeks ago  144MB\ngoharbor/prepare                v1.8.2                    b0d62cc7683d  2   weeks ago  145MB\n```\n\n从Docker hub上下载一个最新的Nginx镜像:`docker pull nginx`：\n\n```shell\n[root@VM_95_141_centos harbor]# docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\n1ab2bdfe9778: Pull complete\na17e64cfe253: Pull complete\ne1288088c7a8: Pull complete\nDigest: sha256:53ddb41e46de3d63376579acf46f9a41a8d7de33645db47a486de9769201fec9\nStatus: Downloaded newer image for nginx:latest\ndocker.io/library/nginx:latest\n[root@VM_95_141_centos harbor]# docker images\nREPOSITORY                    TAG                      IMAGE ID      CREATED     SIZE\nnginx                         latest                   5a3221f0137b  8 days ago  126MB\ngoharbor/chartmuseum-photon   v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB\ngoharbor/harbor-migrator      v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB\ngoharbor/redis-photon         v1.8.2                   18036ee471bc  2 weeks ago 107MB\ngoharbor/clair-photon         v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB\ngoharbor/notary-server-photon v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB\ngoharbor/notary-signer-photon v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB\ngoharbor/harbor-registryctl   v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB\ngoharbor/registry-photon      v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB\ngoharbor/nginx-photon         v1.8.2                   1592a48daeac  2 weeks ago 36.2MB\ngoharbor/harbor-log           v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB\ngoharbor/harbor-jobservice    v1.8.2                   623ed0095966  2 weeks ago 119MB\ngoharbor/harbor-core          v1.8.2                   03d6daab10c7  2 weeks ago 135MB\ngoharbor/harbor-portal        v1.8.2                   41e264a7980b  2 weeks ago 43.2MB\ngoharbor/harbor-db            v1.8.2                   927ecd68ee1f  2 weeks ago 144MB\ngoharbor/prepare              v1.8.2                   b0d62cc7683d  2 weeks ago 145MB\n```\n\n给Nginx镜像打上新标签，push到Harbor:\n\n```shell\n[root@VM_95_141_centos harbor]# docker tag nginx-mei:v1.0 193.112.221.230/library/nginx:latest\n[root@VM_95_141_centos harbor]# docker login 193.112.221.230 -uadmin -pHarbor12345\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n[root@VM_95_141_centos harbor]# docker push 193.112.221.230/library/nginx:latest\nThe push refers to repository [193.112.221.230/library/nginx]\n12fdf55172df: Pushed\n002a63507c1c: Pushed\n1c95c77433e8: Pushed\nlatest: digest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911 size: 948\n[root@VM_95_141_centos harbor]#\n```\n\n### 4.4 从Harbor中下载镜像\n\n从Harbor中下载刚上传的Nginx镜像，可以先删除本地的Nginx镜像。然后再从Harbor中Pull下来。\n\n```shell\n[root@VM_95_141_centos harbor]# docker rmi 193.112.221.230/library/nginx:latest\nUntagged: 193.112.221.230/library/nginx:latest\nUntagged: 193.112.221.230/library/nginx@sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911\n[root@VM_95_141_centos harbor]# docker images\nREPOSITORY                     TAG                      IMAGE ID     CREATED     SIZE\nwordpress                      latest                   fc03dc56d371 3 days ago  502MB\n193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b 9 days ago  126MB\nnginx-mei                      v1.0                     5a3221f0137b 9 days ago  126MB\nnginx                          latest                   5a3221f0137b 9 days ago  126MB\nmysql                          5.6                      732765f8c7d2 11 days ago 257MB\ngoharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37 2 weeks ago 130MB\ngoharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e 2 weeks ago 361MB\ngoharbor/redis-photon          v1.8.2                   18036ee471bc 2 weeks ago 107MB\ngoharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66 2 weeks ago 164MB\ngoharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84 2 weeks ago 135MB\ngoharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32 2 weeks ago 132MB\ngoharbor/harbor-registryctl    v1.8.2                   ad798fd6e618 2 weeks ago 96.5MB\ngoharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181 2 weeks ago 81.6MB\ngoharbor/nginx-photon          v1.8.2                   1592a48daeac 2 weeks ago 36.2MB\ngoharbor/harbor-log            v1.8.2                   42ad5ef672dd 2 weeks ago 81.8MB\ngoharbor/harbor-jobservice     v1.8.2                   623ed0095966 2 weeks ago 119MB\ngoharbor/harbor-core           v1.8.2                   03d6daab10c7 2 weeks ago 135MB\ngoharbor/harbor-portal         v1.8.2                   41e264a7980b 2 weeks ago 43.2MB\ngoharbor/harbor-db             v1.8.2                   927ecd68ee1f 2 weeks ago 144MB\ngoharbor/prepare               v1.8.2                   b0d62cc7683d 2 weeks ago 145MB\n[root@VM_95_141_centos harbor]# docker pull 193.112.221.230/library/nginx:latest\nlatest: Pulling from library/nginx\nDigest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911\nStatus: Downloaded newer image for 193.112.221.230/library/nginx:latest\n193.112.221.230/library/nginx:latest\n[root@VM_95_141_centos harbor]# docker images\nREPOSITORY                     TAG                      IMAGE ID      CREATED     SIZE\nwordpress                      latest                   fc03dc56d371  3 days ago  502MB\n193.112.221.230/library/nginx  latest                   5a3221f0137b  9 days ago  126MB\n193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b  9 days ago  126MB\nnginx-mei                      v1.0                     5a3221f0137b  9 days ago  126MB\nnginx                          latest                   5a3221f0137b  9 days ago  126MB\nmysql                          5.6                      732765f8c7d2  11 days ago 257MB\ngoharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB\ngoharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB\ngoharbor/redis-photon          v1.8.2                   18036ee471bc  2 weeks ago 107MB\ngoharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB\ngoharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB\ngoharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB\ngoharbor/harbor-registryctl    v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB\ngoharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB\ngoharbor/nginx-photon          v1.8.2                   1592a48daeac  2 weeks ago 36.2MB\ngoharbor/harbor-log            v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB\ngoharbor/harbor-jobservice     v1.8.2                   623ed0095966  2 weeks ago 119MB\ngoharbor/harbor-core           v1.8.2                   03d6daab10c7  2 weeks ago 135MB\ngoharbor/harbor-portal         v1.8.2                   41e264a7980b  2 weeks ago 43.2MB\ngoharbor/harbor-db             v1.8.2                   927ecd68ee1f  2 weeks ago 144MB\ngoharbor/prepare               v1.8.2                   b0d62cc7683d  2 weeks ago 145MB\n[root@VM_95_141_centos harbor]#\n```\n\n","source":"_posts/deploy-harbor-repository-in-centos.md","raw":"---\ntitle: Centos上部署Harbor私有仓库\ndate: 2019-08-25 18:42:18\ncategories: \n  - docker\ndescription: Harbor是VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。使用Harbor可以部署企业自己的私有仓库，将一些核心镜像与软件与外部网络进行隔离与防护。\ntags:\n  - Docker\n  - Harbor\n---\n\nHarbor是VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。使用Harbor可以部署企业自己的私有仓库，将一些核心镜像与软件与外部网络进行隔离与防护。\n\n## 1. 环境准备\n\n本次在腾讯云ECS服务器上部署Harbor私有仓库，系统与相关信息如下。\n\n硬件信息：\n\n| 资源 | 容量   | 描述               |\n| ---- | ------ | ------------------ |\n| CPU  | 2 核   | 4 CPU is preferred |\n| 内存 | 2 GB   | 8GB is preferred   |\n| 磁盘 | 50 GB  | 160GB is preferred |\n| 网络 | 2 Mbps | 4Mbps is preferred |\n\n软件信息：\n\n| 软件           | 版本                | 描述                                                         |\n| -------------- | ------------------- | ------------------------------------------------------------ |\n| Centos         | CentOS 7.6 64位     | \\                                                            |\n| Docker         | 19.03.1             | 官方安装指南 [docker engine doc](https://docs.docker.com/engine/installation/) |\n| Docker Compose | 1.22.0              | 官方安装指南 [docker compose doc](https://docs.docker.com/compose/install/) |\n| Openssl        | OpenSSL 1.0.2k-fips | 为Harbor生成证书与密钥                                       |\n\n> 注意：Harbor的所有服务组件都是在Docker中部署的，所以官方安装使用Docker-compose快速部署，因此需要安装Docker、Docker-compose。由于Harbor是基于Docker Registry V2版本，所以就要求Docker版本不小于1.10.0，Docker-compose版本不小于1.6.0。\n\n## 2. 安装Docker与Docker-Compose\n\n### 2.1 安装Docker\n\n```bash\n# yum install -y yum-utils device-mapper-persistent-data lvm2 epel-release\n# yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo\n# yum install docker-ce\n```\n\n### 2.2 启动Docker\n\n```bash\n# systemctl enable docker\n# systemctl start docker\n# docker --version\n```\n\n### 2.3 安装Docker-Compose\n\n```bash\n# curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n# chmod +x /usr/local/bin/docker-compose\n# docker-compose --version\n```\n\n### 2.4 配置证书与密钥\n\n通过OpenSSL工具生成自签名的证书，后面将用于对请求进行校验。官方指南参考：[**Configuring Harbor with HTTPS Access**](https://github.com/goharbor/harbor/blob/master/docs/configure_https.md)\n\n- 首先找到OpenSSL工具配置文件openssl.cnf，对于Centos,目录在/etc/pki/tls/中，编辑openssl.cnf,在[v3_ca]下面添加：subjectAltName = IP:域名|IP地址。如果没有域名填写IP即可。\n\n  ```shell\n  [ v3_ca ]\n  subjectAltName = IP:193.112.221.230\n  ```\n\n- 通过OpenSSL生成证书与密钥\n\n  ```bash\n  [root@VM_95_141_centos data]# cd /data/ssl\n  [root@VM_95_141_centos ssl]# openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt\n  [root@VM_95_141_centos ssl]# ls\n  ca.crt  ca.key\n  [root@VM_95_141_centos ssl]# cp ca.crt /etc/pki/ca-trust/source/anchors/\n  [root@VM_95_141_centos ssl]# update-ca-trust enable\n  [root@VM_95_141_centos ssl]# update-ca-trust extract\n  ```\n\n- 将生成的私有证书追加到系统的证书管理文件中。\n\n  ```bash\n  [root@VM_95_141_centos harbor]# cat ssl/ca.crt >> /etc/pki/tls/certs/ca-bundle.crt\n  ```\n\n- 重启docker, 该步骤一定不要省略，否则有可能加载私钥失败 \n\n  ```bash\n  [root@VM_95_141_centos harbor]#systemctl restart docker\n  ```\n\n## 3. 安装Harbor\n\n```bash\n# wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.2.tgz\n# tar xzvf harbor-offline-installer-v1.8.2.tgz\n# cd harbor/\n# ls \n```\n\n下载离线安装包，解压后可以看到里面包含了如下文件：\n\n```shell\n[root@VM_95_141_centos harbor]# ls\nharbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare\n```\n\n其中`harbor.v1.8.2.tar.gz`是软件包，`harbor.yml`是配置文件，`install.sh`是安装脚本，`prepare`是准备配置Harbor环境脚本。需要修改`harbor.yml`如下字段进行配置。\n\n```yaml\nhostname: 193.112.221.230\n\n# http related config\nhttp:\n  # port for http, default is 80. If https enabled, this port will redirect to https port\n  port: 80\n\n# https related config\nhttps:\n  # https port for harbor, default is 443\n  port: 443\n  # The path of cert and key files for nginx\n  certificate: /data/ssl/ca.crt\n  private_key: /data/ssl/ca.key\n```\n\n然后先后执行`prepare`与`install.sh`进行配置与安装。\n\n```bash\n[root@VM_95_141_centos harbor]# ./prepare\nprepare base dir is set to /root/harbor\nGenerated configuration file: /config/log/logrotate.conf\nGenerated configuration file: /config/nginx/nginx.conf\nGenerated configuration file: /config/core/env\nGenerated configuration file: /config/core/app.conf\nGenerated configuration file: /config/registry/config.yml\nGenerated configuration file: /config/registryctl/env\nGenerated configuration file: /config/db/env\nGenerated configuration file: /config/jobservice/env\nGenerated configuration file: /config/jobservice/config.yml\nloaded secret from file: /secret/keys/secretkey\nGenerated configuration file: /compose_location/docker-compose.yml\nClean up the input dir\n[root@VM_95_141_centos harbor]# ls -l\ntotal 564668\ndrwxr-xr-x 3 root root      4096 Aug 24 23:09 common\n-rw-r--r-- 1 root root      5377 Aug 24 23:09 docker-compose.yml\n-rw-r--r-- 1 root root 578167000 Aug  8 15:51 harbor.v1.8.2.tar.gz\n-rw-r--r-- 1 root root      4494 Aug 24 23:08 harbor.yml\n-rwxr-xr-x 1 root root      5088 Aug  8 15:51 install.sh\n-rw-r--r-- 1 root root     11347 Aug  8 15:51 LICENSE\n-rwxr-xr-x 1 root root      1654 Aug  8 15:51 prepare\n[root@VM_95_141_centos harbor]# vi docker-compose.yml\n[root@VM_95_141_centos harbor]# ./install.sh\n```\n\n一般都会安装成功。\n\n## 4. 操作Harbor\n\nHarbor安装成功后，如下图示。我们可以对齐进行启动、停止、修改、上传镜像、下载镜像等操作。\n![Harbor](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/harbor.jpg)\n\n### 4.1 查看Harbor\n\n可以通过`docker ps`命令查询当前有哪些docker实例在运行。查询Harbor是否正常运行还可以查询docker-compose运行状态。需要进入Harbor所在目录，执行`docker-compose ps`。\n\n```bash\n[root@VM_95_141_centos harbor]# docker-compose ps\nName                 Command                  State                        Ports\n-----------------------------------------------------------------------------------------\nharbor-core         /harbor/start.sh                 Up (healthy)\nharbor-db           /entrypoint.sh postgres          Up (healthy)   5432/tcp\nharbor-jobservice   /harbor/start.sh                 Up\nharbor-log          /bin/sh -c /usr/local/bin/ ...   Up (healthy)   127.0.0.1:1514->10514/tcp\nharbor-portal       nginx -g daemon off;             Up (healthy)   80/tcp\nnginx               nginx -g daemon off;             Up (healthy)   0.0.0.0:443->443/tcp, 0.0.0.0:80->80/tcp\nredis               docker-entrypoint.sh redis ...   Up             6379/tcp\nregistry            /entrypoint.sh /etc/regist ...   Up (healthy)   5000/tcp\nregistryctl         /harbor/start.sh                 Up (healthy)\n[root@VM_95_141_centos harbor]#\n```\n\n### 4.2 停止与重启Harbor\n\n```bash\n[root@VM_95_141_centos ~]# cd harbor\n[root@VM_95_141_centos harbor]# ls\ncommon  docker-compose.yml  harbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare\n[root@VM_95_141_centos harbor]# docker-compose stop\nStopping nginx             ... done\nStopping harbor-portal     ... done\nStopping harbor-jobservice ... done\nStopping harbor-core       ... done\nStopping registryctl       ... done\nStopping redis             ... done\nStopping registry          ... done\nStopping harbor-db         ... done\nStopping harbor-log        ... done\n[root@VM_95_141_centos harbor]# docker-compose start\nStarting log         ... done\nStarting registry    ... done\nStarting registryctl ... done\nStarting postgresql  ... done\nStarting core        ... done\nStarting portal      ... done\nStarting redis       ... done\nStarting jobservice  ... done\nStarting proxy       ... done\n[root@VM_95_141_centos harbor]#\n```\n\n如果需要修改Harbor的配置，可以先停止Harbor实例，更新 `harbor.yml`文件，再执行 `prepare` 脚本重新构建配置，最终启动Harbor实例:\n\n```bash\n[root@VM_95_141_centos ~]# docker-compose down -v\n[root@VM_95_141_centos ~]# vim harbor.yml\n[root@VM_95_141_centos ~]# prepare\n[root@VM_95_141_centos ~]# docker-compose up -d\n```\n\n清除Harbor实例的时候会保持镜像数据与数据库在系统中：\n\n```bash\n[root@VM_95_141_centos ~]# docker-compose down -v\n```\n\n删除Harbor数据库与镜像数据 (如果需要重新安装):\n\n```bash\n[root@VM_95_141_centos ~]# rm -r /data/database\n[root@VM_95_141_centos ~]# rm -r /data/registry\n```\n\n### 4.3 上传镜像到Harbor\n\n查看当前镜像:`docker images`\n\n```bash\n[root@VM_95_141_centos harbor]# docker images\nREPOSITORY                      TAG                       IMAGE ID      C   REATED      SIZE\ngoharbor/chartmuseum-photon     v0.9.0-v1.8.2             e72f3e685a37  2   weeks ago  130MB\ngoharbor/harbor-migrator        v1.8.2                    c11a64ae3a1e  2   weeks ago  361MB\ngoharbor/redis-photon           v1.8.2                    18036ee471bc  2   weeks ago  107MB\ngoharbor/clair-photon           v2.0.8-v1.8.2             68de68a40e66  2   weeks ago  164MB\ngoharbor/notary-server-photon   v0.6.1-v1.8.2             90cf28ef3a84  2   weeks ago  135MB\ngoharbor/notary-signer-photon   v0.6.1-v1.8.2             e9b49ea8ed32  2   weeks ago  132MB\ngoharbor/harbor-registryctl     v1.8.2                    ad798fd6e618  2   weeks ago  96.5MB\ngoharbor/registry-photon        v2.7.1-patch-2819-v1.8.2  081bfb3dc181  2   weeks ago  81.6MB\ngoharbor/nginx-photon           v1.8.2                    1592a48daeac  2   weeks ago  36.2MB\ngoharbor/harbor-log             v1.8.2                    42ad5ef672dd  2   weeks ago  81.8MB\ngoharbor/harbor-jobservice      v1.8.2                    623ed0095966  2   weeks ago  119MB\ngoharbor/harbor-core            v1.8.2                    03d6daab10c7  2   weeks ago  135MB\ngoharbor/harbor-portal          v1.8.2                    41e264a7980b  2   weeks ago  43.2MB\ngoharbor/harbor-db              v1.8.2                    927ecd68ee1f  2   weeks ago  144MB\ngoharbor/prepare                v1.8.2                    b0d62cc7683d  2   weeks ago  145MB\n```\n\n从Docker hub上下载一个最新的Nginx镜像:`docker pull nginx`：\n\n```shell\n[root@VM_95_141_centos harbor]# docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\n1ab2bdfe9778: Pull complete\na17e64cfe253: Pull complete\ne1288088c7a8: Pull complete\nDigest: sha256:53ddb41e46de3d63376579acf46f9a41a8d7de33645db47a486de9769201fec9\nStatus: Downloaded newer image for nginx:latest\ndocker.io/library/nginx:latest\n[root@VM_95_141_centos harbor]# docker images\nREPOSITORY                    TAG                      IMAGE ID      CREATED     SIZE\nnginx                         latest                   5a3221f0137b  8 days ago  126MB\ngoharbor/chartmuseum-photon   v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB\ngoharbor/harbor-migrator      v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB\ngoharbor/redis-photon         v1.8.2                   18036ee471bc  2 weeks ago 107MB\ngoharbor/clair-photon         v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB\ngoharbor/notary-server-photon v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB\ngoharbor/notary-signer-photon v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB\ngoharbor/harbor-registryctl   v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB\ngoharbor/registry-photon      v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB\ngoharbor/nginx-photon         v1.8.2                   1592a48daeac  2 weeks ago 36.2MB\ngoharbor/harbor-log           v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB\ngoharbor/harbor-jobservice    v1.8.2                   623ed0095966  2 weeks ago 119MB\ngoharbor/harbor-core          v1.8.2                   03d6daab10c7  2 weeks ago 135MB\ngoharbor/harbor-portal        v1.8.2                   41e264a7980b  2 weeks ago 43.2MB\ngoharbor/harbor-db            v1.8.2                   927ecd68ee1f  2 weeks ago 144MB\ngoharbor/prepare              v1.8.2                   b0d62cc7683d  2 weeks ago 145MB\n```\n\n给Nginx镜像打上新标签，push到Harbor:\n\n```shell\n[root@VM_95_141_centos harbor]# docker tag nginx-mei:v1.0 193.112.221.230/library/nginx:latest\n[root@VM_95_141_centos harbor]# docker login 193.112.221.230 -uadmin -pHarbor12345\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n[root@VM_95_141_centos harbor]# docker push 193.112.221.230/library/nginx:latest\nThe push refers to repository [193.112.221.230/library/nginx]\n12fdf55172df: Pushed\n002a63507c1c: Pushed\n1c95c77433e8: Pushed\nlatest: digest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911 size: 948\n[root@VM_95_141_centos harbor]#\n```\n\n### 4.4 从Harbor中下载镜像\n\n从Harbor中下载刚上传的Nginx镜像，可以先删除本地的Nginx镜像。然后再从Harbor中Pull下来。\n\n```shell\n[root@VM_95_141_centos harbor]# docker rmi 193.112.221.230/library/nginx:latest\nUntagged: 193.112.221.230/library/nginx:latest\nUntagged: 193.112.221.230/library/nginx@sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911\n[root@VM_95_141_centos harbor]# docker images\nREPOSITORY                     TAG                      IMAGE ID     CREATED     SIZE\nwordpress                      latest                   fc03dc56d371 3 days ago  502MB\n193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b 9 days ago  126MB\nnginx-mei                      v1.0                     5a3221f0137b 9 days ago  126MB\nnginx                          latest                   5a3221f0137b 9 days ago  126MB\nmysql                          5.6                      732765f8c7d2 11 days ago 257MB\ngoharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37 2 weeks ago 130MB\ngoharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e 2 weeks ago 361MB\ngoharbor/redis-photon          v1.8.2                   18036ee471bc 2 weeks ago 107MB\ngoharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66 2 weeks ago 164MB\ngoharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84 2 weeks ago 135MB\ngoharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32 2 weeks ago 132MB\ngoharbor/harbor-registryctl    v1.8.2                   ad798fd6e618 2 weeks ago 96.5MB\ngoharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181 2 weeks ago 81.6MB\ngoharbor/nginx-photon          v1.8.2                   1592a48daeac 2 weeks ago 36.2MB\ngoharbor/harbor-log            v1.8.2                   42ad5ef672dd 2 weeks ago 81.8MB\ngoharbor/harbor-jobservice     v1.8.2                   623ed0095966 2 weeks ago 119MB\ngoharbor/harbor-core           v1.8.2                   03d6daab10c7 2 weeks ago 135MB\ngoharbor/harbor-portal         v1.8.2                   41e264a7980b 2 weeks ago 43.2MB\ngoharbor/harbor-db             v1.8.2                   927ecd68ee1f 2 weeks ago 144MB\ngoharbor/prepare               v1.8.2                   b0d62cc7683d 2 weeks ago 145MB\n[root@VM_95_141_centos harbor]# docker pull 193.112.221.230/library/nginx:latest\nlatest: Pulling from library/nginx\nDigest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911\nStatus: Downloaded newer image for 193.112.221.230/library/nginx:latest\n193.112.221.230/library/nginx:latest\n[root@VM_95_141_centos harbor]# docker images\nREPOSITORY                     TAG                      IMAGE ID      CREATED     SIZE\nwordpress                      latest                   fc03dc56d371  3 days ago  502MB\n193.112.221.230/library/nginx  latest                   5a3221f0137b  9 days ago  126MB\n193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b  9 days ago  126MB\nnginx-mei                      v1.0                     5a3221f0137b  9 days ago  126MB\nnginx                          latest                   5a3221f0137b  9 days ago  126MB\nmysql                          5.6                      732765f8c7d2  11 days ago 257MB\ngoharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB\ngoharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB\ngoharbor/redis-photon          v1.8.2                   18036ee471bc  2 weeks ago 107MB\ngoharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB\ngoharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB\ngoharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB\ngoharbor/harbor-registryctl    v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB\ngoharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB\ngoharbor/nginx-photon          v1.8.2                   1592a48daeac  2 weeks ago 36.2MB\ngoharbor/harbor-log            v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB\ngoharbor/harbor-jobservice     v1.8.2                   623ed0095966  2 weeks ago 119MB\ngoharbor/harbor-core           v1.8.2                   03d6daab10c7  2 weeks ago 135MB\ngoharbor/harbor-portal         v1.8.2                   41e264a7980b  2 weeks ago 43.2MB\ngoharbor/harbor-db             v1.8.2                   927ecd68ee1f  2 weeks ago 144MB\ngoharbor/prepare               v1.8.2                   b0d62cc7683d  2 weeks ago 145MB\n[root@VM_95_141_centos harbor]#\n```\n\n","slug":"deploy-harbor-repository-in-centos","published":1,"updated":"2020-10-08T08:15:22.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg3hj9ii0006zcib3s1u6mj7","content":"<p>Harbor是VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。使用Harbor可以部署企业自己的私有仓库，将一些核心镜像与软件与外部网络进行隔离与防护。</p>\n<h2>1. 环境准备</h2>\n<p>本次在腾讯云ECS服务器上部署Harbor私有仓库，系统与相关信息如下。</p>\n<p>硬件信息：</p>\n<table>\n<thead>\n<tr>\n<th>资源</th>\n<th>容量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>2 核</td>\n<td>4 CPU is preferred</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>2 GB</td>\n<td>8GB is preferred</td>\n</tr>\n<tr>\n<td>磁盘</td>\n<td>50 GB</td>\n<td>160GB is preferred</td>\n</tr>\n<tr>\n<td>网络</td>\n<td>2 Mbps</td>\n<td>4Mbps is preferred</td>\n</tr>\n</tbody>\n</table>\n<p>软件信息：</p>\n<table>\n<thead>\n<tr>\n<th>软件</th>\n<th>版本</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Centos</td>\n<td>CentOS 7.6 64位</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>Docker</td>\n<td>19.03.1</td>\n<td>官方安装指南 <a href=\"https://docs.docker.com/engine/installation/\" target=\"_blank\" rel=\"noopener\">docker engine doc</a></td>\n</tr>\n<tr>\n<td>Docker Compose</td>\n<td>1.22.0</td>\n<td>官方安装指南 <a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">docker compose doc</a></td>\n</tr>\n<tr>\n<td>Openssl</td>\n<td>OpenSSL 1.0.2k-fips</td>\n<td>为Harbor生成证书与密钥</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：Harbor的所有服务组件都是在Docker中部署的，所以官方安装使用Docker-compose快速部署，因此需要安装Docker、Docker-compose。由于Harbor是基于Docker Registry V2版本，所以就要求Docker版本不小于1.10.0，Docker-compose版本不小于1.6.0。</p>\n</blockquote>\n<h2>2. 安装Docker与Docker-Compose</h2>\n<h3>2.1 安装Docker</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum install -y yum-utils device-mapper-persistent-data lvm2 epel-release</span></span><br><span class=\"line\"><span class=\"comment\"># yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class=\"line\"><span class=\"comment\"># yum install docker-ce</span></span><br></pre></td></tr></table></figure></p>\n<h3>2.2 启动Docker</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># systemctl enable docker</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl start docker</span></span><br><span class=\"line\"><span class=\"comment\"># docker --version</span></span><br></pre></td></tr></table></figure></p>\n<h3>2.3 安装Docker-Compose</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span><br><span class=\"line\"><span class=\"comment\"># chmod +x /usr/local/bin/docker-compose</span></span><br><span class=\"line\"><span class=\"comment\"># docker-compose --version</span></span><br></pre></td></tr></table></figure></p>\n<h3>2.4 配置证书与密钥</h3>\n<p>通过OpenSSL工具生成自签名的证书，后面将用于对请求进行校验。官方指南参考：<a href=\"https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\" target=\"_blank\" rel=\"noopener\"><strong>Configuring Harbor with HTTPS Access</strong></a></p>\n<ul>\n<li>\n<p>首先找到OpenSSL工具配置文件openssl.cnf，对于Centos,目录在/etc/pki/tls/中，编辑openssl.cnf,在[v3_ca]下面添加：subjectAltName = IP:域名|IP地址。如果没有域名填写IP即可。</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ v3_ca ]</span><br><span class=\"line\">subjectAltName = IP:193.112.221.230</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>通过OpenSSL生成证书与密钥</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos data]<span class=\"comment\"># cd /data/ssl</span></span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt</span></span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># ls</span></span><br><span class=\"line\">ca.crt  ca.key</span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># cp ca.crt /etc/pki/ca-trust/source/anchors/</span></span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># update-ca-trust enable</span></span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># update-ca-trust extract</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>将生成的私有证书追加到系统的证书管理文件中。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># cat ssl/ca.crt &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>重启docker, 该步骤一定不要省略，否则有可能加载私钥失败</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\">#systemctl restart docker</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2>3. 安装Harbor</h2>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.2.tgz</span></span><br><span class=\"line\"><span class=\"comment\"># tar xzvf harbor-offline-installer-v1.8.2.tgz</span></span><br><span class=\"line\"><span class=\"comment\"># cd harbor/</span></span><br><span class=\"line\"><span class=\"comment\"># ls</span></span><br></pre></td></tr></table></figure></p>\n<p>下载离线安装包，解压后可以看到里面包含了如下文件：</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]# ls</span><br><span class=\"line\">harbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>harbor.v1.8.2.tar.gz</code>是软件包，<code>harbor.yml</code>是配置文件，<code>install.sh</code>是安装脚本，<code>prepare</code>是准备配置Harbor环境脚本。需要修改<code>harbor.yml</code>如下字段进行配置。</p>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hostname:</span> <span class=\"number\">193.112</span><span class=\"number\">.221</span><span class=\"number\">.230</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http related config</span></span><br><span class=\"line\"><span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"comment\"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https related config</span></span><br><span class=\"line\"><span class=\"attr\">https:</span></span><br><span class=\"line\">  <span class=\"comment\"># https port for harbor, default is 443</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">  <span class=\"comment\"># The path of cert and key files for nginx</span></span><br><span class=\"line\">  <span class=\"attr\">certificate:</span> <span class=\"string\">/data/ssl/ca.crt</span></span><br><span class=\"line\">  <span class=\"attr\">private_key:</span> <span class=\"string\">/data/ssl/ca.key</span></span><br></pre></td></tr></table></figure></p>\n<p>然后先后执行<code>prepare</code>与<code>install.sh</code>进行配置与安装。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># ./prepare</span></span><br><span class=\"line\">prepare base dir is <span class=\"built_in\">set</span> to /root/harbor</span><br><span class=\"line\">Generated configuration file: /config/<span class=\"built_in\">log</span>/logrotate.conf</span><br><span class=\"line\">Generated configuration file: /config/nginx/nginx.conf</span><br><span class=\"line\">Generated configuration file: /config/core/env</span><br><span class=\"line\">Generated configuration file: /config/core/app.conf</span><br><span class=\"line\">Generated configuration file: /config/registry/config.yml</span><br><span class=\"line\">Generated configuration file: /config/registryctl/env</span><br><span class=\"line\">Generated configuration file: /config/db/env</span><br><span class=\"line\">Generated configuration file: /config/jobservice/env</span><br><span class=\"line\">Generated configuration file: /config/jobservice/config.yml</span><br><span class=\"line\">loaded secret from file: /secret/keys/secretkey</span><br><span class=\"line\">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class=\"line\">Clean up the input dir</span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">total 564668</span><br><span class=\"line\">drwxr-xr-x 3 root root      4096 Aug 24 23:09 common</span><br><span class=\"line\">-rw-r--r-- 1 root root      5377 Aug 24 23:09 docker-compose.yml</span><br><span class=\"line\">-rw-r--r-- 1 root root 578167000 Aug  8 15:51 harbor.v1.8.2.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root      4494 Aug 24 23:08 harbor.yml</span><br><span class=\"line\">-rwxr-xr-x 1 root root      5088 Aug  8 15:51 install.sh</span><br><span class=\"line\">-rw-r--r-- 1 root root     11347 Aug  8 15:51 LICENSE</span><br><span class=\"line\">-rwxr-xr-x 1 root root      1654 Aug  8 15:51 prepare</span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># vi docker-compose.yml</span></span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># ./install.sh</span></span><br></pre></td></tr></table></figure></p>\n<p>一般都会安装成功。</p>\n<h2>4. 操作Harbor</h2>\n<p>Harbor安装成功后，如下图示。我们可以对齐进行启动、停止、修改、上传镜像、下载镜像等操作。\n<img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/harbor.jpg\" alt=\"Harbor\"></p>\n<h3>4.1 查看Harbor</h3>\n<p>可以通过<code>docker ps</code>命令查询当前有哪些docker实例在运行。查询Harbor是否正常运行还可以查询docker-compose运行状态。需要进入Harbor所在目录，执行<code>docker-compose ps</code>。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># docker-compose ps</span></span><br><span class=\"line\">Name                 Command                  State                        Ports</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\">harbor-core         /harbor/start.sh                 Up (healthy)</span><br><span class=\"line\">harbor-db           /entrypoint.sh postgres          Up (healthy)   5432/tcp</span><br><span class=\"line\">harbor-jobservice   /harbor/start.sh                 Up</span><br><span class=\"line\">harbor-log          /bin/sh -c /usr/<span class=\"built_in\">local</span>/bin/ ...   Up (healthy)   127.0.0.1:1514-&gt;10514/tcp</span><br><span class=\"line\">harbor-portal       nginx -g daemon off;             Up (healthy)   80/tcp</span><br><span class=\"line\">nginx               nginx -g daemon off;             Up (healthy)   0.0.0.0:443-&gt;443/tcp, 0.0.0.0:80-&gt;80/tcp</span><br><span class=\"line\">redis               docker-entrypoint.sh redis ...   Up             6379/tcp</span><br><span class=\"line\">registry            /entrypoint.sh /etc/regist ...   Up (healthy)   5000/tcp</span><br><span class=\"line\">registryctl         /harbor/start.sh                 Up (healthy)</span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<h3>4.2 停止与重启Harbor</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># cd harbor</span></span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># ls</span></span><br><span class=\"line\">common  docker-compose.yml  harbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare</span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># docker-compose stop</span></span><br><span class=\"line\">Stopping nginx             ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-portal     ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-jobservice ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-core       ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping registryctl       ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping redis             ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping registry          ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-db         ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-log        ... <span class=\"keyword\">done</span></span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># docker-compose start</span></span><br><span class=\"line\">Starting <span class=\"built_in\">log</span>         ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting registry    ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting registryctl ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting postgresql  ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting core        ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting portal      ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting redis       ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting jobservice  ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting proxy       ... <span class=\"keyword\">done</span></span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<p>如果需要修改Harbor的配置，可以先停止Harbor实例，更新 <code>harbor.yml</code>文件，再执行 <code>prepare</code> 脚本重新构建配置，最终启动Harbor实例:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># docker-compose down -v</span></span><br><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># vim harbor.yml</span></span><br><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># prepare</span></span><br><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># docker-compose up -d</span></span><br></pre></td></tr></table></figure></p>\n<p>清除Harbor实例的时候会保持镜像数据与数据库在系统中：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># docker-compose down -v</span></span><br></pre></td></tr></table></figure></p>\n<p>删除Harbor数据库与镜像数据 (如果需要重新安装):</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># rm -r /data/database</span></span><br><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># rm -r /data/registry</span></span><br></pre></td></tr></table></figure></p>\n<h3>4.3 上传镜像到Harbor</h3>\n<p>查看当前镜像:<code>docker images</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY                      TAG                       IMAGE ID      C   REATED      SIZE</span><br><span class=\"line\">goharbor/chartmuseum-photon     v0.9.0-v1.8.2             e72f3e685a37  2   weeks ago  130MB</span><br><span class=\"line\">goharbor/harbor-migrator        v1.8.2                    c11a64ae3a1e  2   weeks ago  361MB</span><br><span class=\"line\">goharbor/redis-photon           v1.8.2                    18036ee471bc  2   weeks ago  107MB</span><br><span class=\"line\">goharbor/clair-photon           v2.0.8-v1.8.2             68de68a40e66  2   weeks ago  164MB</span><br><span class=\"line\">goharbor/notary-server-photon   v0.6.1-v1.8.2             90cf28ef3a84  2   weeks ago  135MB</span><br><span class=\"line\">goharbor/notary-signer-photon   v0.6.1-v1.8.2             e9b49ea8ed32  2   weeks ago  132MB</span><br><span class=\"line\">goharbor/harbor-registryctl     v1.8.2                    ad798fd6e618  2   weeks ago  96.5MB</span><br><span class=\"line\">goharbor/registry-photon        v2.7.1-patch-2819-v1.8.2  081bfb3dc181  2   weeks ago  81.6MB</span><br><span class=\"line\">goharbor/nginx-photon           v1.8.2                    1592a48daeac  2   weeks ago  36.2MB</span><br><span class=\"line\">goharbor/harbor-log             v1.8.2                    42ad5ef672dd  2   weeks ago  81.8MB</span><br><span class=\"line\">goharbor/harbor-jobservice      v1.8.2                    623ed0095966  2   weeks ago  119MB</span><br><span class=\"line\">goharbor/harbor-core            v1.8.2                    03d6daab10c7  2   weeks ago  135MB</span><br><span class=\"line\">goharbor/harbor-portal          v1.8.2                    41e264a7980b  2   weeks ago  43.2MB</span><br><span class=\"line\">goharbor/harbor-db              v1.8.2                    927ecd68ee1f  2   weeks ago  144MB</span><br><span class=\"line\">goharbor/prepare                v1.8.2                    b0d62cc7683d  2   weeks ago  145MB</span><br></pre></td></tr></table></figure></p>\n<p>从Docker hub上下载一个最新的Nginx镜像:<code>docker pull nginx</code>：</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]# docker pull nginx</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">1ab2bdfe9778: Pull complete</span><br><span class=\"line\">a17e64cfe253: Pull complete</span><br><span class=\"line\">e1288088c7a8: Pull complete</span><br><span class=\"line\">Digest: sha256:53ddb41e46de3d63376579acf46f9a41a8d7de33645db47a486de9769201fec9</span><br><span class=\"line\">Status: Downloaded newer image for nginx:latest</span><br><span class=\"line\">docker.io/library/nginx:latest</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker images</span><br><span class=\"line\">REPOSITORY                    TAG                      IMAGE ID      CREATED     SIZE</span><br><span class=\"line\">nginx                         latest                   5a3221f0137b  8 days ago  126MB</span><br><span class=\"line\">goharbor/chartmuseum-photon   v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB</span><br><span class=\"line\">goharbor/harbor-migrator      v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB</span><br><span class=\"line\">goharbor/redis-photon         v1.8.2                   18036ee471bc  2 weeks ago 107MB</span><br><span class=\"line\">goharbor/clair-photon         v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB</span><br><span class=\"line\">goharbor/notary-server-photon v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB</span><br><span class=\"line\">goharbor/notary-signer-photon v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB</span><br><span class=\"line\">goharbor/harbor-registryctl   v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB</span><br><span class=\"line\">goharbor/registry-photon      v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB</span><br><span class=\"line\">goharbor/nginx-photon         v1.8.2                   1592a48daeac  2 weeks ago 36.2MB</span><br><span class=\"line\">goharbor/harbor-log           v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB</span><br><span class=\"line\">goharbor/harbor-jobservice    v1.8.2                   623ed0095966  2 weeks ago 119MB</span><br><span class=\"line\">goharbor/harbor-core          v1.8.2                   03d6daab10c7  2 weeks ago 135MB</span><br><span class=\"line\">goharbor/harbor-portal        v1.8.2                   41e264a7980b  2 weeks ago 43.2MB</span><br><span class=\"line\">goharbor/harbor-db            v1.8.2                   927ecd68ee1f  2 weeks ago 144MB</span><br><span class=\"line\">goharbor/prepare              v1.8.2                   b0d62cc7683d  2 weeks ago 145MB</span><br></pre></td></tr></table></figure></p>\n<p>给Nginx镜像打上新标签，push到Harbor:</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]# docker tag nginx-mei:v1.0 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker login 193.112.221.230 -uadmin -pHarbor12345</span><br><span class=\"line\">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker push 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">The push refers to repository [193.112.221.230/library/nginx]</span><br><span class=\"line\">12fdf55172df: Pushed</span><br><span class=\"line\">002a63507c1c: Pushed</span><br><span class=\"line\">1c95c77433e8: Pushed</span><br><span class=\"line\">latest: digest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911 size: 948</span><br><span class=\"line\">[root@VM_95_141_centos harbor]#</span><br></pre></td></tr></table></figure></p>\n<h3>4.4 从Harbor中下载镜像</h3>\n<p>从Harbor中下载刚上传的Nginx镜像，可以先删除本地的Nginx镜像。然后再从Harbor中Pull下来。</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]# docker rmi 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">Untagged: 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">Untagged: 193.112.221.230/library/nginx@sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker images</span><br><span class=\"line\">REPOSITORY                     TAG                      IMAGE ID     CREATED     SIZE</span><br><span class=\"line\">wordpress                      latest                   fc03dc56d371 3 days ago  502MB</span><br><span class=\"line\">193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b 9 days ago  126MB</span><br><span class=\"line\">nginx-mei                      v1.0                     5a3221f0137b 9 days ago  126MB</span><br><span class=\"line\">nginx                          latest                   5a3221f0137b 9 days ago  126MB</span><br><span class=\"line\">mysql                          5.6                      732765f8c7d2 11 days ago 257MB</span><br><span class=\"line\">goharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37 2 weeks ago 130MB</span><br><span class=\"line\">goharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e 2 weeks ago 361MB</span><br><span class=\"line\">goharbor/redis-photon          v1.8.2                   18036ee471bc 2 weeks ago 107MB</span><br><span class=\"line\">goharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66 2 weeks ago 164MB</span><br><span class=\"line\">goharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84 2 weeks ago 135MB</span><br><span class=\"line\">goharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32 2 weeks ago 132MB</span><br><span class=\"line\">goharbor/harbor-registryctl    v1.8.2                   ad798fd6e618 2 weeks ago 96.5MB</span><br><span class=\"line\">goharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181 2 weeks ago 81.6MB</span><br><span class=\"line\">goharbor/nginx-photon          v1.8.2                   1592a48daeac 2 weeks ago 36.2MB</span><br><span class=\"line\">goharbor/harbor-log            v1.8.2                   42ad5ef672dd 2 weeks ago 81.8MB</span><br><span class=\"line\">goharbor/harbor-jobservice     v1.8.2                   623ed0095966 2 weeks ago 119MB</span><br><span class=\"line\">goharbor/harbor-core           v1.8.2                   03d6daab10c7 2 weeks ago 135MB</span><br><span class=\"line\">goharbor/harbor-portal         v1.8.2                   41e264a7980b 2 weeks ago 43.2MB</span><br><span class=\"line\">goharbor/harbor-db             v1.8.2                   927ecd68ee1f 2 weeks ago 144MB</span><br><span class=\"line\">goharbor/prepare               v1.8.2                   b0d62cc7683d 2 weeks ago 145MB</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker pull 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">Digest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911</span><br><span class=\"line\">Status: Downloaded newer image for 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">193.112.221.230/library/nginx:latest</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker images</span><br><span class=\"line\">REPOSITORY                     TAG                      IMAGE ID      CREATED     SIZE</span><br><span class=\"line\">wordpress                      latest                   fc03dc56d371  3 days ago  502MB</span><br><span class=\"line\">193.112.221.230/library/nginx  latest                   5a3221f0137b  9 days ago  126MB</span><br><span class=\"line\">193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b  9 days ago  126MB</span><br><span class=\"line\">nginx-mei                      v1.0                     5a3221f0137b  9 days ago  126MB</span><br><span class=\"line\">nginx                          latest                   5a3221f0137b  9 days ago  126MB</span><br><span class=\"line\">mysql                          5.6                      732765f8c7d2  11 days ago 257MB</span><br><span class=\"line\">goharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB</span><br><span class=\"line\">goharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB</span><br><span class=\"line\">goharbor/redis-photon          v1.8.2                   18036ee471bc  2 weeks ago 107MB</span><br><span class=\"line\">goharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB</span><br><span class=\"line\">goharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB</span><br><span class=\"line\">goharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB</span><br><span class=\"line\">goharbor/harbor-registryctl    v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB</span><br><span class=\"line\">goharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB</span><br><span class=\"line\">goharbor/nginx-photon          v1.8.2                   1592a48daeac  2 weeks ago 36.2MB</span><br><span class=\"line\">goharbor/harbor-log            v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB</span><br><span class=\"line\">goharbor/harbor-jobservice     v1.8.2                   623ed0095966  2 weeks ago 119MB</span><br><span class=\"line\">goharbor/harbor-core           v1.8.2                   03d6daab10c7  2 weeks ago 135MB</span><br><span class=\"line\">goharbor/harbor-portal         v1.8.2                   41e264a7980b  2 weeks ago 43.2MB</span><br><span class=\"line\">goharbor/harbor-db             v1.8.2                   927ecd68ee1f  2 weeks ago 144MB</span><br><span class=\"line\">goharbor/prepare               v1.8.2                   b0d62cc7683d  2 weeks ago 145MB</span><br><span class=\"line\">[root@VM_95_141_centos harbor]#</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"length":12030,"excerpt":"","more":"<p>Harbor是VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。使用Harbor可以部署企业自己的私有仓库，将一些核心镜像与软件与外部网络进行隔离与防护。</p>\n<h2>1. 环境准备</h2>\n<p>本次在腾讯云ECS服务器上部署Harbor私有仓库，系统与相关信息如下。</p>\n<p>硬件信息：</p>\n<table>\n<thead>\n<tr>\n<th>资源</th>\n<th>容量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>2 核</td>\n<td>4 CPU is preferred</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>2 GB</td>\n<td>8GB is preferred</td>\n</tr>\n<tr>\n<td>磁盘</td>\n<td>50 GB</td>\n<td>160GB is preferred</td>\n</tr>\n<tr>\n<td>网络</td>\n<td>2 Mbps</td>\n<td>4Mbps is preferred</td>\n</tr>\n</tbody>\n</table>\n<p>软件信息：</p>\n<table>\n<thead>\n<tr>\n<th>软件</th>\n<th>版本</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Centos</td>\n<td>CentOS 7.6 64位</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>Docker</td>\n<td>19.03.1</td>\n<td>官方安装指南 <a href=\"https://docs.docker.com/engine/installation/\" target=\"_blank\" rel=\"noopener\">docker engine doc</a></td>\n</tr>\n<tr>\n<td>Docker Compose</td>\n<td>1.22.0</td>\n<td>官方安装指南 <a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">docker compose doc</a></td>\n</tr>\n<tr>\n<td>Openssl</td>\n<td>OpenSSL 1.0.2k-fips</td>\n<td>为Harbor生成证书与密钥</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：Harbor的所有服务组件都是在Docker中部署的，所以官方安装使用Docker-compose快速部署，因此需要安装Docker、Docker-compose。由于Harbor是基于Docker Registry V2版本，所以就要求Docker版本不小于1.10.0，Docker-compose版本不小于1.6.0。</p>\n</blockquote>\n<h2>2. 安装Docker与Docker-Compose</h2>\n<h3>2.1 安装Docker</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum install -y yum-utils device-mapper-persistent-data lvm2 epel-release</span></span><br><span class=\"line\"><span class=\"comment\"># yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class=\"line\"><span class=\"comment\"># yum install docker-ce</span></span><br></pre></td></tr></table></figure></p>\n<h3>2.2 启动Docker</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># systemctl enable docker</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl start docker</span></span><br><span class=\"line\"><span class=\"comment\"># docker --version</span></span><br></pre></td></tr></table></figure></p>\n<h3>2.3 安装Docker-Compose</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span><br><span class=\"line\"><span class=\"comment\"># chmod +x /usr/local/bin/docker-compose</span></span><br><span class=\"line\"><span class=\"comment\"># docker-compose --version</span></span><br></pre></td></tr></table></figure></p>\n<h3>2.4 配置证书与密钥</h3>\n<p>通过OpenSSL工具生成自签名的证书，后面将用于对请求进行校验。官方指南参考：<a href=\"https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\" target=\"_blank\" rel=\"noopener\"><strong>Configuring Harbor with HTTPS Access</strong></a></p>\n<ul>\n<li>\n<p>首先找到OpenSSL工具配置文件openssl.cnf，对于Centos,目录在/etc/pki/tls/中，编辑openssl.cnf,在[v3_ca]下面添加：subjectAltName = IP:域名|IP地址。如果没有域名填写IP即可。</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ v3_ca ]</span><br><span class=\"line\">subjectAltName = IP:193.112.221.230</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>通过OpenSSL生成证书与密钥</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos data]<span class=\"comment\"># cd /data/ssl</span></span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt</span></span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># ls</span></span><br><span class=\"line\">ca.crt  ca.key</span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># cp ca.crt /etc/pki/ca-trust/source/anchors/</span></span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># update-ca-trust enable</span></span><br><span class=\"line\">[root@VM_95_141_centos ssl]<span class=\"comment\"># update-ca-trust extract</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>将生成的私有证书追加到系统的证书管理文件中。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># cat ssl/ca.crt &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>重启docker, 该步骤一定不要省略，否则有可能加载私钥失败</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\">#systemctl restart docker</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2>3. 安装Harbor</h2>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.2.tgz</span></span><br><span class=\"line\"><span class=\"comment\"># tar xzvf harbor-offline-installer-v1.8.2.tgz</span></span><br><span class=\"line\"><span class=\"comment\"># cd harbor/</span></span><br><span class=\"line\"><span class=\"comment\"># ls</span></span><br></pre></td></tr></table></figure></p>\n<p>下载离线安装包，解压后可以看到里面包含了如下文件：</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]# ls</span><br><span class=\"line\">harbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>harbor.v1.8.2.tar.gz</code>是软件包，<code>harbor.yml</code>是配置文件，<code>install.sh</code>是安装脚本，<code>prepare</code>是准备配置Harbor环境脚本。需要修改<code>harbor.yml</code>如下字段进行配置。</p>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hostname:</span> <span class=\"number\">193.112</span><span class=\"number\">.221</span><span class=\"number\">.230</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http related config</span></span><br><span class=\"line\"><span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"comment\"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https related config</span></span><br><span class=\"line\"><span class=\"attr\">https:</span></span><br><span class=\"line\">  <span class=\"comment\"># https port for harbor, default is 443</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">  <span class=\"comment\"># The path of cert and key files for nginx</span></span><br><span class=\"line\">  <span class=\"attr\">certificate:</span> <span class=\"string\">/data/ssl/ca.crt</span></span><br><span class=\"line\">  <span class=\"attr\">private_key:</span> <span class=\"string\">/data/ssl/ca.key</span></span><br></pre></td></tr></table></figure></p>\n<p>然后先后执行<code>prepare</code>与<code>install.sh</code>进行配置与安装。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># ./prepare</span></span><br><span class=\"line\">prepare base dir is <span class=\"built_in\">set</span> to /root/harbor</span><br><span class=\"line\">Generated configuration file: /config/<span class=\"built_in\">log</span>/logrotate.conf</span><br><span class=\"line\">Generated configuration file: /config/nginx/nginx.conf</span><br><span class=\"line\">Generated configuration file: /config/core/env</span><br><span class=\"line\">Generated configuration file: /config/core/app.conf</span><br><span class=\"line\">Generated configuration file: /config/registry/config.yml</span><br><span class=\"line\">Generated configuration file: /config/registryctl/env</span><br><span class=\"line\">Generated configuration file: /config/db/env</span><br><span class=\"line\">Generated configuration file: /config/jobservice/env</span><br><span class=\"line\">Generated configuration file: /config/jobservice/config.yml</span><br><span class=\"line\">loaded secret from file: /secret/keys/secretkey</span><br><span class=\"line\">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class=\"line\">Clean up the input dir</span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">total 564668</span><br><span class=\"line\">drwxr-xr-x 3 root root      4096 Aug 24 23:09 common</span><br><span class=\"line\">-rw-r--r-- 1 root root      5377 Aug 24 23:09 docker-compose.yml</span><br><span class=\"line\">-rw-r--r-- 1 root root 578167000 Aug  8 15:51 harbor.v1.8.2.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root      4494 Aug 24 23:08 harbor.yml</span><br><span class=\"line\">-rwxr-xr-x 1 root root      5088 Aug  8 15:51 install.sh</span><br><span class=\"line\">-rw-r--r-- 1 root root     11347 Aug  8 15:51 LICENSE</span><br><span class=\"line\">-rwxr-xr-x 1 root root      1654 Aug  8 15:51 prepare</span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># vi docker-compose.yml</span></span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># ./install.sh</span></span><br></pre></td></tr></table></figure></p>\n<p>一般都会安装成功。</p>\n<h2>4. 操作Harbor</h2>\n<p>Harbor安装成功后，如下图示。我们可以对齐进行启动、停止、修改、上传镜像、下载镜像等操作。\n<img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/harbor.jpg\" alt=\"Harbor\"></p>\n<h3>4.1 查看Harbor</h3>\n<p>可以通过<code>docker ps</code>命令查询当前有哪些docker实例在运行。查询Harbor是否正常运行还可以查询docker-compose运行状态。需要进入Harbor所在目录，执行<code>docker-compose ps</code>。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># docker-compose ps</span></span><br><span class=\"line\">Name                 Command                  State                        Ports</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\">harbor-core         /harbor/start.sh                 Up (healthy)</span><br><span class=\"line\">harbor-db           /entrypoint.sh postgres          Up (healthy)   5432/tcp</span><br><span class=\"line\">harbor-jobservice   /harbor/start.sh                 Up</span><br><span class=\"line\">harbor-log          /bin/sh -c /usr/<span class=\"built_in\">local</span>/bin/ ...   Up (healthy)   127.0.0.1:1514-&gt;10514/tcp</span><br><span class=\"line\">harbor-portal       nginx -g daemon off;             Up (healthy)   80/tcp</span><br><span class=\"line\">nginx               nginx -g daemon off;             Up (healthy)   0.0.0.0:443-&gt;443/tcp, 0.0.0.0:80-&gt;80/tcp</span><br><span class=\"line\">redis               docker-entrypoint.sh redis ...   Up             6379/tcp</span><br><span class=\"line\">registry            /entrypoint.sh /etc/regist ...   Up (healthy)   5000/tcp</span><br><span class=\"line\">registryctl         /harbor/start.sh                 Up (healthy)</span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<h3>4.2 停止与重启Harbor</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># cd harbor</span></span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># ls</span></span><br><span class=\"line\">common  docker-compose.yml  harbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare</span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># docker-compose stop</span></span><br><span class=\"line\">Stopping nginx             ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-portal     ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-jobservice ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-core       ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping registryctl       ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping redis             ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping registry          ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-db         ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Stopping harbor-log        ... <span class=\"keyword\">done</span></span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># docker-compose start</span></span><br><span class=\"line\">Starting <span class=\"built_in\">log</span>         ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting registry    ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting registryctl ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting postgresql  ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting core        ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting portal      ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting redis       ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting jobservice  ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting proxy       ... <span class=\"keyword\">done</span></span><br><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<p>如果需要修改Harbor的配置，可以先停止Harbor实例，更新 <code>harbor.yml</code>文件，再执行 <code>prepare</code> 脚本重新构建配置，最终启动Harbor实例:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># docker-compose down -v</span></span><br><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># vim harbor.yml</span></span><br><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># prepare</span></span><br><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># docker-compose up -d</span></span><br></pre></td></tr></table></figure></p>\n<p>清除Harbor实例的时候会保持镜像数据与数据库在系统中：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># docker-compose down -v</span></span><br></pre></td></tr></table></figure></p>\n<p>删除Harbor数据库与镜像数据 (如果需要重新安装):</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># rm -r /data/database</span></span><br><span class=\"line\">[root@VM_95_141_centos ~]<span class=\"comment\"># rm -r /data/registry</span></span><br></pre></td></tr></table></figure></p>\n<h3>4.3 上传镜像到Harbor</h3>\n<p>查看当前镜像:<code>docker images</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY                      TAG                       IMAGE ID      C   REATED      SIZE</span><br><span class=\"line\">goharbor/chartmuseum-photon     v0.9.0-v1.8.2             e72f3e685a37  2   weeks ago  130MB</span><br><span class=\"line\">goharbor/harbor-migrator        v1.8.2                    c11a64ae3a1e  2   weeks ago  361MB</span><br><span class=\"line\">goharbor/redis-photon           v1.8.2                    18036ee471bc  2   weeks ago  107MB</span><br><span class=\"line\">goharbor/clair-photon           v2.0.8-v1.8.2             68de68a40e66  2   weeks ago  164MB</span><br><span class=\"line\">goharbor/notary-server-photon   v0.6.1-v1.8.2             90cf28ef3a84  2   weeks ago  135MB</span><br><span class=\"line\">goharbor/notary-signer-photon   v0.6.1-v1.8.2             e9b49ea8ed32  2   weeks ago  132MB</span><br><span class=\"line\">goharbor/harbor-registryctl     v1.8.2                    ad798fd6e618  2   weeks ago  96.5MB</span><br><span class=\"line\">goharbor/registry-photon        v2.7.1-patch-2819-v1.8.2  081bfb3dc181  2   weeks ago  81.6MB</span><br><span class=\"line\">goharbor/nginx-photon           v1.8.2                    1592a48daeac  2   weeks ago  36.2MB</span><br><span class=\"line\">goharbor/harbor-log             v1.8.2                    42ad5ef672dd  2   weeks ago  81.8MB</span><br><span class=\"line\">goharbor/harbor-jobservice      v1.8.2                    623ed0095966  2   weeks ago  119MB</span><br><span class=\"line\">goharbor/harbor-core            v1.8.2                    03d6daab10c7  2   weeks ago  135MB</span><br><span class=\"line\">goharbor/harbor-portal          v1.8.2                    41e264a7980b  2   weeks ago  43.2MB</span><br><span class=\"line\">goharbor/harbor-db              v1.8.2                    927ecd68ee1f  2   weeks ago  144MB</span><br><span class=\"line\">goharbor/prepare                v1.8.2                    b0d62cc7683d  2   weeks ago  145MB</span><br></pre></td></tr></table></figure></p>\n<p>从Docker hub上下载一个最新的Nginx镜像:<code>docker pull nginx</code>：</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]# docker pull nginx</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">1ab2bdfe9778: Pull complete</span><br><span class=\"line\">a17e64cfe253: Pull complete</span><br><span class=\"line\">e1288088c7a8: Pull complete</span><br><span class=\"line\">Digest: sha256:53ddb41e46de3d63376579acf46f9a41a8d7de33645db47a486de9769201fec9</span><br><span class=\"line\">Status: Downloaded newer image for nginx:latest</span><br><span class=\"line\">docker.io/library/nginx:latest</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker images</span><br><span class=\"line\">REPOSITORY                    TAG                      IMAGE ID      CREATED     SIZE</span><br><span class=\"line\">nginx                         latest                   5a3221f0137b  8 days ago  126MB</span><br><span class=\"line\">goharbor/chartmuseum-photon   v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB</span><br><span class=\"line\">goharbor/harbor-migrator      v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB</span><br><span class=\"line\">goharbor/redis-photon         v1.8.2                   18036ee471bc  2 weeks ago 107MB</span><br><span class=\"line\">goharbor/clair-photon         v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB</span><br><span class=\"line\">goharbor/notary-server-photon v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB</span><br><span class=\"line\">goharbor/notary-signer-photon v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB</span><br><span class=\"line\">goharbor/harbor-registryctl   v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB</span><br><span class=\"line\">goharbor/registry-photon      v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB</span><br><span class=\"line\">goharbor/nginx-photon         v1.8.2                   1592a48daeac  2 weeks ago 36.2MB</span><br><span class=\"line\">goharbor/harbor-log           v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB</span><br><span class=\"line\">goharbor/harbor-jobservice    v1.8.2                   623ed0095966  2 weeks ago 119MB</span><br><span class=\"line\">goharbor/harbor-core          v1.8.2                   03d6daab10c7  2 weeks ago 135MB</span><br><span class=\"line\">goharbor/harbor-portal        v1.8.2                   41e264a7980b  2 weeks ago 43.2MB</span><br><span class=\"line\">goharbor/harbor-db            v1.8.2                   927ecd68ee1f  2 weeks ago 144MB</span><br><span class=\"line\">goharbor/prepare              v1.8.2                   b0d62cc7683d  2 weeks ago 145MB</span><br></pre></td></tr></table></figure></p>\n<p>给Nginx镜像打上新标签，push到Harbor:</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]# docker tag nginx-mei:v1.0 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker login 193.112.221.230 -uadmin -pHarbor12345</span><br><span class=\"line\">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker push 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">The push refers to repository [193.112.221.230/library/nginx]</span><br><span class=\"line\">12fdf55172df: Pushed</span><br><span class=\"line\">002a63507c1c: Pushed</span><br><span class=\"line\">1c95c77433e8: Pushed</span><br><span class=\"line\">latest: digest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911 size: 948</span><br><span class=\"line\">[root@VM_95_141_centos harbor]#</span><br></pre></td></tr></table></figure></p>\n<h3>4.4 从Harbor中下载镜像</h3>\n<p>从Harbor中下载刚上传的Nginx镜像，可以先删除本地的Nginx镜像。然后再从Harbor中Pull下来。</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_95_141_centos harbor]# docker rmi 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">Untagged: 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">Untagged: 193.112.221.230/library/nginx@sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker images</span><br><span class=\"line\">REPOSITORY                     TAG                      IMAGE ID     CREATED     SIZE</span><br><span class=\"line\">wordpress                      latest                   fc03dc56d371 3 days ago  502MB</span><br><span class=\"line\">193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b 9 days ago  126MB</span><br><span class=\"line\">nginx-mei                      v1.0                     5a3221f0137b 9 days ago  126MB</span><br><span class=\"line\">nginx                          latest                   5a3221f0137b 9 days ago  126MB</span><br><span class=\"line\">mysql                          5.6                      732765f8c7d2 11 days ago 257MB</span><br><span class=\"line\">goharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37 2 weeks ago 130MB</span><br><span class=\"line\">goharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e 2 weeks ago 361MB</span><br><span class=\"line\">goharbor/redis-photon          v1.8.2                   18036ee471bc 2 weeks ago 107MB</span><br><span class=\"line\">goharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66 2 weeks ago 164MB</span><br><span class=\"line\">goharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84 2 weeks ago 135MB</span><br><span class=\"line\">goharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32 2 weeks ago 132MB</span><br><span class=\"line\">goharbor/harbor-registryctl    v1.8.2                   ad798fd6e618 2 weeks ago 96.5MB</span><br><span class=\"line\">goharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181 2 weeks ago 81.6MB</span><br><span class=\"line\">goharbor/nginx-photon          v1.8.2                   1592a48daeac 2 weeks ago 36.2MB</span><br><span class=\"line\">goharbor/harbor-log            v1.8.2                   42ad5ef672dd 2 weeks ago 81.8MB</span><br><span class=\"line\">goharbor/harbor-jobservice     v1.8.2                   623ed0095966 2 weeks ago 119MB</span><br><span class=\"line\">goharbor/harbor-core           v1.8.2                   03d6daab10c7 2 weeks ago 135MB</span><br><span class=\"line\">goharbor/harbor-portal         v1.8.2                   41e264a7980b 2 weeks ago 43.2MB</span><br><span class=\"line\">goharbor/harbor-db             v1.8.2                   927ecd68ee1f 2 weeks ago 144MB</span><br><span class=\"line\">goharbor/prepare               v1.8.2                   b0d62cc7683d 2 weeks ago 145MB</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker pull 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">Digest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911</span><br><span class=\"line\">Status: Downloaded newer image for 193.112.221.230/library/nginx:latest</span><br><span class=\"line\">193.112.221.230/library/nginx:latest</span><br><span class=\"line\">[root@VM_95_141_centos harbor]# docker images</span><br><span class=\"line\">REPOSITORY                     TAG                      IMAGE ID      CREATED     SIZE</span><br><span class=\"line\">wordpress                      latest                   fc03dc56d371  3 days ago  502MB</span><br><span class=\"line\">193.112.221.230/library/nginx  latest                   5a3221f0137b  9 days ago  126MB</span><br><span class=\"line\">193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b  9 days ago  126MB</span><br><span class=\"line\">nginx-mei                      v1.0                     5a3221f0137b  9 days ago  126MB</span><br><span class=\"line\">nginx                          latest                   5a3221f0137b  9 days ago  126MB</span><br><span class=\"line\">mysql                          5.6                      732765f8c7d2  11 days ago 257MB</span><br><span class=\"line\">goharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB</span><br><span class=\"line\">goharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB</span><br><span class=\"line\">goharbor/redis-photon          v1.8.2                   18036ee471bc  2 weeks ago 107MB</span><br><span class=\"line\">goharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB</span><br><span class=\"line\">goharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB</span><br><span class=\"line\">goharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB</span><br><span class=\"line\">goharbor/harbor-registryctl    v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB</span><br><span class=\"line\">goharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB</span><br><span class=\"line\">goharbor/nginx-photon          v1.8.2                   1592a48daeac  2 weeks ago 36.2MB</span><br><span class=\"line\">goharbor/harbor-log            v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB</span><br><span class=\"line\">goharbor/harbor-jobservice     v1.8.2                   623ed0095966  2 weeks ago 119MB</span><br><span class=\"line\">goharbor/harbor-core           v1.8.2                   03d6daab10c7  2 weeks ago 135MB</span><br><span class=\"line\">goharbor/harbor-portal         v1.8.2                   41e264a7980b  2 weeks ago 43.2MB</span><br><span class=\"line\">goharbor/harbor-db             v1.8.2                   927ecd68ee1f  2 weeks ago 144MB</span><br><span class=\"line\">goharbor/prepare               v1.8.2                   b0d62cc7683d  2 weeks ago 145MB</span><br><span class=\"line\">[root@VM_95_141_centos harbor]#</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Windows下修改Mysql密码","date":"2018-07-21T03:27:51.000Z","description":"之前在Windows上装过一次Mysql学习，后来由于电脑原因卸载了，这次重新安装后，发现在配置过程中失败，退出配置后直接登录也不行，多次查询之后才知道原来是因为很久之前安装的mysql的密码与这次安装的密码不一致导致的，可是，过了这么久天知道我当时设置的啥密码啊。。。好吧，那就重置吧。","_content":"\n之前在Windows上装过一次Mysql学习，后来由于电脑原因卸载了，这次重新安装后，发现在配置过程中失败，退出配置后直接登录也不行，多次查询之后才知道原来是因为很久之前安装的mysql的密码与这次安装的密码不一致导致的，可是，过了这么久天知道我当时设置的啥密码啊。。。好吧，那就重置吧。\n\n- 环境： Windows 10\n- Mysql 版本： mysql community 5.7.21.0\n- CMD： 系统自带cmd，管理员权限\n\n## 1. 重置步骤\n\n### 1.1 停止mysql服务\n\n使用管理员权限cmd执行下面命令停止服务\n\n```powershell\n# net stop mysql57\n```\n\n### 1.2 配置mysql跳过安全检查\n\n```powershell\n#cmd 1:\n#my.ini为配置文件\nmysqld --defaults-file=\"C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini\" --console --skip-grant-tables\n```\n\n### 1.3 重置密码\n\n```powershell\n#cmd 2: 使用管理员权限打开另外一个cmd窗口，由于上面的cmd1窗口在运行着，所以我们可以不用输入密码进行登录\n>mysql -u root\n#修改mysql数据库中的表user，给user表中的root账号修改密码\n$mysql> use mysql;\n#注意新版本需要使用authentication_string修改密码\n$mysql> update user set authentication_string=password(\"abcdefg123\") where user='root';\n#刷新表\n$mysql> flush privileges;\n```\n\n### 1.4 关闭mysqld进程\n\n关闭两个cmd窗口，Ctrl+Shift+Esc打开任务管理器找到mysqld的进程，将其杀死。\n\n### 1.5 重新启动mysql服务： \n\n打开计算管理——>服务与应用程序—->服务—>mysql，启动服务。\n\n### 1.6 登录mysql\n\n```powershell\n#执行下面命令，输入密码即可登录\n> mysql -u root -p\n```\n","source":"_posts/how-to-modify-mysql-password-in-windows.md","raw":"---\ntitle: Windows下修改Mysql密码\ndate: 2018-07-21 11:27:51\ncategories: \n\t- sql\n\t- mysql\ndescription: 之前在Windows上装过一次Mysql学习，后来由于电脑原因卸载了，这次重新安装后，发现在配置过程中失败，退出配置后直接登录也不行，多次查询之后才知道原来是因为很久之前安装的mysql的密码与这次安装的密码不一致导致的，可是，过了这么久天知道我当时设置的啥密码啊。。。好吧，那就重置吧。\ntags:\n     - Mysql\n---\n\n之前在Windows上装过一次Mysql学习，后来由于电脑原因卸载了，这次重新安装后，发现在配置过程中失败，退出配置后直接登录也不行，多次查询之后才知道原来是因为很久之前安装的mysql的密码与这次安装的密码不一致导致的，可是，过了这么久天知道我当时设置的啥密码啊。。。好吧，那就重置吧。\n\n- 环境： Windows 10\n- Mysql 版本： mysql community 5.7.21.0\n- CMD： 系统自带cmd，管理员权限\n\n## 1. 重置步骤\n\n### 1.1 停止mysql服务\n\n使用管理员权限cmd执行下面命令停止服务\n\n```powershell\n# net stop mysql57\n```\n\n### 1.2 配置mysql跳过安全检查\n\n```powershell\n#cmd 1:\n#my.ini为配置文件\nmysqld --defaults-file=\"C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini\" --console --skip-grant-tables\n```\n\n### 1.3 重置密码\n\n```powershell\n#cmd 2: 使用管理员权限打开另外一个cmd窗口，由于上面的cmd1窗口在运行着，所以我们可以不用输入密码进行登录\n>mysql -u root\n#修改mysql数据库中的表user，给user表中的root账号修改密码\n$mysql> use mysql;\n#注意新版本需要使用authentication_string修改密码\n$mysql> update user set authentication_string=password(\"abcdefg123\") where user='root';\n#刷新表\n$mysql> flush privileges;\n```\n\n### 1.4 关闭mysqld进程\n\n关闭两个cmd窗口，Ctrl+Shift+Esc打开任务管理器找到mysqld的进程，将其杀死。\n\n### 1.5 重新启动mysql服务： \n\n打开计算管理——>服务与应用程序—->服务—>mysql，启动服务。\n\n### 1.6 登录mysql\n\n```powershell\n#执行下面命令，输入密码即可登录\n> mysql -u root -p\n```\n","slug":"how-to-modify-mysql-password-in-windows","published":1,"updated":"2020-10-08T08:19:16.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg3hj9il0008zcib0ion9i76","content":"<p>之前在Windows上装过一次Mysql学习，后来由于电脑原因卸载了，这次重新安装后，发现在配置过程中失败，退出配置后直接登录也不行，多次查询之后才知道原来是因为很久之前安装的mysql的密码与这次安装的密码不一致导致的，可是，过了这么久天知道我当时设置的啥密码啊。。。好吧，那就重置吧。</p>\n<ul>\n<li>环境： Windows 10</li>\n<li>Mysql 版本： mysql community 5.7.21.0</li>\n<li>CMD： 系统自带cmd，管理员权限</li>\n</ul>\n<h2>1. 重置步骤</h2>\n<h3>1.1 停止mysql服务</h3>\n<p>使用管理员权限cmd执行下面命令停止服务</p>\n<p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># net stop mysql57</span></span><br></pre></td></tr></table></figure></p>\n<h3>1.2 配置mysql跳过安全检查</h3>\n<p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cmd 1:</span></span><br><span class=\"line\"><span class=\"comment\">#my.ini为配置文件</span></span><br><span class=\"line\">mysqld -<span class=\"literal\">-defaults</span><span class=\"operator\">-file</span>=<span class=\"string\">\"C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini\"</span> -<span class=\"literal\">-console</span> -<span class=\"literal\">-skip</span><span class=\"literal\">-grant</span><span class=\"literal\">-tables</span></span><br></pre></td></tr></table></figure></p>\n<h3>1.3 重置密码</h3>\n<p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cmd 2: 使用管理员权限打开另外一个cmd窗口，由于上面的cmd1窗口在运行着，所以我们可以不用输入密码进行登录</span></span><br><span class=\"line\">&gt;mysql <span class=\"literal\">-u</span> root</span><br><span class=\"line\"><span class=\"comment\">#修改mysql数据库中的表user，给user表中的root账号修改密码</span></span><br><span class=\"line\"><span class=\"variable\">$mysql</span>&gt; use mysql;</span><br><span class=\"line\"><span class=\"comment\">#注意新版本需要使用authentication_string修改密码</span></span><br><span class=\"line\"><span class=\"variable\">$mysql</span>&gt; update user set authentication_string=password(<span class=\"string\">\"abcdefg123\"</span>) where user=<span class=\"string\">'root'</span>;</span><br><span class=\"line\"><span class=\"comment\">#刷新表</span></span><br><span class=\"line\"><span class=\"variable\">$mysql</span>&gt; flush privileges;</span><br></pre></td></tr></table></figure></p>\n<h3>1.4 关闭mysqld进程</h3>\n<p>关闭两个cmd窗口，Ctrl+Shift+Esc打开任务管理器找到mysqld的进程，将其杀死。</p>\n<h3>1.5 重新启动mysql服务：</h3>\n<p>打开计算管理——&gt;服务与应用程序—-&gt;服务—&gt;mysql，启动服务。</p>\n<h3>1.6 登录mysql</h3>\n<p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#执行下面命令，输入密码即可登录</span></span><br><span class=\"line\">&gt; mysql <span class=\"literal\">-u</span> root <span class=\"literal\">-p</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"length":844,"excerpt":"","more":"<p>之前在Windows上装过一次Mysql学习，后来由于电脑原因卸载了，这次重新安装后，发现在配置过程中失败，退出配置后直接登录也不行，多次查询之后才知道原来是因为很久之前安装的mysql的密码与这次安装的密码不一致导致的，可是，过了这么久天知道我当时设置的啥密码啊。。。好吧，那就重置吧。</p>\n<ul>\n<li>环境： Windows 10</li>\n<li>Mysql 版本： mysql community 5.7.21.0</li>\n<li>CMD： 系统自带cmd，管理员权限</li>\n</ul>\n<h2>1. 重置步骤</h2>\n<h3>1.1 停止mysql服务</h3>\n<p>使用管理员权限cmd执行下面命令停止服务</p>\n<p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># net stop mysql57</span></span><br></pre></td></tr></table></figure></p>\n<h3>1.2 配置mysql跳过安全检查</h3>\n<p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cmd 1:</span></span><br><span class=\"line\"><span class=\"comment\">#my.ini为配置文件</span></span><br><span class=\"line\">mysqld -<span class=\"literal\">-defaults</span><span class=\"operator\">-file</span>=<span class=\"string\">\"C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini\"</span> -<span class=\"literal\">-console</span> -<span class=\"literal\">-skip</span><span class=\"literal\">-grant</span><span class=\"literal\">-tables</span></span><br></pre></td></tr></table></figure></p>\n<h3>1.3 重置密码</h3>\n<p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cmd 2: 使用管理员权限打开另外一个cmd窗口，由于上面的cmd1窗口在运行着，所以我们可以不用输入密码进行登录</span></span><br><span class=\"line\">&gt;mysql <span class=\"literal\">-u</span> root</span><br><span class=\"line\"><span class=\"comment\">#修改mysql数据库中的表user，给user表中的root账号修改密码</span></span><br><span class=\"line\"><span class=\"variable\">$mysql</span>&gt; use mysql;</span><br><span class=\"line\"><span class=\"comment\">#注意新版本需要使用authentication_string修改密码</span></span><br><span class=\"line\"><span class=\"variable\">$mysql</span>&gt; update user set authentication_string=password(<span class=\"string\">\"abcdefg123\"</span>) where user=<span class=\"string\">'root'</span>;</span><br><span class=\"line\"><span class=\"comment\">#刷新表</span></span><br><span class=\"line\"><span class=\"variable\">$mysql</span>&gt; flush privileges;</span><br></pre></td></tr></table></figure></p>\n<h3>1.4 关闭mysqld进程</h3>\n<p>关闭两个cmd窗口，Ctrl+Shift+Esc打开任务管理器找到mysqld的进程，将其杀死。</p>\n<h3>1.5 重新启动mysql服务：</h3>\n<p>打开计算管理——&gt;服务与应用程序—-&gt;服务—&gt;mysql，启动服务。</p>\n<h3>1.6 登录mysql</h3>\n<p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#执行下面命令，输入密码即可登录</span></span><br><span class=\"line\">&gt; mysql <span class=\"literal\">-u</span> root <span class=\"literal\">-p</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"使用Python解析Kindle中的标记文件","date":"2017-03-19T04:26:30.000Z","description":"以前我们好不容易买了一本原版英文书，硬着头皮看下去，几分钟后就昏昏欲睡，因为太多单词不认识，看几页后就没办法进入状态。现在很多人开始使用Kindle阅读英文原版书，其内置词典（当然你也可以添加自己的词典），可以很方便地就可以查出单词释义了。当然并不推荐每遇到不认识的单词就查，这样也及其容易疲劳，之前看过奶爸的《把你的英语用起来》里面提到的透析法，其阅读原著技巧总结起来就是：每天阅读定量（如20页）的原版书籍，阅读一页查阅2个单词左右，每天积累一定的单词并且重复学习，这样避免一直在记单词的梗中，又能体会阅读原著的乐趣，确实是一个很好的办法。","_content":"\n以前我们好不容易买了一本原版英文书，硬着头皮看下去，几分钟后就昏昏欲睡，因为太多单词不认识，看几页后就没办法进入状态。现在很多人开始使用Kindle阅读英文原版书，其内置词典（当然你也可以添加自己的词典），可以很方便地就可以查出单词释义了。当然并不推荐每遇到不认识的单词就查，这样也及其容易疲劳，之前看过奶爸的《把你的英语用起来》里面提到的透析法，其阅读原著技巧总结起来就是：每天阅读定量（如20页）的原版书籍，阅读一页查阅2个单词左右，每天积累一定的单词并且重复学习，这样避免一直在记单词的梗中，又能体会阅读原著的乐趣，确实是一个很好的办法。\n\n但是这样也有一个弊端，每天需要花费大量的时间整理Kindle上的标记的单词与例句，用于后续学习与复习。去年在听读Harry Potter的时候就遇到这种情况，如果我花费**1小时**练习听音频，会花费**1.5小时**阅读，然后至少需要花费**2小时**查询单词，整理单词、语句与输出总结，这当然是我所不能接受的，都说需要把时间浪费在美好的事物上的么。\n\n所以最终在经过探索使用Python写出了这个小工具，经过最新更新基本实现了如下几点功能：\n\n1. 将在Kindle阅读器上标记的单词与语句输出为Markdown表格文件。\n2. 单词自动查询释义，将从网易有道词典网站查获的结果保存存于表格中。\n3. 将Kindle中标记的单词与语句自动关联，整理输出最终表格。\n\n使用示例：\n## 1. 准备工作\n1. 在Kindle上阅读Harry Potter原著，对不认识的单词与语句进行标记，最终会在Kindle的根目录下生成My Clippings.txt文件。\n2. 将该文件导出到电脑,重新命名为My_Clippings.txt,主要是为了去掉文件名的空格\n\n## 2. 运行程序\n\n```bash\n$ python3 main.py --prefix=static -t 2017-2-25 -i My_Clippings.txt -o words_chapters_9.md\n```\n\n> 参数说明：\n>\n> - --prefix为指定源目录为static,当然也可以指定别的目录,但是需要将My_Clippings.txt文件将其移动到相应目录里\n> - -t 为选择时间\n> - -i 为指定输入源文件,即目录中的txt文件\n> - -o 为指定输出源文件,即输出的markdown文件\n>\n\n\n![kindle-python](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/python-kindle.gif)\n\n源码开源在[github](https://github.com/wowmarcomei/kindle_notes_export)，欢迎star与使用。\n\n","source":"_posts/parse-the-kindle-markup-files-by-using-python.md","raw":"---\ntitle: 使用Python解析Kindle中的标记文件\ndate: 2017-03-19 12:26:30\ncategories: \n\t- python\ndescription: 以前我们好不容易买了一本原版英文书，硬着头皮看下去，几分钟后就昏昏欲睡，因为太多单词不认识，看几页后就没办法进入状态。现在很多人开始使用Kindle阅读英文原版书，其内置词典（当然你也可以添加自己的词典），可以很方便地就可以查出单词释义了。当然并不推荐每遇到不认识的单词就查，这样也及其容易疲劳，之前看过奶爸的《把你的英语用起来》里面提到的透析法，其阅读原著技巧总结起来就是：每天阅读定量（如20页）的原版书籍，阅读一页查阅2个单词左右，每天积累一定的单词并且重复学习，这样避免一直在记单词的梗中，又能体会阅读原著的乐趣，确实是一个很好的办法。\ntags: \n    - Python\n    - Kindle\n---\n\n以前我们好不容易买了一本原版英文书，硬着头皮看下去，几分钟后就昏昏欲睡，因为太多单词不认识，看几页后就没办法进入状态。现在很多人开始使用Kindle阅读英文原版书，其内置词典（当然你也可以添加自己的词典），可以很方便地就可以查出单词释义了。当然并不推荐每遇到不认识的单词就查，这样也及其容易疲劳，之前看过奶爸的《把你的英语用起来》里面提到的透析法，其阅读原著技巧总结起来就是：每天阅读定量（如20页）的原版书籍，阅读一页查阅2个单词左右，每天积累一定的单词并且重复学习，这样避免一直在记单词的梗中，又能体会阅读原著的乐趣，确实是一个很好的办法。\n\n但是这样也有一个弊端，每天需要花费大量的时间整理Kindle上的标记的单词与例句，用于后续学习与复习。去年在听读Harry Potter的时候就遇到这种情况，如果我花费**1小时**练习听音频，会花费**1.5小时**阅读，然后至少需要花费**2小时**查询单词，整理单词、语句与输出总结，这当然是我所不能接受的，都说需要把时间浪费在美好的事物上的么。\n\n所以最终在经过探索使用Python写出了这个小工具，经过最新更新基本实现了如下几点功能：\n\n1. 将在Kindle阅读器上标记的单词与语句输出为Markdown表格文件。\n2. 单词自动查询释义，将从网易有道词典网站查获的结果保存存于表格中。\n3. 将Kindle中标记的单词与语句自动关联，整理输出最终表格。\n\n使用示例：\n## 1. 准备工作\n1. 在Kindle上阅读Harry Potter原著，对不认识的单词与语句进行标记，最终会在Kindle的根目录下生成My Clippings.txt文件。\n2. 将该文件导出到电脑,重新命名为My_Clippings.txt,主要是为了去掉文件名的空格\n\n## 2. 运行程序\n\n```bash\n$ python3 main.py --prefix=static -t 2017-2-25 -i My_Clippings.txt -o words_chapters_9.md\n```\n\n> 参数说明：\n>\n> - --prefix为指定源目录为static,当然也可以指定别的目录,但是需要将My_Clippings.txt文件将其移动到相应目录里\n> - -t 为选择时间\n> - -i 为指定输入源文件,即目录中的txt文件\n> - -o 为指定输出源文件,即输出的markdown文件\n>\n\n\n![kindle-python](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/python-kindle.gif)\n\n源码开源在[github](https://github.com/wowmarcomei/kindle_notes_export)，欢迎star与使用。\n\n","slug":"parse-the-kindle-markup-files-by-using-python","published":1,"updated":"2020-10-08T08:17:17.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg3hj9im0009zcib842vsaci","content":"<p>以前我们好不容易买了一本原版英文书，硬着头皮看下去，几分钟后就昏昏欲睡，因为太多单词不认识，看几页后就没办法进入状态。现在很多人开始使用Kindle阅读英文原版书，其内置词典（当然你也可以添加自己的词典），可以很方便地就可以查出单词释义了。当然并不推荐每遇到不认识的单词就查，这样也及其容易疲劳，之前看过奶爸的《把你的英语用起来》里面提到的透析法，其阅读原著技巧总结起来就是：每天阅读定量（如20页）的原版书籍，阅读一页查阅2个单词左右，每天积累一定的单词并且重复学习，这样避免一直在记单词的梗中，又能体会阅读原著的乐趣，确实是一个很好的办法。</p>\n<p>但是这样也有一个弊端，每天需要花费大量的时间整理Kindle上的标记的单词与例句，用于后续学习与复习。去年在听读Harry Potter的时候就遇到这种情况，如果我花费<strong>1小时</strong>练习听音频，会花费<strong>1.5小时</strong>阅读，然后至少需要花费<strong>2小时</strong>查询单词，整理单词、语句与输出总结，这当然是我所不能接受的，都说需要把时间浪费在美好的事物上的么。</p>\n<p>所以最终在经过探索使用Python写出了这个小工具，经过最新更新基本实现了如下几点功能：</p>\n<ol>\n<li>将在Kindle阅读器上标记的单词与语句输出为Markdown表格文件。</li>\n<li>单词自动查询释义，将从网易有道词典网站查获的结果保存存于表格中。</li>\n<li>将Kindle中标记的单词与语句自动关联，整理输出最终表格。</li>\n</ol>\n<p>使用示例：</p>\n<h2>1. 准备工作</h2>\n<ol>\n<li>在Kindle上阅读Harry Potter原著，对不认识的单词与语句进行标记，最终会在Kindle的根目录下生成My Clippings.txt文件。</li>\n<li>将该文件导出到电脑,重新命名为My_Clippings.txt,主要是为了去掉文件名的空格</li>\n</ol>\n<h2>2. 运行程序</h2>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 main.py --prefix=static -t 2017-2-25 -i My_Clippings.txt -o words_chapters_9.md</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>参数说明：</p>\n<ul>\n<li>--prefix为指定源目录为static,当然也可以指定别的目录,但是需要将My_Clippings.txt文件将其移动到相应目录里</li>\n<li>-t 为选择时间</li>\n<li>-i 为指定输入源文件,即目录中的txt文件</li>\n<li>-o 为指定输出源文件,即输出的markdown文件</li>\n</ul>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/python-kindle.gif\" alt=\"kindle-python\"></p>\n<p>源码开源在<a href=\"https://github.com/wowmarcomei/kindle_notes_export\" target=\"_blank\" rel=\"noopener\">github</a>，欢迎star与使用。</p>\n","site":{"data":{}},"length":941,"excerpt":"","more":"<p>以前我们好不容易买了一本原版英文书，硬着头皮看下去，几分钟后就昏昏欲睡，因为太多单词不认识，看几页后就没办法进入状态。现在很多人开始使用Kindle阅读英文原版书，其内置词典（当然你也可以添加自己的词典），可以很方便地就可以查出单词释义了。当然并不推荐每遇到不认识的单词就查，这样也及其容易疲劳，之前看过奶爸的《把你的英语用起来》里面提到的透析法，其阅读原著技巧总结起来就是：每天阅读定量（如20页）的原版书籍，阅读一页查阅2个单词左右，每天积累一定的单词并且重复学习，这样避免一直在记单词的梗中，又能体会阅读原著的乐趣，确实是一个很好的办法。</p>\n<p>但是这样也有一个弊端，每天需要花费大量的时间整理Kindle上的标记的单词与例句，用于后续学习与复习。去年在听读Harry Potter的时候就遇到这种情况，如果我花费<strong>1小时</strong>练习听音频，会花费<strong>1.5小时</strong>阅读，然后至少需要花费<strong>2小时</strong>查询单词，整理单词、语句与输出总结，这当然是我所不能接受的，都说需要把时间浪费在美好的事物上的么。</p>\n<p>所以最终在经过探索使用Python写出了这个小工具，经过最新更新基本实现了如下几点功能：</p>\n<ol>\n<li>将在Kindle阅读器上标记的单词与语句输出为Markdown表格文件。</li>\n<li>单词自动查询释义，将从网易有道词典网站查获的结果保存存于表格中。</li>\n<li>将Kindle中标记的单词与语句自动关联，整理输出最终表格。</li>\n</ol>\n<p>使用示例：</p>\n<h2>1. 准备工作</h2>\n<ol>\n<li>在Kindle上阅读Harry Potter原著，对不认识的单词与语句进行标记，最终会在Kindle的根目录下生成My Clippings.txt文件。</li>\n<li>将该文件导出到电脑,重新命名为My_Clippings.txt,主要是为了去掉文件名的空格</li>\n</ol>\n<h2>2. 运行程序</h2>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 main.py --prefix=static -t 2017-2-25 -i My_Clippings.txt -o words_chapters_9.md</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>参数说明：</p>\n<ul>\n<li>--prefix为指定源目录为static,当然也可以指定别的目录,但是需要将My_Clippings.txt文件将其移动到相应目录里</li>\n<li>-t 为选择时间</li>\n<li>-i 为指定输入源文件,即目录中的txt文件</li>\n<li>-o 为指定输出源文件,即输出的markdown文件</li>\n</ul>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/python-kindle.gif\" alt=\"kindle-python\"></p>\n<p>源码开源在<a href=\"https://github.com/wowmarcomei/kindle_notes_export\" target=\"_blank\" rel=\"noopener\">github</a>，欢迎star与使用。</p>\n"},{"title":"使用Hexo搭建Github Page","date":"2016-07-06T07:37:51.000Z","description":"在github上可以用户名创建一个repository,该仓库即为一个静态页面github page，可以在github上该仓库的设置界面选择主题来设置自己喜欢的主题，也可以通过`Hexo`来更新整个github page。为了可以在多台电脑上均可管理hexo源码与发布github page博客博文，我们需要使用两个分支：`master` 与 `hexo`。","_content":"\n> Github Pages是Github免费提供的静态网站服务，我们可以将自己的静态网站推送到Github仓库，让它提供网站服务，**免去自己申请主机服务器的困(费)扰(用)**。不过默认对外提供的域名为`<username>.github.io`，如果希望使用自己的域名如`baidu.com`，则需要对该域名进行`CNAME`解析到`<username>.github.io`.\n\n\n在github上可以用户名创建一个repository: `<username>.github.io`，该仓库即为一个静态页面github page，可以在github上该仓库的设置界面选择主题来设置自己喜欢的`theme`，也可以通过`Hexo`来更新整个github page。为了可以在多台电脑上**均可**管理hexo源码与发布github page博客博文，我们需要使用两个分支：`master` 与 `hexo`。\n\n- hexo分支为源代码文件。\n- master分支为发布的github page静态页面所需的所有文件。\n\n\n```bash\n$cd\n$wget https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.gz\n$tar -xzvf node-v10.15.3-linux-x64.tar.gz\n$mv node-v10.15.3-linux-x64 nodejs\n```\n\n配置环境变量使nodejs与npm生效。以ubuntu16.04环境为例。\n\n```bash\nvi .profile  \n# 在PATH中添加nodejs所在位置路径，其中冒号:表示一个路径的结束，$HOME/nodejs/bin为新加的路径\nPATH=\"$HOME/bin:$HOME/.local/bin:$PATH:$HOME/nodejs/bin\"\n\n# 执行source .profile或者reboot系统之后环境变量生效\nsource .profile\n\n$ node --version\nv10.15.3\n$ npm --version\n6.4.1\n$\n```\n\n### 2. 在本地搭建hexo环境\n\n在环境变量生效以后，普通账号拥有nodejs与npm程序，使用普通账号基于全局安装hexo\n\n```bash\n$ npm install -g hexo-cli\n```\n\n配置ssh密钥，加入到github中,可以参考[官方指导Generating a new SSH key and adding it to the ssh-agent](https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)\n\n### 3. 在本地搭建master分支\n\n1. 在github上创建仓库：`wowmarcomei.github.io`，默认分支为`master`.\n2. 添加README.md到**master**分支\n3. 创建**hexo**分支\n4. 在本地clone hexo分支\n\n```bash\n$ git clone -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git\n$ cd wowmarcomei.github.io.git\n$ hexo init\n```\n\n在空仓库中初始化hexo工程，生成会生成hexo的工程文件，包括package.json等如下文件。\n\n```bash\n   drwxrwxr-x   6 ubuntu ubuntu   4096 Apr  1 11:10 ./\n   drwxr-xr-x  10 ubuntu ubuntu   4096 Apr  1 11:10 ../\n   -rw-rw-r--   1 ubuntu ubuntu   1765 Apr  1 11:10 _config.yml\n   -rw-rw-r--   1 ubuntu ubuntu     65 Apr  1 11:10 .gitignore\n   drwxrwxr-x 284 ubuntu ubuntu  12288 Apr  1 11:10 node_modules/\n   -rw-rw-r--   1 ubuntu ubuntu    443 Apr  1 11:10 package.json\n   -rw-rw-r--   1 ubuntu ubuntu 137375 Apr  1 11:10 package-lock.json\n   drwxrwxr-x   2 ubuntu ubuntu   4096 Apr  1 11:10 scaffolds/\n   drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 source/\n   drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 themes/\n```\n\n其中node_modules文件是每个nodejs工程所需要安装的依赖包，不是全局包，每个工程都应该有一个这样目录，但是上传到github时最好把它删除掉，新用户clone该仓库后，可以在目录下执行`npm install`命令来生成新的node_modules目录。\n\n_config.yml是网站的配置文件，包括主题选择等等。需要修改该文件指定托管部署地址。\n\n```yaml\n$ vi _config.yml\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:wowmarcomei/wowmarcomei.github.io.git\n  branch: master\n```\n\n设置主题，可以选择**hexo-theme-even**主题，参考[github](<https://github.com/ahonn/hexo-theme-even>)主页提示执行如下步骤安装。\n\n```bash\n$ cd wowmarcomei.github.io.git\n$ npm install hexo-renderer-scss --save\n$ git clone https://github.com/ahonn/hexo-theme-even themes/even\n```\n\n下载好了主题以后，修改配置文件中的 `theme` 字段为 `even`:\n\n```shell\n# Extensions\n# Plugins: http://hexo.io/plugins/\n# Themes: http://hexo.io/themes/\ntheme: even\n```\n\n更多主题设置，查看 [Document](https://github.com/ahonn/hexo-theme-even/wiki), 可以删除themes主题下的`.git`目录与`.gitignore`文件。\n\n如果使用的是[snippet](<https://github.com/shenliyang/hexo-theme-snippet>)主题，因为 **hexo-theme-snippet** 使用了 `ejs` 模版引擎 、 `Less` CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：\n\n```bash\nnpm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S\n```\n\n在通过git上传到github之前，需要安装`hexo-deployer-git`，可以全局安装，也可以本地工程安装。下面采取本地安装。\n\n```bash\nnpm install --save hexo-deployer-git\n```\n\n还有一些可选的hexo插件，可以安装到本地工程目录中去：\n\n```bash\nnpm install hexo-server --save\nnpm install hexo-admin --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-search --save\nnpm install hexo-generator-tag --save\nnpm install hexo-deployer-git --save\nnpm install hexo-generator-sitemap --save\n\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-markdown-it --save\n\nnpm install hexo-symbols-count-time --save\n\nnpm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎\nnpm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎\n\nnpm install gulp -g\nnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save\n\nnpm install hexo-generator-searchdb --save\n```\n\n后续继续执行hexo命令来生成静态网站。\n\n```bash\n$ hexo clean\n$ hexo g # 用hexo生成静态网站，位于public目录\n$ hexo s # 本地生成查看静态网站，启动服务器业务\n$ hexo d # 生成.deploy_git目录上传到托管网站github相应路径，即上传到master分支\n```\n\n   > 注：\n   >\n   > - `--save`参数会将库安装到本目录下的node_modules下面。\n   > - nodejs工程将需要安装的包写在`package.json`文件中。\n   > - 使用`npm audit -fix`可以查出工程还需要哪些包\n   > - 可以到https://mirrors.huaweicloud.com/下面查看nodejs加速镜像\n\n\n### 4. 在本地搭建hexo分支\n\n上面已经在github上创建了hexo分支，使用git命令提交hexo程序到github的hexo分支。\n\n```bash\n$ git add *\n$ git commit -m \"Initial Hexo Branch\"\n$ git push origin hexo # 推送到hexo分支\n```\n\n## 二.在其他电脑搭建Hexo环境\n\n> 该电脑可以做hexo源码重新开发也可以只用作发布blog，可以分别通过控制hexo与master分支来进行同步即可。\n\n1. 搭建nodejs与npm环境，与上述步骤相同\n\n2. 搭建hexo全局环境，与上述步骤相同\n\n3. 生成ssh-key密钥，添加到github中，与上述步骤相同\n\n4. 复制hexo分支代码到本机\n\n```bash\n$ git clone -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git\n$ cd wowmarcomei.github.io\n$ git branch #查看当前分支，应该为hexo\n$ rm -fr node_modules  #如果从github中clone下来的工程中有该目录就删除掉, 没有就算了\n$ vim .gitignore #加入node_modules,public, .deploy_git这几个目录，\n$ npm install #在工程目录中用 npm install 命令生成node_modules，每个项目有单独一套node_modules（像Java中的Maven那样),如果出现一些包需要更新的提示，如提示使用npm audit fix进行修复，则执行该命令\n```\n\n   如果使用的是[snippet](<https://github.com/shenliyang/hexo-theme-snippet>)主题，因为 **hexo-theme-snippet** 使用了 `ejs` 模版引擎 、 `Less` CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：\n\n```bash\nnpm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S\nnpm install hexo-generator-json-content@2.2.0 -S #本地站点搜索插件\n```\n\n   在通过git上传到github之前，需要安装`hexo-deployer-git`，可以全局安装，也可以本地工程安装。下面采取本地安装。\n\n```bash\nnpm install --save hexo-deployer-git\n```\n\n   还有一些可选的hexo插件，可以安装到本地工程目录中去：\n\n```bash\nnpm install hexo-server --save\nnpm install hexo-admin --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-search --save\nnpm install hexo-generator-tag --save\nnpm install hexo-deployer-git --save\nnpm install hexo-generator-sitemap --save\n   \nnpm i hexo-renderer-marked --save\nnpm i hexo-renderer-markdown-it --save\n   \nnpm install hexo-symbols-count-time --save\n   \nnpm install hexo-generator-sitemap --save #sitemap.xml提交给谷歌引擎\nnpm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎\n   \nnpm install gulp --save\nnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save\n   \nnpm install hexo-generator-searchdb --save\n```\n\n   \n\n> 注：\n>\n> - `--save`参数会将库安装到本目录下的node_modules下面。\n> - nodejs工程将需要安装的包写在`package.json`文件中。\n> - 使用`npm audit -fix`可以查出工程还需要哪些包\n> - 可以到https://mirrors.huaweicloud.com/下面查看nodejs加速镜像\n\n   \n\n5. 如果需要对Hexo源码进行操作,发布到hexo分支\n\n```bash\n$ git add *\n$ git commit -m \"your comment\"\n$ git push origin hexo #推送到远程github的hexo分支\n```\n\n6. 如果需要更新blog，则使用hexo操作发布到master\n\n```bash\n$ hexo clean\n$ hexo g\n$ gulp   #压缩html,css,js文件\n$ hexo s #s为本地server模式\n$ hexo d #d为deploy部署模式\n```\n\n> **如果有更换电脑，直接在新电脑上将hexo分支clone下来即可, master分支可以通过hexo命令生成** 。另外，如果需要定制主题的话，一般是在`header.ejs`与`style.css`下面定制头与css样式。","source":"_posts/create-github-pages-with-hexo.md","raw":"---\ntitle: 使用Hexo搭建Github Page\ndate: 2016-07-06 15:37:51\ncategories: \n  - hexo\ndescription: 在github上可以用户名创建一个repository,该仓库即为一个静态页面github page，可以在github上该仓库的设置界面选择主题来设置自己喜欢的主题，也可以通过`Hexo`来更新整个github page。为了可以在多台电脑上均可管理hexo源码与发布github page博客博文，我们需要使用两个分支：`master` 与 `hexo`。\ntags: \n  - Hexo\n  - Github\n  - Git\n---\n\n> Github Pages是Github免费提供的静态网站服务，我们可以将自己的静态网站推送到Github仓库，让它提供网站服务，**免去自己申请主机服务器的困(费)扰(用)**。不过默认对外提供的域名为`<username>.github.io`，如果希望使用自己的域名如`baidu.com`，则需要对该域名进行`CNAME`解析到`<username>.github.io`.\n\n\n在github上可以用户名创建一个repository: `<username>.github.io`，该仓库即为一个静态页面github page，可以在github上该仓库的设置界面选择主题来设置自己喜欢的`theme`，也可以通过`Hexo`来更新整个github page。为了可以在多台电脑上**均可**管理hexo源码与发布github page博客博文，我们需要使用两个分支：`master` 与 `hexo`。\n\n- hexo分支为源代码文件。\n- master分支为发布的github page静态页面所需的所有文件。\n\n\n```bash\n$cd\n$wget https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.gz\n$tar -xzvf node-v10.15.3-linux-x64.tar.gz\n$mv node-v10.15.3-linux-x64 nodejs\n```\n\n配置环境变量使nodejs与npm生效。以ubuntu16.04环境为例。\n\n```bash\nvi .profile  \n# 在PATH中添加nodejs所在位置路径，其中冒号:表示一个路径的结束，$HOME/nodejs/bin为新加的路径\nPATH=\"$HOME/bin:$HOME/.local/bin:$PATH:$HOME/nodejs/bin\"\n\n# 执行source .profile或者reboot系统之后环境变量生效\nsource .profile\n\n$ node --version\nv10.15.3\n$ npm --version\n6.4.1\n$\n```\n\n### 2. 在本地搭建hexo环境\n\n在环境变量生效以后，普通账号拥有nodejs与npm程序，使用普通账号基于全局安装hexo\n\n```bash\n$ npm install -g hexo-cli\n```\n\n配置ssh密钥，加入到github中,可以参考[官方指导Generating a new SSH key and adding it to the ssh-agent](https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)\n\n### 3. 在本地搭建master分支\n\n1. 在github上创建仓库：`wowmarcomei.github.io`，默认分支为`master`.\n2. 添加README.md到**master**分支\n3. 创建**hexo**分支\n4. 在本地clone hexo分支\n\n```bash\n$ git clone -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git\n$ cd wowmarcomei.github.io.git\n$ hexo init\n```\n\n在空仓库中初始化hexo工程，生成会生成hexo的工程文件，包括package.json等如下文件。\n\n```bash\n   drwxrwxr-x   6 ubuntu ubuntu   4096 Apr  1 11:10 ./\n   drwxr-xr-x  10 ubuntu ubuntu   4096 Apr  1 11:10 ../\n   -rw-rw-r--   1 ubuntu ubuntu   1765 Apr  1 11:10 _config.yml\n   -rw-rw-r--   1 ubuntu ubuntu     65 Apr  1 11:10 .gitignore\n   drwxrwxr-x 284 ubuntu ubuntu  12288 Apr  1 11:10 node_modules/\n   -rw-rw-r--   1 ubuntu ubuntu    443 Apr  1 11:10 package.json\n   -rw-rw-r--   1 ubuntu ubuntu 137375 Apr  1 11:10 package-lock.json\n   drwxrwxr-x   2 ubuntu ubuntu   4096 Apr  1 11:10 scaffolds/\n   drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 source/\n   drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 themes/\n```\n\n其中node_modules文件是每个nodejs工程所需要安装的依赖包，不是全局包，每个工程都应该有一个这样目录，但是上传到github时最好把它删除掉，新用户clone该仓库后，可以在目录下执行`npm install`命令来生成新的node_modules目录。\n\n_config.yml是网站的配置文件，包括主题选择等等。需要修改该文件指定托管部署地址。\n\n```yaml\n$ vi _config.yml\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:wowmarcomei/wowmarcomei.github.io.git\n  branch: master\n```\n\n设置主题，可以选择**hexo-theme-even**主题，参考[github](<https://github.com/ahonn/hexo-theme-even>)主页提示执行如下步骤安装。\n\n```bash\n$ cd wowmarcomei.github.io.git\n$ npm install hexo-renderer-scss --save\n$ git clone https://github.com/ahonn/hexo-theme-even themes/even\n```\n\n下载好了主题以后，修改配置文件中的 `theme` 字段为 `even`:\n\n```shell\n# Extensions\n# Plugins: http://hexo.io/plugins/\n# Themes: http://hexo.io/themes/\ntheme: even\n```\n\n更多主题设置，查看 [Document](https://github.com/ahonn/hexo-theme-even/wiki), 可以删除themes主题下的`.git`目录与`.gitignore`文件。\n\n如果使用的是[snippet](<https://github.com/shenliyang/hexo-theme-snippet>)主题，因为 **hexo-theme-snippet** 使用了 `ejs` 模版引擎 、 `Less` CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：\n\n```bash\nnpm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S\n```\n\n在通过git上传到github之前，需要安装`hexo-deployer-git`，可以全局安装，也可以本地工程安装。下面采取本地安装。\n\n```bash\nnpm install --save hexo-deployer-git\n```\n\n还有一些可选的hexo插件，可以安装到本地工程目录中去：\n\n```bash\nnpm install hexo-server --save\nnpm install hexo-admin --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-search --save\nnpm install hexo-generator-tag --save\nnpm install hexo-deployer-git --save\nnpm install hexo-generator-sitemap --save\n\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-markdown-it --save\n\nnpm install hexo-symbols-count-time --save\n\nnpm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎\nnpm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎\n\nnpm install gulp -g\nnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save\n\nnpm install hexo-generator-searchdb --save\n```\n\n后续继续执行hexo命令来生成静态网站。\n\n```bash\n$ hexo clean\n$ hexo g # 用hexo生成静态网站，位于public目录\n$ hexo s # 本地生成查看静态网站，启动服务器业务\n$ hexo d # 生成.deploy_git目录上传到托管网站github相应路径，即上传到master分支\n```\n\n   > 注：\n   >\n   > - `--save`参数会将库安装到本目录下的node_modules下面。\n   > - nodejs工程将需要安装的包写在`package.json`文件中。\n   > - 使用`npm audit -fix`可以查出工程还需要哪些包\n   > - 可以到https://mirrors.huaweicloud.com/下面查看nodejs加速镜像\n\n\n### 4. 在本地搭建hexo分支\n\n上面已经在github上创建了hexo分支，使用git命令提交hexo程序到github的hexo分支。\n\n```bash\n$ git add *\n$ git commit -m \"Initial Hexo Branch\"\n$ git push origin hexo # 推送到hexo分支\n```\n\n## 二.在其他电脑搭建Hexo环境\n\n> 该电脑可以做hexo源码重新开发也可以只用作发布blog，可以分别通过控制hexo与master分支来进行同步即可。\n\n1. 搭建nodejs与npm环境，与上述步骤相同\n\n2. 搭建hexo全局环境，与上述步骤相同\n\n3. 生成ssh-key密钥，添加到github中，与上述步骤相同\n\n4. 复制hexo分支代码到本机\n\n```bash\n$ git clone -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git\n$ cd wowmarcomei.github.io\n$ git branch #查看当前分支，应该为hexo\n$ rm -fr node_modules  #如果从github中clone下来的工程中有该目录就删除掉, 没有就算了\n$ vim .gitignore #加入node_modules,public, .deploy_git这几个目录，\n$ npm install #在工程目录中用 npm install 命令生成node_modules，每个项目有单独一套node_modules（像Java中的Maven那样),如果出现一些包需要更新的提示，如提示使用npm audit fix进行修复，则执行该命令\n```\n\n   如果使用的是[snippet](<https://github.com/shenliyang/hexo-theme-snippet>)主题，因为 **hexo-theme-snippet** 使用了 `ejs` 模版引擎 、 `Less` CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：\n\n```bash\nnpm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S\nnpm install hexo-generator-json-content@2.2.0 -S #本地站点搜索插件\n```\n\n   在通过git上传到github之前，需要安装`hexo-deployer-git`，可以全局安装，也可以本地工程安装。下面采取本地安装。\n\n```bash\nnpm install --save hexo-deployer-git\n```\n\n   还有一些可选的hexo插件，可以安装到本地工程目录中去：\n\n```bash\nnpm install hexo-server --save\nnpm install hexo-admin --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-search --save\nnpm install hexo-generator-tag --save\nnpm install hexo-deployer-git --save\nnpm install hexo-generator-sitemap --save\n   \nnpm i hexo-renderer-marked --save\nnpm i hexo-renderer-markdown-it --save\n   \nnpm install hexo-symbols-count-time --save\n   \nnpm install hexo-generator-sitemap --save #sitemap.xml提交给谷歌引擎\nnpm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎\n   \nnpm install gulp --save\nnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save\n   \nnpm install hexo-generator-searchdb --save\n```\n\n   \n\n> 注：\n>\n> - `--save`参数会将库安装到本目录下的node_modules下面。\n> - nodejs工程将需要安装的包写在`package.json`文件中。\n> - 使用`npm audit -fix`可以查出工程还需要哪些包\n> - 可以到https://mirrors.huaweicloud.com/下面查看nodejs加速镜像\n\n   \n\n5. 如果需要对Hexo源码进行操作,发布到hexo分支\n\n```bash\n$ git add *\n$ git commit -m \"your comment\"\n$ git push origin hexo #推送到远程github的hexo分支\n```\n\n6. 如果需要更新blog，则使用hexo操作发布到master\n\n```bash\n$ hexo clean\n$ hexo g\n$ gulp   #压缩html,css,js文件\n$ hexo s #s为本地server模式\n$ hexo d #d为deploy部署模式\n```\n\n> **如果有更换电脑，直接在新电脑上将hexo分支clone下来即可, master分支可以通过hexo命令生成** 。另外，如果需要定制主题的话，一般是在`header.ejs`与`style.css`下面定制头与css样式。","slug":"create-github-pages-with-hexo","published":1,"updated":"2020-10-08T08:13:41.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg3hj9ir000czcib3e0d96rp","content":"<blockquote>\n<p>Github Pages是Github免费提供的静态网站服务，我们可以将自己的静态网站推送到Github仓库，让它提供网站服务，<strong>免去自己申请主机服务器的困(费)扰(用)</strong>。不过默认对外提供的域名为<code>&lt;username&gt;.github.io</code>，如果希望使用自己的域名如<code>baidu.com</code>，则需要对该域名进行<code>CNAME</code>解析到<code>&lt;username&gt;.github.io</code>.</p>\n</blockquote>\n<p>在github上可以用户名创建一个repository: <code>&lt;username&gt;.github.io</code>，该仓库即为一个静态页面github page，可以在github上该仓库的设置界面选择主题来设置自己喜欢的<code>theme</code>，也可以通过<code>Hexo</code>来更新整个github page。为了可以在多台电脑上<strong>均可</strong>管理hexo源码与发布github page博客博文，我们需要使用两个分支：<code>master</code> 与 <code>hexo</code>。</p>\n<ul>\n<li>hexo分支为源代码文件。</li>\n<li>master分支为发布的github page静态页面所需的所有文件。</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cd</span></span><br><span class=\"line\"><span class=\"variable\">$wget</span> https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.gz</span><br><span class=\"line\"><span class=\"variable\">$tar</span> -xzvf node-v10.15.3-linux-x64.tar.gz</span><br><span class=\"line\"><span class=\"variable\">$mv</span> node-v10.15.3-linux-x64 nodejs</span><br></pre></td></tr></table></figure></p>\n<p>配置环境变量使nodejs与npm生效。以ubuntu16.04环境为例。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .profile  </span><br><span class=\"line\"><span class=\"comment\"># 在PATH中添加nodejs所在位置路径，其中冒号:表示一个路径的结束，$HOME/nodejs/bin为新加的路径</span></span><br><span class=\"line\">PATH=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/bin:<span class=\"variable\">$HOME</span>/.local/bin:<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/nodejs/bin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行source .profile或者reboot系统之后环境变量生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> .profile</span><br><span class=\"line\"></span><br><span class=\"line\">$ node --version</span><br><span class=\"line\">v10.15.3</span><br><span class=\"line\">$ npm --version</span><br><span class=\"line\">6.4.1</span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure></p>\n<h3>2. 在本地搭建hexo环境</h3>\n<p>在环境变量生效以后，普通账号拥有nodejs与npm程序，使用普通账号基于全局安装hexo</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>配置ssh密钥，加入到github中,可以参考<a href=\"https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\" target=\"_blank\" rel=\"noopener\">官方指导Generating a new SSH key and adding it to the ssh-agent</a></p>\n<h3>3. 在本地搭建master分支</h3>\n<ol>\n<li>在github上创建仓库：<code>wowmarcomei.github.io</code>，默认分支为<code>master</code>.</li>\n<li>添加README.md到<strong>master</strong>分支</li>\n<li>创建<strong>hexo</strong>分支</li>\n<li>在本地clone hexo分支</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> wowmarcomei.github.io.git</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure></p>\n<p>在空仓库中初始化hexo工程，生成会生成hexo的工程文件，包括package.json等如下文件。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxrwxr-x   6 ubuntu ubuntu   4096 Apr  1 11:10 ./</span><br><span class=\"line\">drwxr-xr-x  10 ubuntu ubuntu   4096 Apr  1 11:10 ../</span><br><span class=\"line\">-rw-rw-r--   1 ubuntu ubuntu   1765 Apr  1 11:10 _config.yml</span><br><span class=\"line\">-rw-rw-r--   1 ubuntu ubuntu     65 Apr  1 11:10 .gitignore</span><br><span class=\"line\">drwxrwxr-x 284 ubuntu ubuntu  12288 Apr  1 11:10 node_modules/</span><br><span class=\"line\">-rw-rw-r--   1 ubuntu ubuntu    443 Apr  1 11:10 package.json</span><br><span class=\"line\">-rw-rw-r--   1 ubuntu ubuntu 137375 Apr  1 11:10 package-lock.json</span><br><span class=\"line\">drwxrwxr-x   2 ubuntu ubuntu   4096 Apr  1 11:10 scaffolds/</span><br><span class=\"line\">drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 <span class=\"built_in\">source</span>/</span><br><span class=\"line\">drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 themes/</span><br></pre></td></tr></table></figure></p>\n<p>其中node_modules文件是每个nodejs工程所需要安装的依赖包，不是全局包，每个工程都应该有一个这样目录，但是上传到github时最好把它删除掉，新用户clone该仓库后，可以在目录下执行<code>npm install</code>命令来生成新的node_modules目录。</p>\n<p>_config.yml是网站的配置文件，包括主题选择等等。需要修改该文件指定托管部署地址。</p>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">vi</span> <span class=\"string\">_config.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:wowmarcomei/wowmarcomei.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure></p>\n<p>设置主题，可以选择<strong>hexo-theme-even</strong>主题，参考<a href=\"https://github.com/ahonn/hexo-theme-even\" target=\"_blank\" rel=\"noopener\">github</a>主页提示执行如下步骤安装。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> wowmarcomei.github.io.git</span><br><span class=\"line\">$ npm install hexo-renderer-scss --save</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/ahonn/hexo-theme-even themes/even</span><br></pre></td></tr></table></figure></p>\n<p>下载好了主题以后，修改配置文件中的 <code>theme</code> 字段为 <code>even</code>:</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Extensions</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Themes: http://hexo.io/themes/</span></span><br><span class=\"line\">theme: even</span><br></pre></td></tr></table></figure></p>\n<p>更多主题设置，查看 <a href=\"https://github.com/ahonn/hexo-theme-even/wiki\" target=\"_blank\" rel=\"noopener\">Document</a>, 可以删除themes主题下的<code>.git</code>目录与<code>.gitignore</code>文件。</p>\n<p>如果使用的是<a href=\"https://github.com/shenliyang/hexo-theme-snippet\" target=\"_blank\" rel=\"noopener\">snippet</a>主题，因为 <strong>hexo-theme-snippet</strong> 使用了 <code>ejs</code> 模版引擎 、 <code>Less</code> CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S</span><br></pre></td></tr></table></figure></p>\n<p>在通过git上传到github之前，需要安装<code>hexo-deployer-git</code>，可以全局安装，也可以本地工程安装。下面采取本地安装。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>还有一些可选的hexo插件，可以安装到本地工程目录中去：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-admin --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-search --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-markdown-it --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-symbols-count-time --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-generator-sitemap --save <span class=\"comment\">#sitemap.xml适合提交给谷歌搜素引擎</span></span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save <span class=\"comment\">#baidusitemap.xml适合提交百度搜索引擎</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm install gulp -g</span><br><span class=\"line\">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>\n<p>后续继续执行hexo命令来生成静态网站。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g <span class=\"comment\"># 用hexo生成静态网站，位于public目录</span></span><br><span class=\"line\">$ hexo s <span class=\"comment\"># 本地生成查看静态网站，启动服务器业务</span></span><br><span class=\"line\">$ hexo d <span class=\"comment\"># 生成.deploy_git目录上传到托管网站github相应路径，即上传到master分支</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<ul>\n<li><code>--save</code>参数会将库安装到本目录下的node_modules下面。</li>\n<li>nodejs工程将需要安装的包写在<code>package.json</code>文件中。</li>\n<li>使用<code>npm audit -fix</code>可以查出工程还需要哪些包</li>\n<li>可以到https://mirrors.huaweicloud.com/下面查看nodejs加速镜像</li>\n</ul>\n</blockquote>\n<h3>4. 在本地搭建hexo分支</h3>\n<p>上面已经在github上创建了hexo分支，使用git命令提交hexo程序到github的hexo分支。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"Initial Hexo Branch\"</span></span><br><span class=\"line\">$ git push origin hexo <span class=\"comment\"># 推送到hexo分支</span></span><br></pre></td></tr></table></figure></p>\n<h2>二.在其他电脑搭建Hexo环境</h2>\n<blockquote>\n<p>该电脑可以做hexo源码重新开发也可以只用作发布blog，可以分别通过控制hexo与master分支来进行同步即可。</p>\n</blockquote>\n<ol>\n<li>\n<p>搭建nodejs与npm环境，与上述步骤相同</p>\n</li>\n<li>\n<p>搭建hexo全局环境，与上述步骤相同</p>\n</li>\n<li>\n<p>生成ssh-key密钥，添加到github中，与上述步骤相同</p>\n</li>\n<li>\n<p>复制hexo分支代码到本机</p>\n</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> wowmarcomei.github.io</span><br><span class=\"line\">$ git branch <span class=\"comment\">#查看当前分支，应该为hexo</span></span><br><span class=\"line\">$ rm -fr node_modules  <span class=\"comment\">#如果从github中clone下来的工程中有该目录就删除掉, 没有就算了</span></span><br><span class=\"line\">$ vim .gitignore <span class=\"comment\">#加入node_modules,public, .deploy_git这几个目录，</span></span><br><span class=\"line\">$ npm install <span class=\"comment\">#在工程目录中用 npm install 命令生成node_modules，每个项目有单独一套node_modules（像Java中的Maven那样),如果出现一些包需要更新的提示，如提示使用npm audit fix进行修复，则执行该命令</span></span><br></pre></td></tr></table></figure></p>\n<p>如果使用的是<a href=\"https://github.com/shenliyang/hexo-theme-snippet\" target=\"_blank\" rel=\"noopener\">snippet</a>主题，因为 <strong>hexo-theme-snippet</strong> 使用了 <code>ejs</code> 模版引擎 、 <code>Less</code> CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S</span><br><span class=\"line\">npm install hexo-generator-json-content@2.2.0 -S <span class=\"comment\">#本地站点搜索插件</span></span><br></pre></td></tr></table></figure></p>\n<p>在通过git上传到github之前，需要安装<code>hexo-deployer-git</code>，可以全局安装，也可以本地工程安装。下面采取本地安装。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>还有一些可选的hexo插件，可以安装到本地工程目录中去：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-admin --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-search --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">   </span><br><span class=\"line\">npm i hexo-renderer-marked --save</span><br><span class=\"line\">npm i hexo-renderer-markdown-it --save</span><br><span class=\"line\">   </span><br><span class=\"line\">npm install hexo-symbols-count-time --save</span><br><span class=\"line\">   </span><br><span class=\"line\">npm install hexo-generator-sitemap --save <span class=\"comment\">#sitemap.xml提交给谷歌引擎</span></span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save <span class=\"comment\">#baidusitemap.xml适合提交百度搜索引擎</span></span><br><span class=\"line\">   </span><br><span class=\"line\">npm install gulp --save</span><br><span class=\"line\">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class=\"line\">   </span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<ul>\n<li><code>--save</code>参数会将库安装到本目录下的node_modules下面。</li>\n<li>nodejs工程将需要安装的包写在<code>package.json</code>文件中。</li>\n<li>使用<code>npm audit -fix</code>可以查出工程还需要哪些包</li>\n<li>可以到https://mirrors.huaweicloud.com/下面查看nodejs加速镜像</li>\n</ul>\n</blockquote>\n<ol start=\"5\">\n<li>如果需要对Hexo源码进行操作,发布到hexo分支</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"your comment\"</span></span><br><span class=\"line\">$ git push origin hexo <span class=\"comment\">#推送到远程github的hexo分支</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"6\">\n<li>如果需要更新blog，则使用hexo操作发布到master</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ gulp   <span class=\"comment\">#压缩html,css,js文件</span></span><br><span class=\"line\">$ hexo s <span class=\"comment\">#s为本地server模式</span></span><br><span class=\"line\">$ hexo d <span class=\"comment\">#d为deploy部署模式</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>如果有更换电脑，直接在新电脑上将hexo分支clone下来即可, master分支可以通过hexo命令生成</strong> 。另外，如果需要定制主题的话，一般是在<code>header.ejs</code>与<code>style.css</code>下面定制头与css样式。</p>\n</blockquote>\n","site":{"data":{}},"length":5745,"excerpt":"","more":"<blockquote>\n<p>Github Pages是Github免费提供的静态网站服务，我们可以将自己的静态网站推送到Github仓库，让它提供网站服务，<strong>免去自己申请主机服务器的困(费)扰(用)</strong>。不过默认对外提供的域名为<code>&lt;username&gt;.github.io</code>，如果希望使用自己的域名如<code>baidu.com</code>，则需要对该域名进行<code>CNAME</code>解析到<code>&lt;username&gt;.github.io</code>.</p>\n</blockquote>\n<p>在github上可以用户名创建一个repository: <code>&lt;username&gt;.github.io</code>，该仓库即为一个静态页面github page，可以在github上该仓库的设置界面选择主题来设置自己喜欢的<code>theme</code>，也可以通过<code>Hexo</code>来更新整个github page。为了可以在多台电脑上<strong>均可</strong>管理hexo源码与发布github page博客博文，我们需要使用两个分支：<code>master</code> 与 <code>hexo</code>。</p>\n<ul>\n<li>hexo分支为源代码文件。</li>\n<li>master分支为发布的github page静态页面所需的所有文件。</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cd</span></span><br><span class=\"line\"><span class=\"variable\">$wget</span> https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.gz</span><br><span class=\"line\"><span class=\"variable\">$tar</span> -xzvf node-v10.15.3-linux-x64.tar.gz</span><br><span class=\"line\"><span class=\"variable\">$mv</span> node-v10.15.3-linux-x64 nodejs</span><br></pre></td></tr></table></figure></p>\n<p>配置环境变量使nodejs与npm生效。以ubuntu16.04环境为例。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .profile  </span><br><span class=\"line\"><span class=\"comment\"># 在PATH中添加nodejs所在位置路径，其中冒号:表示一个路径的结束，$HOME/nodejs/bin为新加的路径</span></span><br><span class=\"line\">PATH=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/bin:<span class=\"variable\">$HOME</span>/.local/bin:<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/nodejs/bin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行source .profile或者reboot系统之后环境变量生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> .profile</span><br><span class=\"line\"></span><br><span class=\"line\">$ node --version</span><br><span class=\"line\">v10.15.3</span><br><span class=\"line\">$ npm --version</span><br><span class=\"line\">6.4.1</span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure></p>\n<h3>2. 在本地搭建hexo环境</h3>\n<p>在环境变量生效以后，普通账号拥有nodejs与npm程序，使用普通账号基于全局安装hexo</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>配置ssh密钥，加入到github中,可以参考<a href=\"https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\" target=\"_blank\" rel=\"noopener\">官方指导Generating a new SSH key and adding it to the ssh-agent</a></p>\n<h3>3. 在本地搭建master分支</h3>\n<ol>\n<li>在github上创建仓库：<code>wowmarcomei.github.io</code>，默认分支为<code>master</code>.</li>\n<li>添加README.md到<strong>master</strong>分支</li>\n<li>创建<strong>hexo</strong>分支</li>\n<li>在本地clone hexo分支</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> wowmarcomei.github.io.git</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure></p>\n<p>在空仓库中初始化hexo工程，生成会生成hexo的工程文件，包括package.json等如下文件。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxrwxr-x   6 ubuntu ubuntu   4096 Apr  1 11:10 ./</span><br><span class=\"line\">drwxr-xr-x  10 ubuntu ubuntu   4096 Apr  1 11:10 ../</span><br><span class=\"line\">-rw-rw-r--   1 ubuntu ubuntu   1765 Apr  1 11:10 _config.yml</span><br><span class=\"line\">-rw-rw-r--   1 ubuntu ubuntu     65 Apr  1 11:10 .gitignore</span><br><span class=\"line\">drwxrwxr-x 284 ubuntu ubuntu  12288 Apr  1 11:10 node_modules/</span><br><span class=\"line\">-rw-rw-r--   1 ubuntu ubuntu    443 Apr  1 11:10 package.json</span><br><span class=\"line\">-rw-rw-r--   1 ubuntu ubuntu 137375 Apr  1 11:10 package-lock.json</span><br><span class=\"line\">drwxrwxr-x   2 ubuntu ubuntu   4096 Apr  1 11:10 scaffolds/</span><br><span class=\"line\">drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 <span class=\"built_in\">source</span>/</span><br><span class=\"line\">drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 themes/</span><br></pre></td></tr></table></figure></p>\n<p>其中node_modules文件是每个nodejs工程所需要安装的依赖包，不是全局包，每个工程都应该有一个这样目录，但是上传到github时最好把它删除掉，新用户clone该仓库后，可以在目录下执行<code>npm install</code>命令来生成新的node_modules目录。</p>\n<p>_config.yml是网站的配置文件，包括主题选择等等。需要修改该文件指定托管部署地址。</p>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">vi</span> <span class=\"string\">_config.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:wowmarcomei/wowmarcomei.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure></p>\n<p>设置主题，可以选择<strong>hexo-theme-even</strong>主题，参考<a href=\"https://github.com/ahonn/hexo-theme-even\" target=\"_blank\" rel=\"noopener\">github</a>主页提示执行如下步骤安装。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> wowmarcomei.github.io.git</span><br><span class=\"line\">$ npm install hexo-renderer-scss --save</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/ahonn/hexo-theme-even themes/even</span><br></pre></td></tr></table></figure></p>\n<p>下载好了主题以后，修改配置文件中的 <code>theme</code> 字段为 <code>even</code>:</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Extensions</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Themes: http://hexo.io/themes/</span></span><br><span class=\"line\">theme: even</span><br></pre></td></tr></table></figure></p>\n<p>更多主题设置，查看 <a href=\"https://github.com/ahonn/hexo-theme-even/wiki\" target=\"_blank\" rel=\"noopener\">Document</a>, 可以删除themes主题下的<code>.git</code>目录与<code>.gitignore</code>文件。</p>\n<p>如果使用的是<a href=\"https://github.com/shenliyang/hexo-theme-snippet\" target=\"_blank\" rel=\"noopener\">snippet</a>主题，因为 <strong>hexo-theme-snippet</strong> 使用了 <code>ejs</code> 模版引擎 、 <code>Less</code> CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S</span><br></pre></td></tr></table></figure></p>\n<p>在通过git上传到github之前，需要安装<code>hexo-deployer-git</code>，可以全局安装，也可以本地工程安装。下面采取本地安装。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>还有一些可选的hexo插件，可以安装到本地工程目录中去：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-admin --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-search --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-markdown-it --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-symbols-count-time --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-generator-sitemap --save <span class=\"comment\">#sitemap.xml适合提交给谷歌搜素引擎</span></span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save <span class=\"comment\">#baidusitemap.xml适合提交百度搜索引擎</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm install gulp -g</span><br><span class=\"line\">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>\n<p>后续继续执行hexo命令来生成静态网站。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g <span class=\"comment\"># 用hexo生成静态网站，位于public目录</span></span><br><span class=\"line\">$ hexo s <span class=\"comment\"># 本地生成查看静态网站，启动服务器业务</span></span><br><span class=\"line\">$ hexo d <span class=\"comment\"># 生成.deploy_git目录上传到托管网站github相应路径，即上传到master分支</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<ul>\n<li><code>--save</code>参数会将库安装到本目录下的node_modules下面。</li>\n<li>nodejs工程将需要安装的包写在<code>package.json</code>文件中。</li>\n<li>使用<code>npm audit -fix</code>可以查出工程还需要哪些包</li>\n<li>可以到https://mirrors.huaweicloud.com/下面查看nodejs加速镜像</li>\n</ul>\n</blockquote>\n<h3>4. 在本地搭建hexo分支</h3>\n<p>上面已经在github上创建了hexo分支，使用git命令提交hexo程序到github的hexo分支。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"Initial Hexo Branch\"</span></span><br><span class=\"line\">$ git push origin hexo <span class=\"comment\"># 推送到hexo分支</span></span><br></pre></td></tr></table></figure></p>\n<h2>二.在其他电脑搭建Hexo环境</h2>\n<blockquote>\n<p>该电脑可以做hexo源码重新开发也可以只用作发布blog，可以分别通过控制hexo与master分支来进行同步即可。</p>\n</blockquote>\n<ol>\n<li>\n<p>搭建nodejs与npm环境，与上述步骤相同</p>\n</li>\n<li>\n<p>搭建hexo全局环境，与上述步骤相同</p>\n</li>\n<li>\n<p>生成ssh-key密钥，添加到github中，与上述步骤相同</p>\n</li>\n<li>\n<p>复制hexo分支代码到本机</p>\n</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> wowmarcomei.github.io</span><br><span class=\"line\">$ git branch <span class=\"comment\">#查看当前分支，应该为hexo</span></span><br><span class=\"line\">$ rm -fr node_modules  <span class=\"comment\">#如果从github中clone下来的工程中有该目录就删除掉, 没有就算了</span></span><br><span class=\"line\">$ vim .gitignore <span class=\"comment\">#加入node_modules,public, .deploy_git这几个目录，</span></span><br><span class=\"line\">$ npm install <span class=\"comment\">#在工程目录中用 npm install 命令生成node_modules，每个项目有单独一套node_modules（像Java中的Maven那样),如果出现一些包需要更新的提示，如提示使用npm audit fix进行修复，则执行该命令</span></span><br></pre></td></tr></table></figure></p>\n<p>如果使用的是<a href=\"https://github.com/shenliyang/hexo-theme-snippet\" target=\"_blank\" rel=\"noopener\">snippet</a>主题，因为 <strong>hexo-theme-snippet</strong> 使用了 <code>ejs</code> 模版引擎 、 <code>Less</code> CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S</span><br><span class=\"line\">npm install hexo-generator-json-content@2.2.0 -S <span class=\"comment\">#本地站点搜索插件</span></span><br></pre></td></tr></table></figure></p>\n<p>在通过git上传到github之前，需要安装<code>hexo-deployer-git</code>，可以全局安装，也可以本地工程安装。下面采取本地安装。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>还有一些可选的hexo插件，可以安装到本地工程目录中去：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-admin --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-search --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">   </span><br><span class=\"line\">npm i hexo-renderer-marked --save</span><br><span class=\"line\">npm i hexo-renderer-markdown-it --save</span><br><span class=\"line\">   </span><br><span class=\"line\">npm install hexo-symbols-count-time --save</span><br><span class=\"line\">   </span><br><span class=\"line\">npm install hexo-generator-sitemap --save <span class=\"comment\">#sitemap.xml提交给谷歌引擎</span></span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save <span class=\"comment\">#baidusitemap.xml适合提交百度搜索引擎</span></span><br><span class=\"line\">   </span><br><span class=\"line\">npm install gulp --save</span><br><span class=\"line\">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class=\"line\">   </span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<ul>\n<li><code>--save</code>参数会将库安装到本目录下的node_modules下面。</li>\n<li>nodejs工程将需要安装的包写在<code>package.json</code>文件中。</li>\n<li>使用<code>npm audit -fix</code>可以查出工程还需要哪些包</li>\n<li>可以到https://mirrors.huaweicloud.com/下面查看nodejs加速镜像</li>\n</ul>\n</blockquote>\n<ol start=\"5\">\n<li>如果需要对Hexo源码进行操作,发布到hexo分支</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"your comment\"</span></span><br><span class=\"line\">$ git push origin hexo <span class=\"comment\">#推送到远程github的hexo分支</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"6\">\n<li>如果需要更新blog，则使用hexo操作发布到master</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ gulp   <span class=\"comment\">#压缩html,css,js文件</span></span><br><span class=\"line\">$ hexo s <span class=\"comment\">#s为本地server模式</span></span><br><span class=\"line\">$ hexo d <span class=\"comment\">#d为deploy部署模式</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>如果有更换电脑，直接在新电脑上将hexo分支clone下来即可, master分支可以通过hexo命令生成</strong> 。另外，如果需要定制主题的话，一般是在<code>header.ejs</code>与<code>style.css</code>下面定制头与css样式。</p>\n</blockquote>\n"},{"title":"如何同时设置子域名和顶级域名到Github Pages","date":"2020-10-04T01:09:03.000Z","description":"目标：1) 通过Github Pages搭建自己的静态网站.  2)将自己购买的域名解析到Github Pages.  3) 将顶级域名example.com和子域名www.example.com解析到Github Pages。","_content":"\n\n> 目标：1) 通过Github Pages搭建自己的静态网站.  2)将自己购买的域名解析到Github Pages.  3) 将顶级域名`example.com`和子域名`www.example.com`解析到Github Pages。\n\n\n\n### 前置条件 \n\n1. 在[Namesilo](https://www.namesilo.com/**?rid=8dbc698fz**)上购买域名`example.com`\n2. 在Github搭建好Pages，参考[使用Hexo搭建Github Page](https://lmbiji.com/create-github-pages-with-hexo.html)\n3. 已注册[cloudflare](https://www.cloudflare.com/)账号\n\n\n\n### 主要步骤\n\n1. **获取NS服务器** - 在[cloudflare](https://www.cloudflare.com/)上添加站点`example.com`，生成NS服务器域名\n2. **配置NS服务器** - 在[Namesilo](https://www.namesilo.com/**?rid=8dbc698fz**)上将域名的NS服务器换成[cloudflare](https://www.cloudflare.com/)上的NS服务器\n3. **DNS解析** - 在[cloudflare](https://www.cloudflare.com/)上设置DNS解析，包含`A`解析和`CNAME`解析\n4. **设置Github Page的CNAME** - 在`Hexo`工程中的`source`下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名`example.com`\n\n\n\n### 图解详细步骤\n\n\n\n1. 在[cloudflare](https://www.cloudflare.com/)上添加站点，生成NS服务器域名。\n\n![cloudflare添加站点](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Cloudflare-addsite.jpg)\n\n图中的`jonah.ns.cloudflare.com`与`stevie.ns.cloudflare.com`就是[cloudflare](https://www.cloudflare.com/)的NS服务器，NS服务器就是DNS服务器，是对域名进行DNS解析的服务器，国内最大的DNS服务器是`DNSPOD`，但是由于国内域名需要备案，只能解析到国外服务器IP，且`CNAME`解析可能有不可预知的问题。这也是我在尝试几次失败之后到[Namesilo](https://www.namesilo.com/**?rid=8dbc698fz**)上购买域名，到[cloudflare](https://www.cloudflare.com/)上解析DNS的原因。\n\n\n\n2. 在[Namesilo](https://www.namesilo.com/**?rid=8dbc698fz**)上将域名的NS服务器换成[cloudflare](https://www.cloudflare.com/)上的NS服务器\n\n选中指定域名右侧的DNS NS服务器，修改NS服务器为上述域名后提交，大概半小时可以生效，慢的话可能需要1天。\n\n![](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS.jpg)\n\n\n\n![](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS-change.jpg)\n\n\n\n3. 在[cloudflare](https://www.cloudflare.com/)上设置DNS解析，包含`A`解析和`CNAME`解析\n\n\n\n```bash\n@        A        185.199.108.153\n@        A        185.199.109.153\n@        A        185.199.110.153\n@        A        185.199.111.153\nwww      CNAME    your_github_username.github.io.\n```\n\n如何得知上述的4个IP地址呢？到 https://www.ipaddress.com/dns-lookup 中查询DNS即可。上表中的`your_github_username`需要换成自己的账号。解析大概需要1个小时左右生效。\n\n![](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/cloudflare-lmbiji.com.jpg)\n\n\n\n\n\n4.  在`Hexo`工程中的`source`下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名`example.com`\n\n- 在工程文件的source目录下新建CNAME，写入顶级域名`lmbiji.com`, 使用`hexo clean && hexo g && hexo d`命令会在`public`目录下生成`CNAME`文件并上传到Github io对应的仓库下\n- 在Github Pages选项中设置绑定顶级域名`lmbiji.com`\n\n![](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/github-naked-domain.jpg)\n","source":"_posts/how-to-set-sub-domain-and-naked-domain-to-Github-Pages-simultaneously.md","raw":"---\ntitle: 如何同时设置子域名和顶级域名到Github Pages\ndate: 2020-10-04 09:09:03\ntags:\n\t- Github\n\t- DNS\ncategories: \n\t- hexo\ndescription: 目标：1) 通过Github Pages搭建自己的静态网站.  2)将自己购买的域名解析到Github Pages.  3) 将顶级域名example.com和子域名www.example.com解析到Github Pages。\n---\n\n\n> 目标：1) 通过Github Pages搭建自己的静态网站.  2)将自己购买的域名解析到Github Pages.  3) 将顶级域名`example.com`和子域名`www.example.com`解析到Github Pages。\n\n\n\n### 前置条件 \n\n1. 在[Namesilo](https://www.namesilo.com/**?rid=8dbc698fz**)上购买域名`example.com`\n2. 在Github搭建好Pages，参考[使用Hexo搭建Github Page](https://lmbiji.com/create-github-pages-with-hexo.html)\n3. 已注册[cloudflare](https://www.cloudflare.com/)账号\n\n\n\n### 主要步骤\n\n1. **获取NS服务器** - 在[cloudflare](https://www.cloudflare.com/)上添加站点`example.com`，生成NS服务器域名\n2. **配置NS服务器** - 在[Namesilo](https://www.namesilo.com/**?rid=8dbc698fz**)上将域名的NS服务器换成[cloudflare](https://www.cloudflare.com/)上的NS服务器\n3. **DNS解析** - 在[cloudflare](https://www.cloudflare.com/)上设置DNS解析，包含`A`解析和`CNAME`解析\n4. **设置Github Page的CNAME** - 在`Hexo`工程中的`source`下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名`example.com`\n\n\n\n### 图解详细步骤\n\n\n\n1. 在[cloudflare](https://www.cloudflare.com/)上添加站点，生成NS服务器域名。\n\n![cloudflare添加站点](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Cloudflare-addsite.jpg)\n\n图中的`jonah.ns.cloudflare.com`与`stevie.ns.cloudflare.com`就是[cloudflare](https://www.cloudflare.com/)的NS服务器，NS服务器就是DNS服务器，是对域名进行DNS解析的服务器，国内最大的DNS服务器是`DNSPOD`，但是由于国内域名需要备案，只能解析到国外服务器IP，且`CNAME`解析可能有不可预知的问题。这也是我在尝试几次失败之后到[Namesilo](https://www.namesilo.com/**?rid=8dbc698fz**)上购买域名，到[cloudflare](https://www.cloudflare.com/)上解析DNS的原因。\n\n\n\n2. 在[Namesilo](https://www.namesilo.com/**?rid=8dbc698fz**)上将域名的NS服务器换成[cloudflare](https://www.cloudflare.com/)上的NS服务器\n\n选中指定域名右侧的DNS NS服务器，修改NS服务器为上述域名后提交，大概半小时可以生效，慢的话可能需要1天。\n\n![](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS.jpg)\n\n\n\n![](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS-change.jpg)\n\n\n\n3. 在[cloudflare](https://www.cloudflare.com/)上设置DNS解析，包含`A`解析和`CNAME`解析\n\n\n\n```bash\n@        A        185.199.108.153\n@        A        185.199.109.153\n@        A        185.199.110.153\n@        A        185.199.111.153\nwww      CNAME    your_github_username.github.io.\n```\n\n如何得知上述的4个IP地址呢？到 https://www.ipaddress.com/dns-lookup 中查询DNS即可。上表中的`your_github_username`需要换成自己的账号。解析大概需要1个小时左右生效。\n\n![](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/cloudflare-lmbiji.com.jpg)\n\n\n\n\n\n4.  在`Hexo`工程中的`source`下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名`example.com`\n\n- 在工程文件的source目录下新建CNAME，写入顶级域名`lmbiji.com`, 使用`hexo clean && hexo g && hexo d`命令会在`public`目录下生成`CNAME`文件并上传到Github io对应的仓库下\n- 在Github Pages选项中设置绑定顶级域名`lmbiji.com`\n\n![](https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/github-naked-domain.jpg)\n","slug":"how-to-set-sub-domain-and-naked-domain-to-Github-Pages-simultaneously","published":1,"updated":"2020-10-08T08:15:43.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg3hj9is000dzcib7lxhm3uw","content":"<blockquote>\n<p>目标：1) 通过Github Pages搭建自己的静态网站.  2)将自己购买的域名解析到Github Pages.  3) 将顶级域名<code>example.com</code>和子域名<code>www.example.com</code>解析到Github Pages。</p>\n</blockquote>\n<h3>前置条件</h3>\n<ol>\n<li>在<a href=\"https://www.namesilo.com/**?rid=8dbc698fz**\" target=\"_blank\" rel=\"noopener\">Namesilo</a>上购买域名<code>example.com</code></li>\n<li>在Github搭建好Pages，参考<a href=\"https://lmbiji.com/create-github-pages-with-hexo.html\">使用Hexo搭建Github Page</a></li>\n<li>已注册<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>账号</li>\n</ol>\n<h3>主要步骤</h3>\n<ol>\n<li><strong>获取NS服务器</strong> - 在<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上添加站点<code>example.com</code>，生成NS服务器域名</li>\n<li><strong>配置NS服务器</strong> - 在<a href=\"https://www.namesilo.com/**?rid=8dbc698fz**\" target=\"_blank\" rel=\"noopener\">Namesilo</a>上将域名的NS服务器换成<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上的NS服务器</li>\n<li><strong>DNS解析</strong> - 在<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上设置DNS解析，包含<code>A</code>解析和<code>CNAME</code>解析</li>\n<li><strong>设置Github Page的CNAME</strong> - 在<code>Hexo</code>工程中的<code>source</code>下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名<code>example.com</code></li>\n</ol>\n<h3>图解详细步骤</h3>\n<ol>\n<li>在<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上添加站点，生成NS服务器域名。</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Cloudflare-addsite.jpg\" alt=\"cloudflare添加站点\"></p>\n<p>图中的<code>jonah.ns.cloudflare.com</code>与<code>stevie.ns.cloudflare.com</code>就是<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>的NS服务器，NS服务器就是DNS服务器，是对域名进行DNS解析的服务器，国内最大的DNS服务器是<code>DNSPOD</code>，但是由于国内域名需要备案，只能解析到国外服务器IP，且<code>CNAME</code>解析可能有不可预知的问题。这也是我在尝试几次失败之后到<a href=\"https://www.namesilo.com/**?rid=8dbc698fz**\" target=\"_blank\" rel=\"noopener\">Namesilo</a>上购买域名，到<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上解析DNS的原因。</p>\n<ol start=\"2\">\n<li>在<a href=\"https://www.namesilo.com/**?rid=8dbc698fz**\" target=\"_blank\" rel=\"noopener\">Namesilo</a>上将域名的NS服务器换成<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上的NS服务器</li>\n</ol>\n<p>选中指定域名右侧的DNS NS服务器，修改NS服务器为上述域名后提交，大概半小时可以生效，慢的话可能需要1天。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS.jpg\" alt></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS-change.jpg\" alt></p>\n<ol start=\"3\">\n<li>在<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上设置DNS解析，包含<code>A</code>解析和<code>CNAME</code>解析</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@        A        185.199.108.153</span><br><span class=\"line\">@        A        185.199.109.153</span><br><span class=\"line\">@        A        185.199.110.153</span><br><span class=\"line\">@        A        185.199.111.153</span><br><span class=\"line\">www      CNAME    your_github_username.github.io.</span><br></pre></td></tr></table></figure></p>\n<p>如何得知上述的4个IP地址呢？到 https://www.ipaddress.com/dns-lookup 中查询DNS即可。上表中的<code>your_github_username</code>需要换成自己的账号。解析大概需要1个小时左右生效。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/cloudflare-lmbiji.com.jpg\" alt></p>\n<ol start=\"4\">\n<li>在<code>Hexo</code>工程中的<code>source</code>下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名<code>example.com</code></li>\n</ol>\n<ul>\n<li>在工程文件的source目录下新建CNAME，写入顶级域名<code>lmbiji.com</code>, 使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>命令会在<code>public</code>目录下生成<code>CNAME</code>文件并上传到Github io对应的仓库下</li>\n<li>在Github Pages选项中设置绑定顶级域名<code>lmbiji.com</code></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/github-naked-domain.jpg\" alt></p>\n","site":{"data":{}},"length":1205,"excerpt":"","more":"<blockquote>\n<p>目标：1) 通过Github Pages搭建自己的静态网站.  2)将自己购买的域名解析到Github Pages.  3) 将顶级域名<code>example.com</code>和子域名<code>www.example.com</code>解析到Github Pages。</p>\n</blockquote>\n<h3>前置条件</h3>\n<ol>\n<li>在<a href=\"https://www.namesilo.com/**?rid=8dbc698fz**\" target=\"_blank\" rel=\"noopener\">Namesilo</a>上购买域名<code>example.com</code></li>\n<li>在Github搭建好Pages，参考<a href=\"https://lmbiji.com/create-github-pages-with-hexo.html\">使用Hexo搭建Github Page</a></li>\n<li>已注册<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>账号</li>\n</ol>\n<h3>主要步骤</h3>\n<ol>\n<li><strong>获取NS服务器</strong> - 在<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上添加站点<code>example.com</code>，生成NS服务器域名</li>\n<li><strong>配置NS服务器</strong> - 在<a href=\"https://www.namesilo.com/**?rid=8dbc698fz**\" target=\"_blank\" rel=\"noopener\">Namesilo</a>上将域名的NS服务器换成<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上的NS服务器</li>\n<li><strong>DNS解析</strong> - 在<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上设置DNS解析，包含<code>A</code>解析和<code>CNAME</code>解析</li>\n<li><strong>设置Github Page的CNAME</strong> - 在<code>Hexo</code>工程中的<code>source</code>下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名<code>example.com</code></li>\n</ol>\n<h3>图解详细步骤</h3>\n<ol>\n<li>在<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上添加站点，生成NS服务器域名。</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Cloudflare-addsite.jpg\" alt=\"cloudflare添加站点\"></p>\n<p>图中的<code>jonah.ns.cloudflare.com</code>与<code>stevie.ns.cloudflare.com</code>就是<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>的NS服务器，NS服务器就是DNS服务器，是对域名进行DNS解析的服务器，国内最大的DNS服务器是<code>DNSPOD</code>，但是由于国内域名需要备案，只能解析到国外服务器IP，且<code>CNAME</code>解析可能有不可预知的问题。这也是我在尝试几次失败之后到<a href=\"https://www.namesilo.com/**?rid=8dbc698fz**\" target=\"_blank\" rel=\"noopener\">Namesilo</a>上购买域名，到<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上解析DNS的原因。</p>\n<ol start=\"2\">\n<li>在<a href=\"https://www.namesilo.com/**?rid=8dbc698fz**\" target=\"_blank\" rel=\"noopener\">Namesilo</a>上将域名的NS服务器换成<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上的NS服务器</li>\n</ol>\n<p>选中指定域名右侧的DNS NS服务器，修改NS服务器为上述域名后提交，大概半小时可以生效，慢的话可能需要1天。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS.jpg\" alt></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS-change.jpg\" alt></p>\n<ol start=\"3\">\n<li>在<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare</a>上设置DNS解析，包含<code>A</code>解析和<code>CNAME</code>解析</li>\n</ol>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@        A        185.199.108.153</span><br><span class=\"line\">@        A        185.199.109.153</span><br><span class=\"line\">@        A        185.199.110.153</span><br><span class=\"line\">@        A        185.199.111.153</span><br><span class=\"line\">www      CNAME    your_github_username.github.io.</span><br></pre></td></tr></table></figure></p>\n<p>如何得知上述的4个IP地址呢？到 https://www.ipaddress.com/dns-lookup 中查询DNS即可。上表中的<code>your_github_username</code>需要换成自己的账号。解析大概需要1个小时左右生效。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/cloudflare-lmbiji.com.jpg\" alt></p>\n<ol start=\"4\">\n<li>在<code>Hexo</code>工程中的<code>source</code>下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名<code>example.com</code></li>\n</ol>\n<ul>\n<li>在工程文件的source目录下新建CNAME，写入顶级域名<code>lmbiji.com</code>, 使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>命令会在<code>public</code>目录下生成<code>CNAME</code>文件并上传到Github io对应的仓库下</li>\n<li>在Github Pages选项中设置绑定顶级域名<code>lmbiji.com</code></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/github-naked-domain.jpg\" alt></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckg3hj9i00000zcibox3v8y90","category_id":"ckg3hj9if0004zcibbho00tm8","_id":"ckg3hj9iu000fzcibewskhdm8"},{"post_id":"ckg3hj9ir000czcib3e0d96rp","category_id":"ckg3hj9if0004zcibbho00tm8","_id":"ckg3hj9iw000izcibi9pcvcqd"},{"post_id":"ckg3hj9i60002zcibm1u9ecap","category_id":"ckg3hj9if0004zcibbho00tm8","_id":"ckg3hj9ix000mzcib1cbtmmui"},{"post_id":"ckg3hj9is000dzcib7lxhm3uw","category_id":"ckg3hj9if0004zcibbho00tm8","_id":"ckg3hj9iy000nzcibshgbcssq"},{"post_id":"ckg3hj9ii0006zcib3s1u6mj7","category_id":"ckg3hj9iu000ezcibt5k9giwk","_id":"ckg3hj9iz000qzcibzt77a3fe"},{"post_id":"ckg3hj9im0009zcib842vsaci","category_id":"ckg3hj9iy000ozcibymaubgd1","_id":"ckg3hj9j1000uzcibnryj9erc"},{"post_id":"ckg3hj9il0008zcib0ion9i76","category_id":"ckg3hj9ix000kzcib765g714b","_id":"ckg3hj9j2000yzcib2uaa4l1w"},{"post_id":"ckg3hj9il0008zcib0ion9i76","category_id":"ckg3hj9iz000rzcibav30tu9p","_id":"ckg3hj9j30010zcibvqtezv4m"}],"PostTag":[{"post_id":"ckg3hj9i00000zcibox3v8y90","tag_id":"ckg3hj9ih0005zcibd5cggnea","_id":"ckg3hj9iv000hzcibzxjssfh1"},{"post_id":"ckg3hj9i00000zcibox3v8y90","tag_id":"ckg3hj9ip000bzcibbcaarcbb","_id":"ckg3hj9iw000jzcibe7nb57qm"},{"post_id":"ckg3hj9i60002zcibm1u9ecap","tag_id":"ckg3hj9iv000gzcibbrhnrqwg","_id":"ckg3hj9j0000tzcib5fvgg0gk"},{"post_id":"ckg3hj9i60002zcibm1u9ecap","tag_id":"ckg3hj9ix000lzcib8kplrmq9","_id":"ckg3hj9j1000vzcibe4g92onb"},{"post_id":"ckg3hj9i60002zcibm1u9ecap","tag_id":"ckg3hj9iz000pzcib9p0q18xh","_id":"ckg3hj9j2000xzcibfw2vkhg2"},{"post_id":"ckg3hj9ii0006zcib3s1u6mj7","tag_id":"ckg3hj9j0000szcibehmixn7w","_id":"ckg3hj9j30011zcib8ujfdc7r"},{"post_id":"ckg3hj9ii0006zcib3s1u6mj7","tag_id":"ckg3hj9j1000wzcib9o7xe7a5","_id":"ckg3hj9j30012zcibssvrfbt1"},{"post_id":"ckg3hj9il0008zcib0ion9i76","tag_id":"ckg3hj9j2000zzciblcsh60xf","_id":"ckg3hj9j40014zcib5k73v10t"},{"post_id":"ckg3hj9im0009zcib842vsaci","tag_id":"ckg3hj9j40013zcibuqj7xauf","_id":"ckg3hj9j60017zcib8eyt1z7y"},{"post_id":"ckg3hj9im0009zcib842vsaci","tag_id":"ckg3hj9j40015zcib8ou05j8t","_id":"ckg3hj9j60018zcib22jlbqru"},{"post_id":"ckg3hj9ir000czcib3e0d96rp","tag_id":"ckg3hj9ih0005zcibd5cggnea","_id":"ckg3hj9j8001bzcib1tu7ydtq"},{"post_id":"ckg3hj9ir000czcib3e0d96rp","tag_id":"ckg3hj9ix000lzcib8kplrmq9","_id":"ckg3hj9j8001czcibgfqst96g"},{"post_id":"ckg3hj9ir000czcib3e0d96rp","tag_id":"ckg3hj9iz000pzcib9p0q18xh","_id":"ckg3hj9j9001ezcib0rlbni4w"},{"post_id":"ckg3hj9is000dzcib7lxhm3uw","tag_id":"ckg3hj9ix000lzcib8kplrmq9","_id":"ckg3hj9j9001fzcibe1869rlx"},{"post_id":"ckg3hj9is000dzcib7lxhm3uw","tag_id":"ckg3hj9j8001dzciblpy98ldg","_id":"ckg3hj9j9001gzcibs9pne8o7"}],"Tag":[{"name":"Hexo","_id":"ckg3hj9ih0005zcibd5cggnea"},{"name":"折腾","_id":"ckg3hj9ip000bzcibbcaarcbb"},{"name":"Gitbook","_id":"ckg3hj9iv000gzcibbrhnrqwg"},{"name":"Github","_id":"ckg3hj9ix000lzcib8kplrmq9"},{"name":"Git","_id":"ckg3hj9iz000pzcib9p0q18xh"},{"name":"Docker","_id":"ckg3hj9j0000szcibehmixn7w"},{"name":"Harbor","_id":"ckg3hj9j1000wzcib9o7xe7a5"},{"name":"Mysql","_id":"ckg3hj9j2000zzciblcsh60xf"},{"name":"Python","_id":"ckg3hj9j40013zcibuqj7xauf"},{"name":"Kindle","_id":"ckg3hj9j40015zcib8ou05j8t"},{"name":"DNS","_id":"ckg3hj9j8001dzciblpy98ldg"}]}}